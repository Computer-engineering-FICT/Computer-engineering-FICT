#ifndef MUL_DIV_H_
#define MUL_DIV_H_

/**
 * @file operations.h
 * @brief Арифметичні операції над числами з плаваючою крапкою.
 */

#include "my_double.h"

/**
 * @brief Ділення двох чисел з плаваючою крапкою.
 *	Функція ділить два числа типу <code>My_Double</code> як
 *	числа з плаваючою крапкою. Результат записуєть в перший параметр.
 * @param dividend ділене і частка. Не може бути пустим вказівником.
 * @param denominator дільник. Не може бути пустим вказівником.
 *	Мантиса не може дорівнювати нулю.
 * @param h якщо дорівнює -1, то відбулося переповнення типу.
 */
void div(My_Double * dividend, const My_Double * denominator, int * h); 

/**
 * @brief Множення двох чисел з плаваючою крапкою.
 *	Функція перемножає два числа типу <code>My_Double</code> як
 *	числа з плаваючою крапкою. Результат записуєть в перший параметр.
 * @param A перший множник і добуток. Не може бути пустим вказівником.
 * @param B другий множник. Не може бути пустим вказівником.
 * @param h якщо дорівнює -1, то відбулося переповнення типу.
 */
void mult(My_Double * A, const My_Double * B, int * h);

/**
 * @brief Віднімання двох чисел з плаваючою крапкою.
 *	Функція віднімає два числа типу <code>My_Double</code> як
 *	числа з плаваючою крапкою. Результат записуєть в перший параметр.
 * @param U зменшуване і різниця. Не може бути пустим вказівником.
 * @param V від'ємник. Не може бути пустим вказівником.
 * @param h якщо дорівнює -1, то відбулося переповнення типу.
 */
void sub(My_Double * U, const My_Double * V, int * h);                        

/**
 * @brief Додавання двох чисел з плаваючою крапкою.
 *	Функція додає два числа типу <code>My_Double</code> як
 *	числа з плаваючою крапкою. Результат записуєть в перший параметр.
 * @param A перший доданок і сума. Не може бути пустим вказівником.
 * @param B другий доданок. Не може бути пустим вказівником.
 * @param h якщо дорівнює -1, то відбулося переповнення типу.
 */
void add(My_Double * A, const My_Double * B, int * h);

/**
 * @brief Залишок від ділення.
 *	Функція знаходить залишок від ділення першого числа на друге.
 *	Тобто від <code>A</code> віднімаємо <code>B</code>, поки <code>B</code>
 *	не стане більшим <code>A</code>. Результат записуєть в перший параметр.
 * @param A перше число і результат. Має бути додатнім. Не може бути пустим вказівником.
 * @param B друге число. Має бути додатнім. Не може бути пустим вказівником.
 */
void rest(My_Double * A, const My_Double * B);  

/**
 * @brief Цілочисельне ділення.
 *	Функція рахує, скільки разів <code>B</code> поміщається в <code>A</code>.
 * @param A перше число. Не може бути пустим вказівником і рівним нулю.
 * @param B друге число. Не може бути пустим вказівником і рівним нулю.
 * @return позитивна частка від ділення.
 * @return -1, якщо неправильні параметри.
 */
int quotient(My_Double  A, My_Double B);

/**
 * @Нормалізація мантиси, якщо потрібно
 * @param Result Число, мантиса якого має бути нормалізованою
 */
void mantissNormalization(My_Double Result);

#endif