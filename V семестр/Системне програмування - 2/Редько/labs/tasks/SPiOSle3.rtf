{\rtf1\adeflang1115\ansi\ansicpg1251\uc1\adeff34\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1049\deflangfe1049{\fonttbl{\f0\froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset204\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fmodern\fcharset204\fprq1{\*\panose 02070309020205020404}Courier New;}{\f34\fswiss\fcharset128\fprq2{\*\panose 020b0604020202020204}Arial Unicode MS;}
{\f71\fswiss\fcharset128\fprq2{\*\panose 020b0604020202020204}@Arial Unicode MS;}{\f96\froman\fcharset0\fprq2 Times New Roman;}{\f94\froman\fcharset238\fprq2 Times New Roman CE;}{\f97\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f98\froman\fcharset162\fprq2 Times New Roman Tur;}{\f99\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f100\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f101\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f102\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f106\fswiss\fcharset0\fprq2 Arial;}{\f104\fswiss\fcharset238\fprq2 Arial CE;}{\f107\fswiss\fcharset161\fprq2 Arial Greek;}{\f108\fswiss\fcharset162\fprq2 Arial Tur;}
{\f109\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f110\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f111\fswiss\fcharset186\fprq2 Arial Baltic;}{\f112\fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f116\fmodern\fcharset0\fprq1 Courier New;}
{\f114\fmodern\fcharset238\fprq1 Courier New CE;}{\f117\fmodern\fcharset161\fprq1 Courier New Greek;}{\f118\fmodern\fcharset162\fprq1 Courier New Tur;}{\f119\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f120\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f121\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f122\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f436\fswiss\fcharset0\fprq2 Arial Unicode MS Western;}
{\f434\fswiss\fcharset238\fprq2 Arial Unicode MS CE;}{\f435\fswiss\fcharset204\fprq2 Arial Unicode MS Cyr;}{\f437\fswiss\fcharset161\fprq2 Arial Unicode MS Greek;}{\f438\fswiss\fcharset162\fprq2 Arial Unicode MS Tur;}
{\f439\fswiss\fcharset177\fprq2 Arial Unicode MS (Hebrew);}{\f440\fswiss\fcharset178\fprq2 Arial Unicode MS (Arabic);}{\f441\fswiss\fcharset186\fprq2 Arial Unicode MS Baltic;}{\f442\fswiss\fcharset163\fprq2 Arial Unicode MS (Vietnamese);}
{\f443\fswiss\fcharset222\fprq2 Arial Unicode MS (Thai);}{\f806\fswiss\fcharset0\fprq2 @Arial Unicode MS Western;}{\f804\fswiss\fcharset238\fprq2 @Arial Unicode MS CE;}{\f805\fswiss\fcharset204\fprq2 @Arial Unicode MS Cyr;}
{\f807\fswiss\fcharset161\fprq2 @Arial Unicode MS Greek;}{\f808\fswiss\fcharset162\fprq2 @Arial Unicode MS Tur;}{\f809\fswiss\fcharset177\fprq2 @Arial Unicode MS (Hebrew);}{\f810\fswiss\fcharset178\fprq2 @Arial Unicode MS (Arabic);}
{\f811\fswiss\fcharset186\fprq2 @Arial Unicode MS Baltic;}{\f812\fswiss\fcharset163\fprq2 @Arial Unicode MS (Vietnamese);}{\f813\fswiss\fcharset222\fprq2 @Arial Unicode MS (Thai);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fcs1 \af34\afs20\alang1115 \fcs0 \fs20\lang1033\langfe1049\cgrid\langnp1033\langfenp1049 \snext0 Normal;}{\*\cs10 \additive 
\ssemihidden Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fcs1 \af0\afs20 \fcs0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid1129508\rsid2502258\rsid3294619\rsid6061658
\rsid6754381\rsid9651269\rsid10452435\rsid12281995\rsid12850374}{\*\generator Microsoft Word 10.0.4524;}{\info{\author Tolick}{\operator \'c2\'eb\'e0\'e4\'e8\'ec\'e8\'f0 \'c8\'eb\'fc\'e8\'f7 \'cf\'f3\'f1\'f2\'ee\'e2\'e0\'f0\'ee\'e2}
{\creatim\yr2006\mo11\dy5\hr8\min15}{\revtim\yr2007\mo9\dy26\hr11\min29}{\version15}{\edmins132}{\nofpages37}{\nofwords8411}{\nofchars47948}{\*\company Home}{\nofcharsws56247}{\vern16475}}\margl1701\margr850\margt1134\margb1134 
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\nolnhtadjtbl\rsidroot12850374 \fet0\sectd 
\linex0\headery709\footery709\colsx709\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}
{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ql \li0\ri0\nowidctlpar\faauto\adjustright\rin0\lin0\itap0 \fcs1 
\af34\afs20\alang1115 \fcs0 \fs20\lang1033\langfe1049\cgrid\langnp1033\langfenp1049 {\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 \'cb\'e0\'e1\'ee\'f0\'e0\'f2\'ee\'f0\'ed\'e0\'ff \'f0\'e0\'e1\'ee\'f2\'e0 1.3
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 Laboratory work 1.3
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'cf\'ce\'d1\'d2\'d0\'ce\'c5\'cd\'c8\'c5 \'c8 \'c8\'d1\'cf\'ce\'cb\'dc\'c7\'ce\'c2\'c0\'cd\'c8\'c5 \'ce\'c1\'da\'c5\'ca\'d2\'ce\'c2 \'d3\'c7\'cb\'ce\'c2 \'c4\'d0\'c5\'c2\'ce\'c2\'c8\'c4\'cd\'db\'d5 \'c8 \'c8\'c5\'d0\'c0\'d0\'d5\'c8\'d7\'c5\'d1\'ca\'c8\'d5
 \'c3\'d0\'c0\'d4\'ce\'c2
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 CONSTRUCTION }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 AND USAGE OF NODE OBJECTS OF TREES AND}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  HIERARCHICAL GRAPHS

\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'d6\'e5\'eb\'fc \'f0\'e0\'e1\'ee\'f2\'fb: \'c8\'e7\'f3\'f7\'e5\'ed\'e8\'e5 \'ec\'e5\'f2\'ee\'e4\'ee\'e2 \'f1\'ee\'e7\'e4\'e0\'ed\'e8\'ff \'f3\'e7\'eb\'ee\'e2 \'e4\'f0\'e5\'e2\'ee\'e2\'e8\'e4\'ed\'fb\'f5 \'e8 \'e8\'e5\'f0\'e0\'f0\'f5\'e8\'f7\'e5\'f1\'ea
\'e8\'f5 \'e3\'f0\'e0\'f4\'ee\'e2, \'ee\'f0\'e3\'e0\'ed\'e8\'e7\'e0\'f6\'e8\'e8 \'e4\'ee\'f1\'f2\'f3\'ef\'e0 \'ea \'e8\'ed\'f4\'ee\'f0\'ec\'e0\'f6\'e8\'e8, \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e8 \'e2\'f5\'ee\'e4\'ed\'ee\'e3\'ee \'f2\'e5\'ea
\'f1\'f2\'e0 \'e8 \'f1\'ee\'ea\'f0\'e0\'f9\'e5\'ed\'e8\'e5 \'ee\'e1\'fa\'e5\'ec\'e0 \'e3\'f0\'e0\'f4\'ee\'e2 \'ef\'f3\'f2\'e5\'ec \'e8\'e7\'fa\'ff\'f2\'e8\'ff \'ef\'ee\'e2\'f2\'ee\'f0\'ff\'fe\'f9\'e8\'f5\'f1\'ff \'f3\'e7\'eb\'ee\'e2.
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 The }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 aim}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  of }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12850374 the }
{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 work: }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 The study of node creation methods for}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 
 the trees and hierarchical graphs, access organization to their data, reconstruction of the source text and }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 graph volume reduction by excluding of repeated nodes}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid12281995 .
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'ca\'f0\'e0\'f2\'ea\'e8\'e5 \'f2\'e5\'ee\'f0\'e5\'f2\'e8\'f7\'e5\'f1\'ea\'e8\'e5 \'f1\'e2\'e5\'e4\'e5\'ed\'e8\'ff
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 Brief theoretical information
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'c4\'eb\'ff \'f2\'ee\'e3\'ee \'f7\'f2\'ee\'e1\'fb \'ef\'f0\'e5\'e4\'ee\'f1\'f2\'e0\'e2\'e8\'f2\'fc \'e2\'ee\'e7\'ec\'ee\'e6\'ed\'ee\'f1\'f2\'fc \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'ff \'ee\'e4\'ed\'ee\'ee\'e1\'f0\'e0\'e7\'ed\'fb\'f5 \'f1\'f2
\'f0\'f3\'ea\'f2\'f3\'f0 \'e4\'e0\'ed\'ed\'fb\'f5 \'ed\'e0 \'f0\'e0\'e7\'ed\'fb\'f5 \'fd\'f2\'e0\'ef\'e0\'f5 \'f0\'e0\'e1\'ee\'f2\'fb \'ea\'ee\'ec\'ef\'e8\'eb\'ff\'f2\'ee\'f0\'e0 \'e8, \'f2\'e0\'ea\'e8\'ec \'ee\'e1\'f0\'e0\'e7\'ee\'ec, \'ec\'e8\'ed\'e8
\'ec\'e8\'e7\'e8\'f0\'ee\'e2\'e0\'f2\'fc \'e7\'e0\'f2\'f0\'e0\'f2\'fb \'ed\'e0 \'ef\'ee\'e2\'f2\'ee\'f0\'ff\'e5\'ec\'fb\'e5 \'ef\'e5\'f0\'e5\'f1\'fb\'eb\'ea\'e8 \'e4\'e0\'ed\'ed\'fb\'f5, \'e2\'e0\'e6\'ed\'ee \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e8\'f2\'fc \'e1
\'e0\'e7\'ee\'e2\'f3\'fe \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'f3 \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'e0 \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e5\'e3\'ee \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'ff \'e8\'eb\'e8 \'eb\'e5\'ea\'f1\'e5\'ec\'fb \'f1\'f2\'e0\'ed\'e4
\'e0\'f0\'f2\'ed\'fb\'ec \'e4\'eb\'ff \'e2\'f1\'e5\'f5 \'fd\'f2\'e0\'ef\'ee\'e2 \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'ff \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'fb. \'cf\'f0\'ee\'f1\'f2\'e5\'e9\'f8\'e8\'e9 \'f1\'ef\'ee\'f1\'ee\'e1 \'ef\'ee\'f1\'f2\'f0\'ee\'e5
\'ed\'e8\'ff \'f2\'e0\'ea\'ee\'e9 \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'fb \'f1\'ee\'f1\'f2\'ee\'e8\'f2 \'e2\'ee \'e2\'ea\'eb\'fe\'f7\'e5\'ed\'e8\'e8 \'e2 \'ed\'e5\'e5 \'e2\'f1\'e5\'f5 \'e2\'ee\'e7\'ec\'ee\'e6\'ed\'fb\'f5 \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'ee\'e2
, \'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'f1\'ee\'e7\'e4\'e0\'fe\'f2\'f1\'ff \'e8 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'fe\'f2\'f1\'ff \'ed\'e0 \'e2\'f1\'e5\'f5 \'fd\'f2\'e0\'ef\'e0\'f5 \'eb\'e5\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'ee\'e3\'ee \'e8 \'f1\'e8\'ed\'f2\'e0\'ea\'f1
\'e8\'f7\'e5\'f1\'ea\'ee\'e3\'ee \'e0\'ed\'e0\'eb\'e8\'e7\'e0, \'e0 \'f2\'e0\'ea\'e6\'e5 \'ef\'f0\'e8 \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'ee\'e9 \'ee\'e1\'f0\'e0\'e1\'ee\'f2\'ea\'e5 \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e9 \'e2\'f5\'ee\'e4
\'ed\'ee\'e3\'ee \'ff\'e7\'fb\'ea\'e0. \'d2\'ee\'e3\'e4\'e0 \'ea\'e0\'e6\'e4\'e0\'ff \'eb\'e5\'ea\'f1\'e5\'ec\'e0 \'e4\'ee\'eb\'e6\'ed\'e0 \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'f2\'fc\'f1\'ff \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'ee\'e9, \'f1\'ee\'f5\'f0\'e0\'ed
\'ff\'fe\'f9\'e5\'e9 \'e4\'e0\'ed\'ed\'fb\'e5 \'eb\'e5\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'ee\'e3\'ee \'e0\'ed\'e0\'eb\'e8\'e7\'e0: \'ea\'ee\'ee\'f0\'e4\'e8\'ed\'e0\'f2\'fb \'f0\'e0\'e7\'ec\'e5\'f9\'e5\'ed\'e8\'ff \'eb\'e5\'ea\'f1\'e5\'ec\'fb \'e2\'ee \'e2\'f5
\'ee\'e4\'ed\'ee\'ec \'f4\'e0\'e9\'eb\'e5, \'ea\'ee\'e4 \'f2\'e8\'ef\'e0 \'eb\'e5\'ea\'f1\'e5\'ec\'fb, \'ea\'ee\'f2\'ee\'f0\'e0\'ff \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'e5\'f2\'f1\'ff \'ef\'ee \'f2\'e0\'e1\'eb\'e8\'f6\'e0\'ec \'eb\'e5\'ea\'f1\'e8\'f7\'e5\'f1
\'ea\'ee\'e3\'ee \'e0\'ed\'e0\'eb\'e8\'e7\'e0, \'e0 \'f2\'e0\'ea\'e6\'e5 \'f1\'e2\'ff\'e7\'e8 \'f3\'e7\'eb\'e0 \'eb\'e5\'ea\'f1\'e5\'ec\'fb \'e2 \'e3\'f0\'e0\'f4\'e5 \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e5\'e3\'ee \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed
\'e8\'ff, \'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'fe\'f2\'f1\'ff \'ef\'f0\'e8 \'f1\'e8\'ed\'f2\'e0\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'ee\'ec \'e0\'ed\'e0\'eb\'e8\'e7\'e5, \'e8 \'e4\'ee\'ef\'ee\'eb\'ed\'e8\'f2\'e5\'eb\'fc\'ed\'fb\'e5 \'f1
\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'e8\'e5 \'f5\'e0\'f0\'e0\'ea\'f2\'e5\'f0\'e8\'f1\'f2\'e8\'ea\'e8 \'f3\'e7\'eb\'ee\'e2 \'e8 \'ef\'ee\'e4\'e3\'f0\'e0\'f4\'ee\'e2. 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 To grant possibility of uniform }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 data structures usage}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  at different stage
s of compiler work and, thus to minimize the costs }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 of repeated data transfers}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 , it is important to define a base structure of }{
\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 standard internal representation }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid6754381 of graph }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 element}{
\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid6754381 s}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995  or tokens}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  for all stages of the program }{\fcs1 \af1\afs24 
\fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 execution}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 . }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 The simplest}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 
 method of such structure }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 creation}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  consists in inclusion of all possible elements into it. }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995 These elements are formed}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  and used at all stages }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 of parser,}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid12281995  and also for semantic processing }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 of source language constructions}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 
. Then each token should be determined }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 by saving of the lexical analysis data structure: place coordinates token}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 
 in an input file, }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 token type code, determined by}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 
 the tables of the lexical analysis, and also the token node connections in the column of internal }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 representation, determined by parse
r with also additional semantic data of nodes and subgraphs.}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  
\par struct lxNode // a node of a tree, DAG or UDG 
\par \{int ndOp; \tab  // an operation code or token type 
\par  unsigned stkLength; 
\par }\pard \ql \fi720\li720\ri0\nowidctlpar\faauto\adjustright\rin0\lin720\itap0 {\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 // module number for terminals or stack length for nonterminals
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\adjustright\rin0\lin0\itap0 {\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  struct lxNode* prvNd, *pstNd;// connection to subordinate nodes 
\par  int dataType;\tab // type code of returned data 
\par  unsigned resLength;  // result length
\par  int x, y, f; // place coordinates in input file
\par  struct lxNode*prnNd;// connection to parent node
\par \};
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'d2\'e0\'ea\'e8\'e5 \'f3\'e7\'eb\'fb \'f1 \'ee\'e4\'ed\'ee\'e9 \'f1\'f2\'ee\'f0\'ee\'ed\'fb \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'fe\'f2 \'ec\'e0\'f1\'f1\'e8\'e2 \'eb\'e5\'ea\'f1\'e5\'ec \'e2 \'ef\'ee\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'f2\'e5\'eb\'fc\'ed\'ee\'f1
\'f2\'e8 \'e8\'f5 \'ef\'ee\'f1\'f2\'f3\'ef\'eb\'e5\'ed\'e8\'ff, \'e2 \'ea\'ee\'f2\'ee\'f0\'ee\'ec, \'ea\'e0\'ea \'e8 \'e2 \'ef\'e5\'f0\'e2\'e8\'f7\'ed\'ee\'ec \'e3\'f0\'e0\'f4\'e5 \'f1 \'ef\'ee\'e4\'f7\'e8\'ed\'e5\'ed\'ed\'ee\'f1\'f2\'fc\'fe \'ee\'ef\'e5
\'f0\'e0\'f6\'e8\'e9, \'ea\'ee\'f2\'ee\'f0\'e0\'ff \'ef\'ee\'eb\'f3\'f7\'e0\'e5\'f2\'f1\'ff \'ef\'f0\'e8 \'f1\'e8\'ed\'f2\'e0\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'ee\'ec \'f0\'e0\'e7\'e1\'ee\'f0\'e5, \'ef\'ee\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'f2\'e5\'eb\'fc\'ed\'ee
\'f1\'f2\'fc \'ef\'ee\'eb\'e5\'e9 \'ed\'e5 \'e2\'e0\'e6\'ed\'e0, \'e0 \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'fe\'f9\'e8\'ec\'e8 \'ff\'e2\'eb\'ff\'fe\'f2\'f1\'ff \'f1\'e2\'ff\'e7\'e8 \'f1 \'e4\'f0\'f3\'e3\'e8\'ec\'e8 \'f3\'e7\'eb\'e0\'ec\'e8 \'e3\'f0\'e0\'f4
\'e0. \'cd\'ee \'ef\'f0\'e8 \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'e8 \'ec\'e8\'ed\'e8\'ec\'e8\'e7\'e0\'f6\'e8\'e8 \'f3\'e7\'eb\'fb \'e3\'f0\'e0\'f4\'e0 \'f0\'e0\'f1\'f1\'ec\'e0\'f2\'f0\'e8\'e2\'e0\'fe\'f2\'f1\'ff \'ea\'e0\'ea \'fd\'eb\'e5\'ec\'e5\'ed\'f2
\'fb \'f2\'e0\'e1\'eb\'e8\'f6\'fb, \'e2 \'ea\'ee\'f2\'ee\'f0\'ee\'e9 \'ea\'eb\'fe\'f7\'e0\'ec\'e8 \'e4\'ee\'eb\'e6\'ed\'fb \'e1\'fb\'f2\'fc \'ee\'e4\'ed\'ee\'e7\'ed\'e0\'f7\'ed\'ee \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'ed\'fb\'e5 \'e2\'fb\'f0\'e0
\'e6\'e5\'ed\'e8\'ff, \'e4\'eb\'ff \'ea\'ee\'f2\'ee\'f0\'fb\'f5 \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'e5\'f2\'f1\'ff \'ee\'f2\'ed\'ee\'f8\'e5\'ed\'e8\'ff \'ef\'ee\'f0\'ff\'e4\'ea\'e0 \'e2 \'ef\'ee\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'f2\'e5\'eb\'fc\'ed\'ee\'f1\'f2
\'e8 \'e8\'e5\'f0\'e0\'f0\'f5\'e8\'f7\'e5\'f1\'ea\'ee\'e3\'ee \'e8\'eb\'e8 \'f0\'e5\'ea\'f3\'f0\'f1\'e8\'e2\'ed\'ee\'e3\'ee \'f1\'ea\'eb\'e0\'e4\'fb\'e2\'e0\'ed\'e8\'ff \'f1\'f2\'f0\'ee\'ea, \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'ed\'fb\'f5
 \'e8\'e7 \'ea\'eb\'fe\'f7\'e5\'e2\'fb\'f5 \'ef\'ee\'eb\'e5\'e9 \'f3\'e7\'eb\'ee\'e2 \'e3\'f0\'e0\'f4\'e0. 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 On the one hand, such nodes define token array}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid6754381  in }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 
input sequence, in which, as well as in the primary graph with operation subordination, which is received from syntactical analysis, }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 n
ode field sequence is not important, but connection definition for other column nodes are.}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  But o}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 
n other hand, under minimization the column nodes}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  are considered as elements of the table, which }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995 
keys should be uniquely represented by expressions}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 , for which }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid6754381 order relations }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 is de}{
\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid6754381 f}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995 ined in a sequence of a hierarchical or recursive addition of lines reproduced from key fields of }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995 column nodes.}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995  
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'ce\'ef\'f0\'e5\'e4\'e5\'eb\'e5\'ed\'e8\'e5 \'ee\'f2\'ed\'ee\'f8\'e5\'ed\'e8\'ff \'ef\'ee\'f0\'ff\'e4\'ea\'e0 \'ee\'ef\'e8\'f0\'e0\'e5\'f2\'f1\'ff \'ed\'e0 \'ef\'f0\'e8\'ed\'f6\'e8\'ef\'fb \'ee\'f2\'ee\'e1\'f0\'e0\'e6\'e5\'ed\'e8\'ff \'e2 \'e4\'e5\'f0
\'e5\'e2\'fc\'ff\'f5 \'e8\'eb\'e8 \'e3\'f0\'e0\'f4\'e0\'f5 \'ef\'f0\'e5\'f4\'e8\'ea\'f1\'ed}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12850374 \'fb}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 \'f5 \'f4\'ee\'f0\'ec\'e0\'f2\'ee\'e2 \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e9. \'ca\'e0\'ea \'e1\'fb\'eb\'ee \'ef\'ee\'ea\'e0\'e7\'e0
\'ed\'ee \'e2 \'eb\'e0\'e1\'ee\'f0\'e0\'f2\'ee\'f0\'ed\'ee\'e9 \'f0\'e0\'e1\'ee\'f2\'e5 1.2, \'ee\'f2\'ed\'ee\'f8\'e5\'ed\'e8\'ff \'ef\'ee\'f0\'ff\'e4\'ea\'e0 \'ea\'eb\'fe\'f7\'e5\'e2\'fb\'f5 \'ef\'ee\'eb\'e5\'e9 \'f1\'ee\'f1\'f2\'e0\'e2\'eb\'ff\'e5\'f2 
\'ee\'f1\'ed\'ee\'e2\'f3 \'f3\'ef\'ee\'f0\'ff\'e4\'ee\'f7\'e5\'ed\'e8\'ff \'f2\'e0\'e1\'eb\'e8\'f6 \'e8 \'ef\'ee\'f1\'f2\'f0\'ee\'e5\'ed\'e8\'ff \'f3\'ef\'ee\'f0\'ff\'e4\'ee\'f7\'e8\'e2\'e0\'fe\'f9\'e8\'f5 \'e8\'ed\'e4\'e5\'ea\'f1\'ee\'e2 \'e4\'eb\'ff 
\'e2\'f1\'e5\'f5 \'e2\'e8\'e4\'ee\'e2 \'ef\'ee\'e4\'e3\'f0\'e0\'f4\'ee\'e2. \'cf\'f0\'e8 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e8 \'ee\'f2\'ed\'ee\'f8\'e5\'ed\'e8\'e9 \'ef\'ee\'f0\'ff\'e4\'ea\'e0 \'e8\'ed\'e4\'e5\'ea\'f1\'fb \'e4\'eb\'ff \'ef
\'ee\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'f2\'e5\'eb\'fc\'ed\'ee\'f1\'f2\'e5\'e9 \'e7\'e0\'ef\'e8\'f1\'e5\'e9 (\'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0) \'f3\'e7\'eb\'ee\'e2 \'eb\'e5\'ea\'f1\'e5\'ec \'f0\'e0\'e7\'f0\'e5\'f8\'e0\'fe\'f2 \'ef\'ee\'e2\'fb\'f8\'e0\'f2\'fc 
\'f1\'ea\'ee\'f0\'ee\'f1\'f2\'fc \'e2\'fb\'e1\'ee\'f0\'ea\'e8 \'ef\'f0\'e8 \'f0\'e5\'f8\'e5\'ed\'e8\'e8 \'f0\'e0\'e7\'ed\'fb\'f5 \'e7\'e0\'e4\'e0\'f7 \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'ee\'e9 \'ee\'e1\'f0\'e0\'e1\'ee\'f2\'ea\'e8 \'e2 \'f1\'e8
\'f1\'f2\'e5\'ec\'ed\'fb\'f5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e0\'f5, \'ef\'f0\'e5\'e6\'e4\'e5 \'e2\'f1\'e5\'e3\'ee, \'ec\'e0\'f8\'e8\'ed\'ed\'ee-\'ed\'e5\'e7\'e0\'e2\'e8\'f1\'e8\'ec\'ee\'e9 \'ee\'ef\'f2\'e8\'ec\'e8\'e7\'e0\'f6\'e8\'e8. \'cf\'f0\'e8\'ec
\'e5\'f0\'fb \'e3\'f0\'e0\'f4\'ee\'e2 \'ef\'f0\'ee\'f1\'f2\'fb\'f5 \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e9 \'e8 \'f3\'f1\'eb\'ee\'e2\'ed\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2 \'ef\'ee\'ea\'e0\'e7\'e0\'ed\'ed\'fb\'e5 \'ed\'e0 \'f0\'e8\'f1 3.1, \'f0
\'e8\'f1. 3.2, \'f0\'e8\'f1. 3.3 \'e8 \'f0\'e8\'f1. 3.4.
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374 The }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid6754381\charrsid12850374 order relation }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374 
definition bases on principles of }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12850374 language }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12850374\charrsid12850374 construction }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid12850374 mapping in trees or }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12850374 graph}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid12850374 s}{\fcs1 
\af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374  }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12850374 in}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374  prefix formats f}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid12850374 or}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374  expression re}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12850374 constructio}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid12281995\charrsid12850374 n. As was shown in laboratory work 1.2, ord}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12850374 er relations of key fields make}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374 
 a basis of }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12850374 table}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12850374\charrsid12850374  }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374 ordering }{\fcs1 \af1\afs24 
\fcs0 \f1\fs24\cgrid0\insrsid12281995 or}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374  construction of ordering indexes for all kinds of subgraphs. }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid12850374 For }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12850374\charrsid12850374 order relation usage,}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid12850374 
 the indexes for sequences of }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12850374\charrsid12850374 token node }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid12850374 re}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12850374\charrsid12850374 cord}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid12850374 s}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374 
 (structures) allow to increase an access speed for want of solution of different problems of semantic processing in the system programs, first of all, machine-independent optimization. Examples }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid6754381\charrsid6754381 of simple expression graphs }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid6754381 and }{\fcs1 \ab\af1\afs24 \fcs0 
\b\f2\fs24\highlight3\cgrid0\insrsid12281995\charrsid6754381 if}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid6754381\charrsid6754381  statements are shown on}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid6754381  f}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid12281995\charrsid12850374 i}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid6754381 g.}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374  3.1, fig. 3.2, fig. 3.3}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid6754381 ,}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12850374  and fig. 3.4.
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'d0\'e8\'f1. 3.1. \'cd\'e0\'ef\'f0\'e0\'e2\'eb\'e5\'ed\'ed\'fb\'e9 \'e0\'f6\'e8\'ea\'eb\'e8\'f7\'e5\'f1\'ea\'e8\'e9 \'e3\'f0\'e0\'f4 \'e4\'eb\'ff \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'e0 \'ef\'f0\'e8\'f1\'e2\'e0\'e8\'e2\'e0\'ed\'e8\'ff b=f(a-1)+a-1
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid12281995 Fig. 3.1. The directed acyclic }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid12281995 graph}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid12281995\charrsid12281995  for an assignment b = f (a-1) + a-1
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'c2 \'ef\'f0\'e8\'ec\'e5\'f0\'e0\'f5 \'e3\'f0\'e0\'f4\'ee\'e2 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'ed\'fb\'e5 \'f1\'f1\'fb\'eb\'ea\'e8 \'ef\'ee\'e2\'f2\'ee\'f0\'ed\'fb\'e5 \'f1\'e2\'ff\'e7\'e8 \'e4\'eb\'ff \'ef\'ee\'e2\'f2\'ee\'f0\'ff\'e5\'ec
\'fb\'f5 \'ef\'ee\'e4\'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e9, \'ef\'ee\'ea\'e0\'e7\'e0\'ed\'ed\'fb\'e5 \'f8\'f2\'f0\'e8\'f5\'ee\'e2\'ee\'e9 \'eb\'e8\'ed\'e8\'e5\'e9, \'e0 \'f2\'e0\'ea\'e6\'e5 \'ee\'e1\'f0\'e0\'f2\'ed\'fb\'e5 \'f1\'e2\'ff\'e7\'e8 \'e4\'eb\'ff
 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2 break \'e8 continue, \'ef\'ee\'ea\'e0\'e7\'e0\'ed\'ed\'fb\'e5 \'ed\'e0 \'f0\'e8\'f1. 3.4 \'e8 \'f0\'e8\'f1. 3.6 \'f8\'f2\'f0\'e8\'f5-\'ef\'f3\'ed\'ea\'f2\'e8\'f0\'ed\'ee\'e9 \'eb\'e8\'ed\'e8\'e5\'e9. \'ca\'eb\'fe
\'f7\'e5\'e2\'fb\'e5 \'f1\'eb\'ee\'e2\'e0 endcase \'e8 endloop \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'fe\'f2\'f1\'ff \'e2 \'ed\'e5\'ea\'ee\'f2\'ee\'f0\'fb\'f5 \'ea\'ee\'ec\'ef\'fc\'fe\'f2\'e5\'f0\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'e0\'f5, \'e2\'ee \'e8\'e7\'e1\'e5
\'e6\'e0\'ed\'e8\'e5 \'ef\'f3\'f2\'e0\'ed\'e8\'f6\'fb \'f1 \'ee\'ea\'ee\'ed\'f7\'e0\'ed\'e8\'ff\'ec\'e8 \'f1\'ee\'ee\'f2\'e2\'e5\'f2\'f1\'f2\'e2\'f3\'fe\'f9\'e8\'f5 \'e1\'eb\'ee\'ea\'ee\'e2.
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid2502258 In}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid2502258\charrsid2502258  graph}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid2502258  examples}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid2502258\charrsid2502258 ,}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid6754381  }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid2502258\charrsid6754381 connections }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid2502258 w}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid1129508 i}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid2502258 th}{\fcs1 \af1\afs24 
\fcs0 \f1\fs24\cgrid0\insrsid2502258\charrsid6754381  repeated subexpressions }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid2502258 are}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid6754381  }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid12281995\charrsid6754381 shown by a dashed line, and also feedback for operators break and continue shown in a fig. 3.4 and fig. }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid6754381\charrsid6754381 3.6 }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid12281995\charrsid6754381 by }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight7\cgrid0\insrsid12281995\charrsid2502258 prime-dashed}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid6754381  line. The keyword}{\fcs1 
\af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid6754381 s}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid6754381  }{\fcs1 \ab\af1\afs24 \fcs0 \b\f2\fs24\cgrid0\insrsid12281995\charrsid6754381 endcase }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\cgrid0\insrsid12281995\charrsid6754381 and }{\fcs1 \ab\af1\afs24 \fcs0 \b\f2\fs24\cgrid0\insrsid12281995\charrsid6754381 endloop }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid6754381 are used in some comput}{\fcs1 \af1\afs24 
\fcs0 \f1\fs24\cgrid0\insrsid2502258 er }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid3294619 languages}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid2502258  }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid2502258\charrsid3294619 to}{\fcs1 
\af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid3294619  avoid confusio}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid2502258\charrsid3294619 n with}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid3294619  appropriate block}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid2502258\charrsid3294619  terminations}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid3294619 .}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid6754381 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995  
\par 
\par \'d0\'e8\'f1. 3.2. \'c4\'e5\'f0\'e5\'e2\'ee \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'ff a?b:c
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid1129508 Fig. 3.2. A tree of expression a?}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid1129508\charrsid1129508  }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid1129508 b}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid1129508 :c
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995  
\par \'d0\'e8\'f1. 3.3. \'c4\'e5\'f0\'e5\'e2\'ee \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'e0 if(a)f();else g();
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid1129508 Fig. 3.3. A tree of operator if (a) f (); else g ();
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par 
\par \'d0\'e8\'f1. 3.4. \'cd\'e0\'ef\'f0\'e0\'e2\'eb\'e5\'ed\'ed\'fb\'e9 \'e3\'f0\'e0\'f4 \'e4\'eb\'ff \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'e0: 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508 Fig. 3.4. A }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid1129508\charrsid1129508 dir}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508 e}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid1129508\charrsid1129508 cted graph for}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508  operator:}{
\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid1129508  
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 switch(c)case a:b=a-c; break; default: b++;
\par 
\par \'cd\'e0 \'f0\'e8\'f1. 3.5 \'ef\'ee\'ea\'e0\'e7\'e0\'ed\'ed\'fb\'e9 \'ef\'f0\'ee\'f1\'f2\'ee\'e9 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0 \'f6\'e8\'ea\'eb\'e0 \'f1 \'ef\'ee\'f1\'f2\'f3\'f1\'eb\'ee\'e2\'e8\'e5\'ec, \'e0 \'ed\'e0 \'f0\'e8\'f1. 3.6 \endash  \'f1\'e2
\'ff\'e7\'ea\'e0 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2 \'e2 \'f6\'e8\'ea\'eb\'e5 \'f1 \'ef\'f0\'e5\'e4\'f3\'f1\'eb\'ee\'e2\'e8\'e5\'ec, \'e2\'fb\'ef\'ee\'eb\'ed\'ff\'e5\'ec\'ee\'ec \'ef\'f0\'e8 \'e4\'e2\'ee\'e8\'f7\'ed\'ee\'ec \'ef\'ee\'e8\'f1\'ea\'e5.

\par 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508 In a fig. 3.5 shown simple operators of a cycle with }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid1129508\charrsid1129508 post-condition}{\fcs1 \af1\afs24 
\fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508 , and in a fig. 3.6 - }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid1129508\charrsid1129508 bunch}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508  of operators in a cycle with a precondition executed for binary }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid1129508\charrsid1129508 search}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508 .}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid1129508 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par 
\par 
\par \'d0\'e8\'f1. 3.5. \'c4\'e5\'f0\'e5\'e2\'ee \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'e0 do a+=b; while(c);
\par Fig. 3.5. A tree of an operator do a + = b; while (c);
\par 
\par 
\par 
\par 
\par \'d0\'e8\'f1. 3.6. \'cd\'e0\'ef\'f0\'e0\'e2\'eb\'e5\'ed\'ed\'fb\'e9 \'e0\'f6\'e8\'ea\'eb\'e8\'f7\'e5\'f1\'ea\'e8\'e9 \'e3\'f0\'e0\'f4 \'e4\'eb\'ff \'f1\'e2\'ff\'e7\'ea\'e8 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2: 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508 Fig. 3.6. The directed acyclic }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid1129508\charrsid1129508 graph}{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508  for}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid1129508\charrsid1129508  bunch}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\highlight3\cgrid0\insrsid12281995\charrsid1129508  of operators:}{
\fcs1 \af1\afs24 \fcs0 \f1\fs24\cgrid0\insrsid12281995\charrsid1129508  
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'85; n=(nD+nU)>>1; while(nD<n)if(k==el[n]...ky)break; if(k<el[n].ky)nD=n;elsenU=n;n=(n+n)>>1;;return n;
\par 
\par \'85; n = (nD + nU) >> 1; while (nD < n) if (k == el [n]... Ky) break; if (k < el [n] .ky) nD = n; elsenU = n; n = (n + n) >> 1;; return n;
\par 
\par \'d0\'e0\'e7\'ed\'e8\'f6\'e0 \'e2 \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'ff\'f5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2 \'f1 \'ef\'f0\'e5\'e4\'f3\'f1\'eb\'ee\'e2\'e8\'ff\'ec\'e8 \'e8 \'ef\'ee\'f1\'f2\'f3\'f1\'eb\'ee\'e2\'e8\'ff\'ec\'e8 \'f1
\'ee\'f1\'f2\'ee\'e8\'f2, \'ef\'f0\'e5\'e6\'e4\'e5 \'e2\'f1\'e5\'e3\'ee, \'e2 \'ef\'f0\'e8\'f1\'ee\'e5\'e4\'e8\'ed\'e5\'ed\'e8\'e8 \'ef\'ee\'e2\'f2\'ee\'f0\'ff\'e5\'ec\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2 \'e8 \'f3\'f1\'eb\'ee\'e2\'e8\'e9 \'ea
 \'ef\'f0\'ee\'f2\'e8\'e2\'ee\'ef\'ee\'eb\'ee\'e6\'ed\'fb\'ec \'e2\'e5\'f2\'e2\'ff\'ec \'e3\'f0\'e0\'f4\'e0. \'ca\'f0\'ee\'ec\'e5 \'f2\'ee\'e3\'ee, \'ee\'ed\'e8 \'e4\'ee\'eb\'e6\'ed\'fb \'e1\'fb\'f2\'fc \'ee\'e1\'ee\'e7\'ed\'e0\'f7\'e5\'ed\'fb \'f3\'e7
\'eb\'e0\'ec\'e8 \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'e8 \'f0\'e0\'e7\'ed\'fb\'f5 \'f2\'e8\'ef\'ee\'e2: _while \'e8 _until \'e4\'eb\'ff \'ef\'f0\'e5\'e4\'f3\'f1\'eb\'ee\'e2\'e8\'e9 \'e8\'eb\'e8 \endash _until \'e8 \'e4\'eb\'ff \'ef\'ee\'f1\'f2
\'f3\'f1\'eb\'ee\'e2\'e8\'e9. \'d6\'e8\'ea\'eb\'fb \'f2\'e8\'ef\'e0 for \'f2\'e0\'ea\'e6\'e5 \'ff\'e2\'eb\'ff\'fe\'f2\'f1\'ff \'f6\'e8\'ea\'eb\'e0\'ec\'e8 \'f1 \'ef\'f0\'e5\'e4\'f3\'f1\'eb\'ee\'e2\'e8\'ff\'ec\'e8, \'e8 \'e8\'f5 \'e7\'e0\'e3\'ee\'eb\'ee
\'e2\'ee\'ea \'f0\'e0\'e7\'ec\'e5\'f9\'e0\'e5\'f2\'f1\'ff \'ef\'ee \'f1\'f1\'fb\'eb\'ea\'e5 \'ed\'e0 \'ef\'e5\'f0\'e2\'fb\'e9 (\'eb\'e5\'e2\'fb\'e9) \'f3\'ea\'e0\'e7\'e0\'f2\'e5\'eb\'e5\'ec. \'d3\'e7\'e5\'eb [endloop] \'e2\'ee\'ee\'e1\'f9\'e5 \'ed\'e5\'ee
\'e1\'ff\'e7\'e0\'f2\'e5\'eb\'e5\'ed \'e8 \'ec\'ee\'e6\'e5\'f2 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc\'f1\'ff \'e2 \'ed\'e5\'ea\'ee\'f2\'ee\'f0\'fb\'f5 \'ff\'e7\'fb\'ea\'e0\'f5 \'e4\'eb\'ff \'ee\'f2\'ee\'e1\'f0\'e0\'e6\'e5\'ed\'e8\'ff \'ee\'ea
\'ee\'ed\'f7\'e0\'ed\'e8\'ff \'f6\'e8\'ea\'eb\'e0.
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 The difference in submissions of operators with preconditions and \'ef\'ee\'f1\'f2\'f3\'f1\'eb\'ee\'e2\'e8\'ff\'ec\'e8 consists
, first of all, in association of repeated operators and conditions to opposite branches the column. Besides they should be designated by knots \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'e8
 of different types: _ while and _ until for preconditions or - _ until and for \'ef\'ee\'f1\'f2\'f3\'f1\'eb\'ee\'e2\'e8\'e9. The cyc}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
les of a types for also are a cycles with preconditions, and their title is placed under the reference on the first (left) pointer. The knot [endloop] generally is optional and can be used in some languages for map of the termination(ending) of a cycle.

\par 
\par \'c4\'eb\'ff \'f2\'ee\'e3\'ee \'f7\'f2\'ee\'e1\'fb \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e8\'f2\'fc \'ee\'f2\'ed\'ee\'f8\'e5\'ed\'e8\'e5 \'ef\'ee\'f0\'ff\'e4\'ea\'e0 \'e8 \'f1\'ee\'e7\'e4\'e0\'f2\'fc \'e1\'ee\'eb\'e5\'e5 \'f3\'e4\'ee\'e1\'ed\'fb\'e5 \'f3\'f1\'eb
\'ee\'e2\'e8\'ff \'e4\'eb\'ff \'ef\'ee\'f1\'f2\'f0\'ee\'e5\'ed\'e8\'ff \'e8\'ed\'e4\'e5\'ea\'f1\'ee\'e2, \'ee\'e1\'eb\'e5\'e3\'f7\'e0\'fe\'f9\'e8\'e5 \'f0\'e0\'e7\'ed\'fb\'e5 \'e2\'e8\'e4\'fb \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'ee\'e9 \'ee\'e1
\'f0\'e0\'e1\'ee\'f2\'ea\'e8, \'ef\'f0\'e5\'e6\'e4\'e5 \'e2\'f1\'e5\'e3\'ee, \'ec\'e0\'f8\'e8\'ed\'ed\'ee-\'ed\'e5\'e7\'e0\'e2\'e8\'f1\'e8\'ec\'f3\'fe \'ee\'ef\'f2\'e8\'ec\'e8\'e7\'e0\'f6\'e8\'fe \'e2\'e0\'e6\'ed\'ee \'ef\'e5\'f0\'e5\'f1\'f2\'f0\'ee\'e8
\'f2\'fc \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0\'f3 struct lxNode \'ea \'e2\'e8\'e4\'f3, \'e3\'e4\'e5 \'ea\'eb\'fe\'f7\'e5\'e2\'fb\'e5 \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'fb \'f3\'ef\'ee\'f0\'ff\'e4\'ee\'f7\'e5\'ed\'e8\'ff, \'f0\'e0\'f1\'ef\'ee\'eb\'ee\'e6\'e5\'ed
\'fb \'e2 \'e5\'e5 \'ed\'e0\'f7\'e0\'eb\'e5:
\par 
\par To define(determine) an order relation and to create more convenient conditions for construction of indexes facilitating different kinds of semantic processing, first of all, the machine-independent optimi
zation is important for rebuilding a structure struct lxNode to a kind, where the key elements of ordering, are located in it the beginning:
\par 
\par struct lxNode//\'ed\'e5\'f2\'e5\'f0\'ec\'e8\'ed\'e0\'eb\'fc\'ed\'fb\'e9 \'f3\'e7\'e5\'eb \'e4\'e5\'f0\'e5\'e2\'e0, \'d1\'c0\'c3, \'d3\'d1\'c3 
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 Struct lxNode // a unterminal knot of a tree, \'d1\'c0\'c3, \'d3\'d1\'c3 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par int ndOp;\tab  //\'ea\'ee\'e4 \'f2\'e8\'ef\'e0 \'eb\'e5\'ea\'f1\'e5\'ec\'fb
\par 
\par  int ndOp; \tab  // a code such as a lexema
\par 
\par  struct lxNode* prvNd;// \'f1\'e2\'ff\'e7\'fc \'f1 \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'e5\'ed\'ed\'e8\'ea\'ee\'ec
\par 
\par  Struct lxNode* prvNd; // communication(connection) with the predecessor
\par 
\par  struct lxNode* pstNd;// \'f1\'e2\'ff\'e7\'fc \'f1 \'ef\'f0\'e5\'e5\'ec\'ed\'e8\'ea\'ee\'ec 
\par 
\par  Struct lxNode* pstNd; // communication(connection) with the successor 
\par 
\par  int dataType;\tab // \'ea\'ee\'e4 \'f2\'e8\'ef\'e0 \'e2\'ee\'e7\'e2\'f0\'e0\'f9\'e0\'e5\'ec\'fb\'f5 \'e4\'e0\'ed\'ed\'fb\'f5 
\par 
\par  Int dataType; \tab  // a code such as returned datas 
\par 
\par  unsigned resLength;  //\'e4\'eb\'e8\'ed\'e0 \'f0\'e5\'e7\'f3\'eb\'fc\'f2\'e0\'f2\'e0
\par 
\par  Unsigned resLength; // length of an outcome
\par 
\par  int x, y, f;//\'ea\'ee\'ee\'f0\'e4\'e8\'ed\'e0\'f2\'fb \'f0\'e0\'e7\'ec\'e5\'f9\'e5\'ed\'e8\'ff \'e2 \'e2\'f5\'ee\'e4\'ed\'ee\'ec \'f4\'e0\'e9\'eb\'e5
\par 
\par  Int x, y, f; // coordinates of accommodation in an input file
\par 
\par  struct lxNode* prnNd;//\'f1\'e2\'ff\'e7\'fc \'f1 \'f0\'ee\'e4\'e8\'f2\'e5\'eb\'fc\'f1\'ea\'e8\'ec \'f3\'e7\'eb\'ee\'ec 
\par 
\par  Struct lxNode* prnNd; // communication(connection) with a parent knot 
\par 
\par  unsigned stkLength;//\'e4\'eb\'e8\'ed\'e0 \'f1\'f2\'e5\'ea\'e0 \'ee\'e1\'f0\'e0\'e1\'ee\'f2\'ea\'e8 \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'ea\'e8
\par 
\par  Unsigned stkLength; // length of the stack of processing of semantics
\par 
\par ;
\par 
\par ;
\par 
\par \'cf\'f0\'e8\'ec\'e5\'f0\'fb \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'ff \'e3\'f0\'e0\'f4\'ee\'e2 \'ef\'f0\'ee\'f1\'f2\'fb\'f5 \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e9, \'ef\'ee\'ea\'e0\'e7\'e0\'ed\'ed\'fb\'e5 \'ed\'e0 \'f0\'e8\'f1
. 3.1, 3.2, 3.3, 3.4 \'e8 3.5, \'ef\'ee\'f1\'f2\'f0\'ee\'e5\'ed\'fb \'ed\'e0 \'ee\'f1\'ed\'ee\'e2\'e5 \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'f3\'ef\'f0\'e0\'e2\'eb\'e5\'ed\'e8\'ff \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'e5\'ec \'f1\'e8\'ec\'e2
\'ee\'eb\'fc\'ed\'fb\'f5 \'ee\'e1\'f0\'e0\'e7\'ee\'e2 char *imgs[]. \'c4\'e0\'eb\'e5 \'ef\'ee\'ea\'e0\'e7\'e0\'ed \'ef\'f0\'e8\'ec\'e5\'f0 \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'f3\'e7\'eb\'ee\'e2 \'e4\'eb\'ff \'f0\'e8\'f1. 3.1 \'f1 \'ea\'ee\'f0\'ed\'e5\'e2\'fb
\'ec \'f3\'e7\'eb\'ee\'ec pic1[1].
\par 
\par The examples of submission of the graphs of simple expressions shown in a fig. 3.1, 3.2, 3.3, 3.4 and 3.5, are constructed because of o
f array of management of reproduction of character images char *imgs []. Yes the example of an array of knots for a fig. 3.1 with a rooted knot pic1 [1] is shown.
\par 
\par char *imgs[]="b","a","1","f","c","g","k","ky","n","nD",
\par 
\par Char *imgs [] = " b", a "," 1 "," f", c", g", k", ky", n", nD ",
\par 
\par \tab \tab \tab \tab  "nU","el";
\par 
\par \tab \tab \tab \tab  "NU", "el";
\par 
\par struct lxNode pic1[]=\tab \tab // b=f(a-1)+a-1
\par 
\par Struct lxNode pic1 [] = \tab \tab  // b = f (a-1) + a-1
\par 
\par _nam,(struct lxNode*)imgs[0], NULL, 0, 0, 0, 0, 0,
\par 
\par  _ nam, (struct lxNode *) imgs [0], NULL, 0, 0, 0, 0, 0,
\par 
\par  &token[1], 0,
\par 
\par  . Token [1], 0,
\par 
\par  _ass,&pic1[0], &pic1[2], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ ass, and pic1 [0], and pic1 [2], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam, (struct lxNode*)imgs[3], NULL, 0, 0, 0, 0, 0,
\par 
\par  _ nam, (struct lxNode *) imgs [3], NULL, 0, 0, 0, 0, 0,
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _brkt,&pic1[2], &pic1[5], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ brkt, and pic1 [2], and pic1 [5], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[1], NULL, 0, 0, 0, 0, 0,
\par 
\par  _ nam, (struct lxNode *) imgs [1], NULL, 0, 0, 0, 0, 0,
\par 
\par  NULL, 0, 
\par 
\par  NULL, 0, 
\par 
\par  _sub, &pic1[4], &pic1[6], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ sub, and pic1 [4], and pic1 [6], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _srcn,(struct lxNode*)imgs[2], NULL, 0, 0, 0, 0, 0,
\par 
\par  _ srcn, (struct lxNode *) imgs [2], NULL, 0, 0, 0, 0, 0,
\par 
\par  NULL, 0,
\par 
\par  NULL, 0,
\par 
\par  _add, &pic1[3], &pic1[5], 0, 0, 0, 0, 0, NULL, 0
\par 
\par  _ add, and pic1 [3], and pic1 [5], 0, 0, 0, 0, 0, NULL, 0
\par 
\par ;
\par 
\par ;
\par 
\par \'d1\'eb\'e5\'e4\'f3\'fe\'f9\'e5\'e5 \'ee\'ef\'e8\'f1\'e0\'ed\'e8\'e5 \'ef\'ee\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'f2 \'ef\'f0\'e8\'ec\'e5\'f0 \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'f3\'e7\'eb\'ee\'e2 \'e4\'eb\'ff \'f0\'e8\'f1. 3.2 \'f1 \'ea\'ee\'f0\'ed\'e5\'e2\'fb\'ec 
\'f3\'e7\'eb\'ee\'ec pic2[1]. 
\par 
\par The following description shows an example of an array of knots for a fig. 3.2 with a rooted knot pic2 [1]. 
\par 
\par struct lxNode pic2[]=\tab \tab // b=a?b:c
\par 
\par Struct lxNode pic2 [] = \tab \tab  // b = a? B:c
\par 
\par _nam, (struct lxNode*)imgs[0], NULL, 0, 0, 0, 0, 0,
\par 
\par  _ nam, (struct lxNode *) imgs [0], NULL, 0, 0, 0, 0, 0,
\par 
\par  NULL, 0,
\par 
\par  NULL, 0,
\par 
\par  _ass, &pic2[0], &pic2[5], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ ass, and pic2 [0], and pic2 [5], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam, (struct lxNode*)imgs[1], NULL, 0, 0, 0, 0, 0,
\par 
\par  _ nam, (struct lxNode *) imgs [1], NULL, 0, 0, 0, 0, 0,
\par 
\par  NULL, 0,
\par 
\par  NULL, 0,
\par 
\par  _qmrk,&pic2[1], &pic2[4], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ qmrk, and pic2 [1], and pic2 [4], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam, (struct lxNode*)imgs[0], NULL, 0, 0, 0, 0, 0,
\par 
\par  _ nam, (struct lxNode *) imgs [0], NULL, 0, 0, 0, 0, 0,
\par 
\par  NULL, 0,
\par 
\par  NULL, 0,
\par 
\par  _cln, &pic2[3], &pic2[6], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ cln, and pic2 [3], and pic2 [6], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam, (struct lxNode*)imgs[4], NULL, 0, 0, 0, 0, 0,
\par 
\par  _ nam, (struct lxNode *) imgs [4], NULL, 0, 0, 0, 0, 0,
\par 
\par  NULL, 0
\par 
\par  NULL, 0
\par 
\par ;
\par 
\par ;
\par 
\par \'d1\'eb\'e5\'e4\'f3\'fe\'f9\'e5\'e5 \'ee\'ef\'e8\'f1\'e0\'ed\'e8\'e5 \'ef\'ee\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'f2 \'ef\'f0\'e8\'ec\'e5\'f0 \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'f3\'e7\'eb\'ee\'e2 \'e4\'eb\'ff \'f0\'e8\'f1. 3.3 \'f1 \'ea\'ee\'f0\'ed\'e5\'e2\'fb\'ec 
\'f3\'e7\'eb\'ee\'ec pic3[4]. 
\par 
\par The following description shows an example of an array of knots for a fig. 3.3 with a rooted knot pic3 [4]. 
\par 
\par struct lxNode pic3[]=\tab \tab // if(a)f();else g();
\par 
\par Struct lxNode pic3 [] = \tab \tab  // if (a) f (); else g ();
\par 
\par _nam,(struct lxNode*)imgs[1], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [1], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _if, &pic3[0], &pic3[3], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ if, and pic3 [0], and pic3 [3], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[3], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [3], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _brkt,&pic3[2], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ brkt, and pic3 [2], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _else,&pic3[1], &pic3[6], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ else, and pic3 [1], and pic3 [6], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[5], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [5], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _brkt,&pic3[5], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ brkt, and pic3 [5], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par ;
\par 
\par ;
\par 
\par \'d1\'eb\'e5\'e4\'f3\'fe\'f9\'e5\'e5 \'ee\'ef\'e8\'f1\'e0\'ed\'e8\'e5 \'ef\'ee\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'f2 \'ef\'f0\'e8\'ec\'e5\'f0 \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'f3\'e7\'eb\'ee\'e2 \'e4\'eb\'ff \'f0\'e8\'f1. 3.4 \'f1 \'ea\'ee\'f0\'ed\'e5\'e2\'fb\'ec 
\'f3\'e7\'eb\'ee\'ec pic4[16]. 
\par 
\par The following description shows an example of an array of knots for a fig. 3.4 with a rooted knot pic4 [16]. 
\par 
\par struct lxNode pic4[]= // switch(c)
\par 
\par Struct lxNode pic4 [] = // switch (c)
\par 
\par // case a:b=a-c; break; default :b++;
\par 
\par // case a:b = a-c; break; default :b ++;
\par 
\par _nam, (struct lxNode*)imgs[4], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [4], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _case,&pic4[0], &pic4[2], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ case, and pic4 [0], and pic4 [2], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam, (struct lxNode*)imgs[1], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [1], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _cln, &pic4[1], &pic4[9], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ cln, and pic4 [1], and pic4 [9], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam, (struct lxNode*)imgs[0], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [0], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _ass, &pic4[4], &pic4[7], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ ass, and pic4 [4], and pic4 [7], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam, (struct lxNode*)imgs[1], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [1], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _sub, &pic4[6], &pic4[8], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ sub, and pic4 [6], and pic4 [8], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam, (struct lxNode*)imgs[4], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [4], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _EOS, &pic4[5], &pic4[10], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ EOS, and pic4 [5], and pic4 [10], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _break, NULL, NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ break, NULL, NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _EOS, &pic4[3], &pic4[13], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ EOS, and pic4 [3], and pic4 [13], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _default,NULL, NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ default, NULL, NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _cln, &pic4[12],&pic4[15], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ cln, and pic4 [12], and pic4 [15], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam, (struct lxNode*)imgs[0], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [0], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _inr, &pic4[14], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ inr, and pic4 [14], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _endcase, &pic4[11], NULL, 0, 0, 0, 0, 0, NULL, 0
\par 
\par  _ endcase, and pic4 [11], NULL, 0, 0, 0, 0, 0, NULL, 0
\par 
\par ;
\par 
\par ;
\par 
\par \'d1\'eb\'e5\'e4\'f3\'fe\'f9\'e5\'e5 \'ee\'ef\'e8\'f1\'e0\'ed\'e8\'e5 \'ef\'ee\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'f2 \'ef\'f0\'e8\'ec\'e5\'f0 \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'f3\'e7\'eb\'ee\'e2 \'e4\'eb\'ff \'f0\'e8\'f1. 3.5 \'f1 \'ea\'ee\'f0\'ed\'e5\'e2\'fb\'ec 
\'f3\'e7\'eb\'ee\'ec pic5[0]. 
\par 
\par The following description shows an example of an array of knots for a fig. 3.5 with a rooted knot pic5 [0]. 
\par 
\par struct lxNode pic5[]=\tab // do a+=b; while(c);
\par 
\par Struct lxNode pic5 [] = \tab  // do a + = b; while (c);
\par 
\par _endloop,&pic5[4], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ endloop, and pic5 [4], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[1], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [1], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _asAdd,&pic5[1], &pic5[3], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ asAdd, and pic5 [1], and pic5 [3], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[0], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [0], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _whileN,&pic5[2],&pic5[5], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ whileN, and pic5 [2], and pic5 [5], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[4], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [4], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0
\par 
\par NULL, 0
\par 
\par ;
\par 
\par ;
\par 
\par \'d1\'eb\'e5\'e4\'f3\'fe\'f9\'e5\'e5 \'ee\'ef\'e8\'f1\'e0\'ed\'e8\'e5 \'ef\'ee\'ea\'e0\'e7\'fb\'e2\'e0\'e5\'f2 \'ef\'f0\'e8\'ec\'e5\'f0 \'ec\'e0\'f1\'f1\'e8\'e2\'e0 \'f3\'e7\'eb\'ee\'e2 \'e4\'eb\'ff \'f0\'e8\'f1. 3.6 \'f1 \'ea\'ee\'f0\'ed\'e5\'e2\'fb\'ec 
\'f3\'e7\'eb\'ee\'ec pic6[0]. 
\par 
\par The following description shows an example of an array of knots for a fig. 3.6 with a rooted knot pic6 [0]. 
\par 
\par struct lxNode pic6[]=\tab // n=(nD+nU)>>1; while(nD<n)
\par 
\par Struct lxNode pic6 [] = \tab  // n = (nD + nU) >> 1; while (nD < n) 
\par 
\par \tab //  if(k==el[n].ky)break; if(k<el[n].ky)nD=n; 
\par 
\par \tab  // if (k == el [n] .ky) break; if (k < el [n] .ky) nD = n; 
\par 
\par \tab //  else nU=n; n=(nD+nU)>>1;return n;
\par 
\par \tab  // else nU = n; n = (nD + nU) >> 1; return n;
\par 
\par _nam,(struct lxNode*)imgs[8], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [8], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _ass, &pic6[0], &pic6[5], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ ass, and pic6 [0], and pic6 [5], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[9], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [9], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _add, &pic6[2], &pic6[4], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ add, and pic6 [2], and pic6 [4], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[10], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [10], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _shRgt,&pic6[3], &pic6[6], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ shRgt, and pic6 [3], and pic6 [6], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _srcn,(struct lxNode*)imgs[2], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ srcn, (struct lxNode *) imgs [2], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _EOS, &pic6[1], &pic6[8], 0, 0, 0, 0, 0, NULL, 0, 
\par 
\par  _ EOS, and pic6 [1], and pic6 [8], 0, 0, 0, 0, 0, NULL, 0, 
\par 
\par  _whileP,&pic6[10],&pic6[26],0, 0, 0, 0, 0,NULL, 0,
\par 
\par  _ whileP, and pic6 [10], and pic6 [26], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[9], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [9], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _lt, &pic6[9], &pic6[11], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ lt, and pic6 [9], and pic6 [11], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[8], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [8], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _if, &pic6[14], &pic6[19], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ if, and pic6 [14], and pic6 [19], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[6], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [6], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _eq, &pic6[13], &pic6[17], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ eq, and pic6 [13], and pic6 [17], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[11], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [11], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _ixbr,&pic6[15], &pic6[0], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ ixbr, and pic6 [15], and pic6 [0], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _fldDt,&pic6[16],&pic6[18], 0, 0, 0, 0, 0,NULL, 0,
\par 
\par  _ fldDt, and pic6 [16], and pic6 [18], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _nam,(struct lxNode*)imgs[7], NULL, 0, 0, 0, 0, 0, 
\par 
\par  _ nam, (struct lxNode *) imgs [7], NULL, 0, 0, 0, 0, 0, 
\par 
\par NULL, 0,
\par 
\par NULL, 0,
\par 
\par  _break, NULL, NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ break, NULL, NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _EOS, &pic6[12],&pic6[24], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ EOS, and pic6 [12], and pic6 [24], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _if, &pic6[22], &pic6[23], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ if, and pic6 [22], and pic6 [23], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _lt, &pic6[13], &pic6[17], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ lt, and pic6 [13], and pic6 [17], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ass, &pic6[2], &pic6[0], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ ass, and pic6 [2], and pic6 [0], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _else,&pic6[21],&pic6[25], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ else, and pic6 [21], and pic6 [25], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ass, &pic6[4], &pic6[0], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ ass, and pic6 [4], and pic6 [0], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _EOS, &pic6[20],&pic6[1], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ EOS, and pic6 [20], and pic6 [1], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _return,&pic6[0], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ return, and pic6 [0], NULL, 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _EOS, &pic6[7], &pic6[27], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par  _ EOS, and pic6 [7], and pic6 [27], 0, 0, 0, 0, 0, NULL, 0,
\par 
\par ;
\par 
\par ;
\par 
\par 
\par 
\par 
\par 
\par \'c0\'eb\'e3\'ee\'f0\'e8\'f2\'ec \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e8 \'ea\'e0\'ea \'e1\'e0\'e7\'e0 \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'ee\'e9 \'ee\'e1\'f0\'e0\'e1\'ee\'f2\'ea\'e8 \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e5\'e3\'ee \'ef
\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'ff
\par 
\par Algorithm of reconstruction as basis(!on the basis of) of semantic processing of internal submission
\par 
\par 
\par 
\par 
\par 
\par \'c4\'eb\'ff \'ef\'ee\'f1\'f2\'f0\'ee\'e5\'ed\'e8\'ff \'f1\'e8\'f1\'f2\'e5\'ec \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff \'e2\'e0\'e6\'ed\'ee \'ef\'ee\'f1\'f2\'f0\'ee\'e8\'f2\'fc \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'fb \'e0\'ed\'e0\'eb
\'e8\'e7\'e0 \'e8 \'f0\'e5\'ea\'ee\'ed\'f4\'e8\'e3\'f3\'f0\'e0\'f6\'e8\'e8 \'ed\'e0 \'ee\'f1\'ed\'ee\'e2\'e5 \'e5\'e4\'e8\'ed\'fb\'f5 \'f2\'e0\'e1\'eb\'e8\'f6, \'f1\'e2\'ff\'e7\'e0\'ed\'ed\'fb\'f5 \'f1 \'f0\'e5\'e0\'eb\'e8\'e7\'ee\'e2\'e0\'ed\'ed\'fb\'ec 
\'ff\'e7\'fb\'ea\'ee\'ec \'f2\'e0\'ea, \'f7\'f2\'ee\'e1\'fb \'e4\'eb\'ff \'ea\'e0\'e6\'e4\'ee\'e3\'ee \'ed\'ee\'e2\'ee\'e3\'ee \'ff\'e7\'fb\'ea\'e0 \'f1\'f2\'f0\'ee\'e8\'eb\'f1\'ff \'ec\'e8\'ed\'e8\'ec\'f3\'ec \'ef\'ee\'f5\'ee\'e6\'e8\'f5 \'f2\'e0\'e1\'eb
\'e8\'f6 \'ed\'e0 \'ee\'f1\'ed\'ee\'e2\'e5 \'f1\'f2\'e0\'ed\'e4\'e0\'f0\'f2\'e0 \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e5\'e3\'ee \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'ff, \'ef\'f0\'e8\'ed\'ff\'f2\'ee\'e3\'ee \'e2 \'ec\'ed\'ee\'e3\'ee\'ff\'e7\'fb
\'f7\'ed\'ee\'e9 \'f1\'e8\'f1\'f2\'e5\'ec\'e5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff. \'c3\'e8\'e1\'ea\'ee\'f1\'f2\'fc \'ef\'e5\'f0\'e5\'f1\'f2\'f0\'ee\'e9\'ea\'e8 \'ff\'e7\'fb\'ea\'ee\'e2 \'ee\'e1\'fb\'f7\'ed\'ee \'ee\'e1\'e5
\'f1\'ef\'e5\'f7\'e8\'e2\'e0\'e5\'f2\'f1\'ff \'ed\'e0\'e1\'ee\'f0\'e0\'ec\'e8 \'f3\'ef\'f0\'e0\'e2\'eb\'ff\'fe\'f9\'e8\'f5 \'f2\'e0\'e1\'eb\'e8\'f6. \'d1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'e5\'f2 \'ec\'ed\'ee\'e3\'ee \'ef\'f3\'f2\'e5\'e9 \'e4\'eb\'ff \'ee\'ef
\'f0\'e5\'e4\'e5\'eb\'e5\'ed\'e8\'ff \'f2\'e0\'ea\'e8\'f5 \'f2\'e0\'e1\'eb\'e8\'f6. \'ce\'e4\'e8\'ed \'e8\'e7 \'ed\'e8\'f5 \'f0\'e0\'f1\'f1\'ec\'ee\'f2\'f0\'e8\'ec \'e4\'e5\'f2\'e0\'eb\'fc\'ed\'ee \'e2 \'fd\'f2\'ee\'e9 \'f0\'e0\'e1\'ee\'f2\'e5.
\par 
\par For construction of the programming systems it is important to construct the programs of the analysis a
nd reconfiguration because of of uniform tables connected to realized language so that for each new language the minimum of the similar tables because of of standard of internal submission accepted in the multilingual programming system was under construc
tion. The flexibility of reorganization of languages is usually ensured with gangs of the managing tables. There are many paths for definition(determination) of such tables. One from them we shall consider in details in this work.
\par 
\par \'d1\'ed\'e0\'f7\'e0\'eb\'e0 \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e8\'ec \'e8\'ec\'e5\'ed\'ee\'e2\'e0\'ed\'e8\'e5 \'e8 \'ea\'ee\'e4\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'f2\'e8\'ef\'ee\'e2 \'eb\'e5\'ea\'f1\'e5\'ec \'f1 \'ef\'ee\'ec\'ee\'f9\'fc\'fe \'ef\'e5\'f0\'e5
\'ed\'f3\'ec\'e5\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e3\'ee \'f2\'e8\'ef\'e0 enum tokType, \'e2 \'ea\'ee\'f2\'ee\'f0\'ee\'ec \'f6\'e5\'eb\'e5\'f1\'ee\'ee\'e1\'f0\'e0\'e7\'ed\'ee \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e8\'f2\'fc\'f1\'ff \'f1 \'f3\'ef\'ee\'f0\'ff\'e4\'ee
\'f7\'e5\'ed\'e8\'e5\'ec \'ea\'ee\'e4\'ee\'e2, \'ea\'ee\'f2\'ee\'f0\'ee\'e5 \'e1\'f3\'e4\'e5\'f2 \'ef\'ee\'eb\'e5\'e7\'ed\'fb\'ec \'ed\'e0 \'e1\'ee\'eb\'fc\'f8\'e8\'ed\'f1\'f2\'e2\'e5 \'fd\'f2\'e0\'ef\'ee\'e2 \'f0\'e0\'e7\'f0\'e0\'e1\'ee\'f2\'ea\'e8 \'e8 
\'ed\'e0\'f1\'f2\'f0\'ee\'e9\'ea\'e8 \'ff\'e7\'fb\'ea\'e0, \'e2\'ea\'eb\'fe\'f7\'e0\'ff \'e2\'f1\'e5 \'e2\'e8\'e4\'fb \'e0\'ed\'e0\'eb\'e8\'e7\'e0, \'f0\'e5\'ea\'ee\'ed\'f4\'e8\'e3\'f3\'f0\'e0\'f6\'e8\'e9 \'e8 \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6
\'e8\'e9. \'c2\'e0\'e6\'ed\'ee \'ee\'e1\'e5\'f1\'ef\'e5\'f7\'e8\'f2\'fc \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'e5 \'e2\'f1\'e5\'f5 \'f1\'ee\'e4\'e5\'f0\'e6\'e0\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'f1\'e8\'ed\'ee\'ed\'e8\'ec\'ee\'e2 \'e8 \'ee\'ec\'ee
\'ed\'e8\'ec\'ee\'e2 \'e2 \'ee\'f2\'e4\'e5\'eb\'fc\'ed\'fb\'f5 \'ea\'ee\'e4\'e0\'f5 \'eb\'e5\'ea\'f1\'e5\'ec. \'c2 \'ef\'f0\'e8\'e2\'e5\'e4\'e5\'ed\'ed\'ee\'ec \'ee\'ef\'e8\'f1\'e0\'ed\'e8\'e8 \'ed\'e8\'e6\'e5 \'f2\'e8\'ef\'e0 \'e8\'f1\'ef\'ee\'eb\'fc\'e7
\'ee\'e2\'e0\'ed\'ed\'ee\'e5 \'ee\'e1\'ee\'e1\'f9\'e5\'ed\'ed\'ee\'e5 \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'ee\'e5 \'e8\'ec\'e5\'ed\'ee\'e2\'e0\'ed\'e8\'e5 \'eb\'e5\'ea\'f1\'e5\'ec \'f1 \'ef\'f0\'e8\'e2\'ff\'e7\'ea\'ee\'e9 \'ea \'e8\'f5 \'ee\'e1
\'ee\'e7\'ed\'e0\'f7\'e5\'ed\'e8\'ff\'ec \'e2 \'ff\'e7\'fb\'ea\'e0\'f5 C/C++, Pascal \'e8 \'e4\'f0\'f3\'e3\'e8\'f5 \'ea\'ee\'ec\'ef\'fc\'fe\'f2\'e5\'f0\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'e0\'f5.
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 At first we shall define \'e8\'ec\'e5\'ed\'ee\'e2\'e0\'ed\'e8\'e5
 and coding of types of lexemas with the help of of enumerated type enum tokType, in which it is expedient to be defined(determined) with ordering of codes, which will be useful on majority
 of development cycles and set-up of language, including all kinds of the analysis, reconfigurations and reconstruction. It is important to supply(ensure) submission of all inclusive synonyms and \'ee\'ec\'ee\'ed\'e8\'ec\'ee\'e2
 in separate codes of lexemas. In the indicated description is lower than a type used generalized semantic \'e8\'ec\'e5\'ed\'ee\'e2\'e0\'ed\'e8\'e5 of lexemas with binding to their labels in languages C/C ++, Pascal and other computer languages.
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par #define begOprtr 0x50
\par 
\par .) Define begOprtr 0x50
\par 
\par \tab // \'f1\'ec\'e5\'f9\'e5\'ed\'e8\'e5 \'ed\'e0\'f7\'e0\'eb\'e0 \'e8\'f1\'ef\'ee\'eb\'ed\'e8\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2
\par 
\par \tab  // a displacement of a beginning of the executive operators
\par 
\par enum tokType
\par 
\par Enum tokType
\par 
\par _nil, _nam,// \'e2\'ed\'e5\'f8\'ed\'e5\'e5 \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'e5
\par 
\par  _ nil, _ nam, // external submission
\par 
\par  _srcn,_cnst,
\par 
\par  _ Srcn, _ cnst,
\par 
\par // \'e2\'f5\'ee\'e4\'ed\'ee\'e5 \'e8 \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e5\'e5 \'ea\'ee\'e4\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'ea\'ee\'ed\'f1\'f2\'e0\'ed\'f2\'fb
\par 
\par // Source and internal coding of a constant
\par 
\par  _if, _then, _else, _elseif,\tab // if then else elseif
\par 
\par  _ If, _ then, _ else, _ elseif, \tab  // if then else elseif
\par 
\par  _case, _switch, _default, _endcase,
\par 
\par  _ Case, _ switch, _ default, _ endcase,
\par 
\par //case switch defualt endcase
\par 
\par // Case switch defualt endcase
\par 
\par  _break, _return, _whileP, _whileN, 
\par 
\par  _ Break, _ return, _ whileP, _ whileN, 
\par 
\par // break return while while
\par 
\par // Break return while while
\par 
\par  _continue, _repeat, _untilN, _endloop, 
\par 
\par  _ Continue, _ repeat, _ untilN, _ endloop, 
\par 
\par // continue repeat until do
\par 
\par // Continue repeat until do
\par 
\par  _for, _to, _downto, _step,// for to downto step 
\par 
\par  _ For, _ to, _ downto, _ step, // for to downto step 
\par 
\par  _untilP, _loop, _with, _endif,
\par 
\par  _ UntilP, _ loop, _ with, _ endif,
\par 
\par  _goto,_extern,_var,_const,
\par 
\par  _ Goto, _ extern, _ var, _ const,
\par 
\par  _enum,_struct/*_record*/,_union,_register,//
\par 
\par  _ Enum, _ struct/ * _ record* /, _ union, _ register, //
\par 
\par  _unsigned,_signed,_char,_short,
\par 
\par  _ Unsigned, _ signed, _ char, _ short,
\par 
\par  _int,_long,_sint64,_uint64,//
\par 
\par  _ Int, _ long, _ sint64, _ uint64, //
\par 
\par  _float,_double,_void,_auto,
\par 
\par  _ Float, _ double, _ void, _ auto,
\par 
\par  _static,_volatile,_typedef,_sizeof,//
\par 
\par  _ Static, _ volatile, _ typedef, _ sizeof, //
\par 
\par  _real,_array,_set,_file,_object, _string, _label,
\par 
\par  _ Real, _ array, _ set, _ file, _ object, _ string, _ label,
\par 
\par  _program,_function,_procedure /*task V*/,
\par 
\par  _ Program, _ function, _ procedure /*task V* /,
\par 
\par  _macromodule,_primitive,_specify,_table, //V
\par 
\par  _ Macromodule, _ primitive, _ specify, _ table, // V
\par 
\par  _generate,_config,_liblist,_library,\tab //V
\par 
\par  _ Generate, _ config, _ liblist, _ library, \tab  // V
\par 
\par  _incdir,_include,_design,_defaultS,
\par 
\par  _ Incdir, _ include, _ design, _ defaultS,
\par 
\par  _instance,_cell,_use,\tab \tab \tab \tab //V
\par 
\par  _ Instance, _ cell, _ use, \tab \tab \tab \tab  // V
\par 
\par  _automatic,_endmodule,_endfunction,_endtask,//V
\par 
\par  _ Automatic, _ endmodule, _ endfunction, _ endtask, // V
\par 
\par  _endprimitive,_endspecify,_endtable,
\par 
\par  _ Endprimitive, _ endspecify, _ endtable,
\par 
\par  _endgenerate,_endconfig,\tab \tab \tab //V
\par 
\par  _ Endgenerate, _ endconfig, \tab \tab \tab  // V
\par 
\par  _endcaseV,_casex,_casez,_wait,_forever,
\par 
\par  _ EndcaseV, _ casex, _ casez, _ wait, _ forever,
\par 
\par  _disable,_ifnone,\tab \tab \tab \tab //V
\par 
\par  _ Disable, _ ifnone, \tab \tab \tab \tab  // V
\par 
\par  _pulsestyle_onevent,_pulsestyle_ondetect,
\par 
\par  _ Pulsestyle _ onevent, _ pulsestyle _ ondetect,
\par 
\par  _showcanceled,_noshowcanceled,\tab \tab //V
\par 
\par  _ Showcanceled, _ noshowcanceled, \tab \tab  // V
\par 
\par  _vectored,_scalared,_small,_medium,_large,//V
\par 
\par  _ Vectored, _ scalared, _ small, _ medium, _ large, // V
\par 
\par  _genvar,_parameter,_localparam,_defparam,
\par 
\par  _ Genvar, _ parameter, _ localparam, _ defparam,
\par 
\par  _specparam,_PATHPULSE$,\tab \tab \tab //V
\par 
\par  _ Specparam, _ PATHPULSE $, \tab \tab \tab  // V
\par 
\par  _inlineF,_forward,_interrupt,_exportF,_extrn,_asmb,
\par 
\par  _ InlineF, _ forward, _ interrupt, _ exportF, _ extrn, _ asmb,
\par 
\par  _input,_output,_inout,\tab \tab \tab \tab //V|SQL+3
\par 
\par  _ Input, _ output, _ inout, \tab \tab \tab \tab  // V | SQL + 3
\par 
\par  _objectP,_constructor,_desctructor,_property,
\par 
\par  _ ObjectP, _ constructor, _ desctructor, _ property,
\par 
\par  _resP,_abstract,\tab \tab \tab \tab \tab //P++9
\par 
\par  _ ResP, _ abstract, \tab \tab \tab \tab \tab  // P ++ 9
\par 
\par  _class,_public,_private,_protected,
\par 
\par  _ Class, _ public, _ private, _ protected,
\par 
\par  _virtual,_friend,\tab \tab \tab \tab //C++16
\par 
\par  _ Virtual, _ friend, \tab \tab \tab \tab  // C ++ 16
\par 
\par  _new,_delete,_tryC,_catch,_throw/*raise*/,//C++20
\par 
\par  _ New, _ delete, _ tryC, _ catch, _ throw/*raise* /, // C ++ 20
\par 
\par  _initial,_always,_assign,_deassign,
\par 
\par  _ Initial, _ always, _ assign, _ deassign,
\par 
\par  _force,_release,\tab \tab \tab \tab \tab //V+26
\par 
\par  _ Force, _ release, \tab \tab \tab \tab \tab  // V + 26
\par 
\par  _reg,_time,_realtime,_event,_buf,_not,\tab //V+32
\par 
\par  _ Reg, _ time, _ realtime, _ event, _ buf, _ not, \tab  // V + 32
\par 
\par  _andG,_orG,_xorG,_nandG,_norG,_xnorG,\tab //V+38
\par 
\par  _ AndG, _ orG, _ xorG, _ nandG, _ norG, _ xnorG, \tab  // V + 38
\par 
\par  _tran,_tranif0,_tranif1,_rtran,
\par 
\par  _ Tran, _ tranif0, _ tranif1, _ rtran,
\par 
\par  _rtranif0,_rtranif1,\tab \tab \tab \tab //V+44
\par 
\par  _ Rtranif0, _ rtranif1, \tab \tab \tab \tab  // V + 44
\par 
\par  _tri,_trior,_triand,_trireg,_tri0,_tri1,\tab //V+50
\par 
\par  _ Tri, _ trior, _ triand, _ trireg, _ tri0, _ tri1, \tab  // V + 50
\par 
\par  _wire,_wand,_wor,_wres,\tab \tab \tab //V+54
\par 
\par  _ Wire, _ wand, _ wor, _ wres, \tab \tab \tab  // V + 54
\par 
\par  _supply0,_supply1,_highz0,_highz1,\tab \tab //V+58
\par 
\par  _ Supply0, _ supply1, _ highz0, _ highz1, \tab \tab  // V + 58
\par 
\par  _strong0,_strong1,_pull0,_pull1,
\par 
\par  _ Strong0, _ strong1, _ pull0, _ pull1,
\par 
\par  _weak0,_weak1,\tab \tab \tab \tab \tab //V+64
\par 
\par  _ Weak0, _ weak1, \tab \tab \tab \tab \tab  // V + 64
\par 
\par  _pulldown,_pullup,_bufif0,_bufif1,
\par 
\par  _ Pulldown, _ pullup, _ bufif0, _ bufif1,
\par 
\par  _notif0,_notif1,\tab \tab \tab \tab \tab //V+70
\par 
\par  _ Notif0, _ notif1, \tab \tab \tab \tab \tab  // V + 70
\par 
\par  _cmos,_rcmos,_nmos,_pmos,_rnmos,_rpmos,  //V+76 
\par 
\par  _ Cmos, _ rcmos, _ nmos, _ pmos, _ rnmos, _ rpmos, // V + 76 
\par 
\par // \'ee\'f2\'ea\'f0\'fb\'f2\'fb\'e5 \'e8 \'e7\'e0\'ea\'f0\'fb\'f2\'fb\'e5 \'f1\'ea\'ee\'e1\'ea\'e8
\par 
\par // Open and closed brackets
\par 
\par  _fork,_join,\tab // \'ef\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'fc\'ed\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2
\par 
\par  _ Fork, _ join, \tab  // of parallel operators
\par 
\par  _opbr,_ocbr,\tab // \'ef\'ee\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2
\par 
\par  _ Opbr, _ ocbr, \tab  // of sequential operators
\par 
\par  _ctbr,_fcbr,_ixbr,_scbr,// \'ea\'ee\'ed\'ea\'e0\'f2\'e5\'ed\'e0\'f6\'e8\'e9 \'e8 \'e8\'ed\'e4\'e5\'ea\'f1\'e0
\par 
\par  _ Ctbr, _ fcbr, _ ixbr, _ scbr, // of concatenations and index
\par 
\par  _brkt,_bckt,_tdkt,_tckt,// \'ef\'ee\'f0\'ff\'e4\'ea\'e0, \'f4\'f3\'ed\'ea\'f6\'e8\'e9 \'e8 \'e4\'e0\'ed\'ed\'fb\'f5
\par 
\par  _ Brkt, _ bckt, _ tdkt, _ tckt, // of the order, functions and datas
\par 
\par  _eos, eos,\tab // \'ef\'e0\'f0\'e0\'eb\'eb\'e5\'eb\'fc\'ed\'fb\'e5 \'e8 \'ef\'ee\'f1\'eb\'e5\'e4\'ee\'e2\'e0\'f2\'e5\'eb\'fc\'ed\'fb\'e5
\par 
\par  _ Eos, eos, \tab  // parallel and sequential
\par 
\par  _EOS=begOprtr, _comma, _cln, _qmrk,// ; , : ?
\par 
\par  _ EOS = begOprtr, _ comma, _ cln, _ qmrk, //;,:?
\par 
\par  _asOr, _asAnd, _asXor, _asAdd,\tab //|= =& =^ =+
\par 
\par  _ AsOr, _ asAnd, _ asXor, _ asAdd, \tab  // | = = and = ^ = +
\par 
\par  _asSub, _asMul, _asDiv, _asMod,\tab // -= *= /= %=
\par 
\par  _ AsSub, _ asMul, _ asDiv, _ asMod, \tab  // - = * = / = of % =
\par 
\par  _asShr, _asShl, _ass, _dcr, _inr, // <<= >>= = -- ++ 
\par 
\par  _ AsShr, _ asShl, _ ass, _ dcr, _ inr, // << = >> = = - ++ 
\par 
\par  _lt, _le, _eq, _ne, _ge, _gt,     // < <= == != >= >
\par 
\par  _ Lt, _ le, _ eq, _ ne, _ ge, _ gt, // < < = ==! = > = >
\par 
\par  _add, _sub, _mul, _div,_fldDt,_fldPt,// + - * / . ->
\par 
\par  _ Add, _ sub, _ mul, _ div, _ fldDt, _ fldPt, // + - * /. - >
\par 
\par  _pwr, _shLfa, _shRga,_eq,_ne,// ** <<< >>> === !==
\par 
\par  _ Pwr, _ shLfa, _ shRga, _ eq, _ ne, // ** <<< >>> ===! ==
\par 
\par  _add,_sub,_mul, _and,\tab \tab // + - * & \'f3\'ed\'e0\'f0\'ed\'fb\'e5
\par 
\par  _ Add, _ sub, _ mul, _ and, \tab \tab  // + - * and monadic
\par 
\par  _norB,_nandB,_nxorB,_xornB, _addr, //~| ~& ~^ 
\par 
\par  _ NorB, _ nandB, _ nxorB, _ xornB, _ addr, // ~ | ~ and ~ ^ 
\par 
\par  _mod, _orB, _andB, _xorB,\tab // % (div mod) | & ^ 
\par 
\par  _ Mod, _ orB, _ andB, _ xorB, \tab  // of % (div mod) | and ^ 
\par 
\par  _shLft, _shRgt, _or, _and,\tab //<< >> || && 
\par 
\par  _ ShLft, _ shRgt, _ or, _ and, \tab  // << >> || . . 
\par 
\par // (or and xor shl shr or and) 
\par 
\par // (or and xor shl shr or and) 
\par 
\par  _xmrk, _invB,_divI, _in //_not,  _notB
\par 
\par  _ Xmrk, _ invB, _ divI, _ in // _ not, _ notB
\par 
\par ;
\par 
\par ;
\par 
\par \'cf\'f0\'e8\'e2\'e5\'e4\'e5\'ed\'ed\'fb\'e9 \'f2\'e8\'ef \'e2\'ea\'eb\'fe\'f7\'e0\'e5\'f2 \'e8\'ec\'e5\'ed\'e0 \'ea\'ee\'e4\'ee\'e2, \'f1\'e3\'f0\'f3\'ef\'ef\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'fb\'e5 \'e7\'e0 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8
\'e5\'ec \'e2 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'e0\'f5 \'f0\'e0\'e7\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'ee\'e2, \'ed\'e0\'f7\'e8\'ed\'e0\'ff \'f1 \'e8\'f1\'ef\'ee\'eb\'ed\'e8\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2, \'ff\'e2\'eb\'ff
\'fe\'f9\'e8\'f5\'f1\'ff \'ed\'e0\'e8\'e1\'ee\'eb\'e5\'e5 \'ee\'e1\'f9\'e8\'ec\'e8 \'e2\'ee \'e2\'f1\'e5\'f5 \'ea\'ee\'ec\'ef\'fc\'fe\'f2\'e5\'f0\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'e0\'f5, \'e8 \'e7\'e0\'ea\'e0\'ed\'f7\'e8\'e2\'e0\'ff \'ee\'ef\'e5\'f0\'e0\'f2
\'ee\'f0\'e0\'ec\'e8 \'ee\'ef\'e8\'f1\'e0\'ed\'e8\'e9 \'e8 \'e4\'e5\'ea\'eb\'e0\'f0\'e0\'f6\'e8\'e9, \'f7\'f2\'ee \'e8\'ed\'e4\'e8\'e2\'e8\'e4\'f3\'e0\'eb\'fc\'ed\'fb\'ec\'e8 \'e4\'eb\'ff \'f0\'e0\'e7\'ed\'fb\'f5 \'ea\'ee\'ec\'ef\'fc\'fe\'f2\'e5\'f0\'ed
\'fb\'f5 \'ff\'e7\'fb\'ea\'ee\'e2. \'ca\'f0\'ee\'ec\'e5 \'f2\'ee\'e3\'ee, \'ef\'f0\'e5\'e4\'ee\'f1\'f2\'e0\'e2\'eb\'ff\'e5\'f2\'f1\'ff \'e2\'ee\'e7\'ec\'ee\'e6\'ed\'ee\'f1\'f2\'fc \'e2\'ea\'eb\'fe\'f7\'e5\'ed\'e8\'ff \'ea\'ee\'e4\'ee\'e2 \'e2\'f1\'e5\'f5 
\'ea\'eb\'fe\'f7\'e5\'e2\'fb\'f5 \'f1\'eb\'ee\'e2 \'ea \'fd\'f2\'ee\'e9 \'f2\'e0\'e1\'eb\'e8\'f6\'e5, \'e4\'e0\'e6\'e5 \'f2\'e5\'f5 \'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'e8\'f1\'ea\'eb\'fe\'f7\'e0\'fe\'f2\'f1\'ff \'ef\'f0\'e8 \'ef\'ee\'f1\'f2\'f0\'ee\'e5\'ed\'e8
\'e8 \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e5\'e9 \'f4\'ee\'f0\'ec\'fb \'ea\'ee\'e4\'ee\'e2. \'d2\'ee \'e5\'f1\'f2\'fc \'f2\'e0\'ea\'ee\'e9 \'f2\'e8\'ef \'ec\'ee\'e6\'ed\'ee \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'f2\'fc, \'ea\'e0\'ea \'ef\'f0\'e8 \'f0\'e5
\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e8 \'e2\'f5\'ee\'e4\'ed\'fb\'f5 \'f2\'e5\'ea\'f1\'f2\'ee\'e2, \'f2\'e0\'ea \'e8 \'ef\'f0\'e8 \'eb\'e5\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'ee\'ec, \'f1\'e8\'ed\'f2\'e0\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'ee\'ec \'e8 \'f1\'e5\'ec
\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'ee\'ec \'e0\'ed\'e0\'eb\'e8\'e7\'e5.
\par 
\par The indicated type includes names of codes which were grouped together behind use in operators of different languages, since the executive operators being most general(common) in all computer languages, and fini
shing operators of the descriptions and declarations, that individual for different computer languages. Besides the possibility of inclusion of codes of all key words to this table is grantiven, even those which are excluded for want of construction of th
e internal form of codes. That is such type can be used, both for want of reconstruction of the source texts, and for want of lexical, syntactical and semantic analysis.
\par 
\par \'cf\'f0\'e8 \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e8 \'ec\'e0\'f2\'e5\'ec\'e0\'f2\'e8\'f7\'e5\'f1\'ea\'e8\'f5 \'e8 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'ed\'fb\'f5 \'f2\'e5\'ea\'f1\'f2\'ee\'e2 \'e3\'eb\'e0\'e2\'ed\'ee\'e9 \'f6\'e5\'eb\'fc\'fe 
\'ff\'e2\'eb\'ff\'e5\'f2\'f1\'ff \'ea\'ee\'f0\'f0\'e5\'ea\'f2\'ed\'ee\'e5 \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'e5 \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e9 \'ec\'e0\'f2\'e5\'ec\'e0\'f2\'e8\'f7\'e5\'f1\'ea\'e8\'f5 \'f4\'ee\'f0\'ec\'f3\'eb 
\'e8 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec \'f1 \'f1\'ee\'e1\'eb\'fe\'e4\'e5\'ed\'e8\'e5\'ec \'ef\'f0\'e0\'e2\'e8\'eb \'ef\'f0\'e8\'ec\'e5\'ed\'e5\'ed\'e8\'ff \'ec\'e8\'ed\'e8\'ec\'e0\'eb\'fc\'ed\'ee \'ed\'e5\'ee\'e1\'f5\'ee\'e4\'e8\'ec\'fb\'f5 \'f1\'ea\'ee
\'e1\'ee\'ea \'e8 \'e4\'f0\'f3\'e3\'e8\'f5 \'e2\'f1\'ef\'ee\'ec\'ee\'e3\'e0\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'f0\'e0\'e7\'e4\'e5\'eb\'e8\'f2\'e5\'eb\'e5\'e9. \'c4\'eb\'ff \'fd\'f2\'ee\'e3\'ee \'ed\'e0\'e4\'ee, \'e2\'ee-\'ef\'e5\'f0\'e2\'fb\'f5, \'ee\'ef\'f0
\'e5\'e4\'e5\'eb\'e8\'f2\'fc \'f1\'f2\'e0\'ed\'e4\'e0\'f0\'f2\'ed\'fb\'e5 \'e8 \'f3\'ef\'f0\'e0\'e2\'eb\'ff\'e5\'ec\'fb\'e5 \'f8\'e0\'e1\'eb\'ee\'ed\'fb \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff, \'e2\'ee-\'e2\'f2\'ee\'f0\'fb\'f5 
\endash  \'e0\'e2\'f2\'ee\'ec\'e0\'f2\'e8\'f7\'e5\'f1\'ea\'ee\'e5 \'f0\'e5\'e4\'e0\'ea\'f2\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'e5 \'f2\'e0\'e1\'f3\'eb\'ff\'f6\'e8\'e9, \'ee\'e1\'ff\'e7\'e0\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'e7\'ed\'e0\'ea\'ee\'e2 \'e8 \'ef\'e5\'f0
\'e5\'e2\'ee\'e4\'e0 \'f1\'f2\'f0\'ee\'ea \'f2\'e5\'ea\'f1\'f2\'ee\'e2, \'e2-\'f2\'f0\'e5\'f2\'fc\'e8\'f5 \endash  \'f3\'ef\'ee\'f0\'ff\'e4\'ee\'f7\'e5\'ed\'e8\'ff \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e9 \'ef\'ee \'f8\'e0\'e1\'eb\'ee\'ed\'e0\'ec \'f1
\'e8\'ed\'f2\'e0\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'ee\'e3\'ee \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'ff, \'e0 \'e2-\'f7\'e5\'f2\'e2\'e5\'f0\'f2\'fb\'f5 \endash  \'e1\'eb\'ee\'ea\'e8\'f0\'ee\'e2\'ea\'e8 \'f4\'ee\'f0\'ec\'e8\'f0\'ee\'e2\'e0
\'ed\'e8\'ff \'ed\'e5\'ff\'e2\'ed\'fb\'f5 \'ea\'eb\'fe\'f7\'e5\'e2\'fb\'f5 \'f1\'eb\'ee\'e2 \'e2\'ee \'e2\'f5\'ee\'e4\'ed\'ee\'ec \'f2\'e5\'ea\'f1\'f2\'e5. 
\par 
\par For want of reconstruction of the mathematical and programm texts a main purpose is the correct reproduction of expressions of the mathematical formulas and programs with observance(holding) of the rules of application minimum& of necessary brackets an}{
\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 d other auxiliary separators. For it it is necessary, at first, to define(determine) standard and controlled templates of reproduction, secondly - automatic editing 
\'f2\'e0\'e1\'f3\'eb\'ff\'f6\'e8\'e9, mandatory signs and transfer(translation) of lines of the texts, thirdly - ordering of constructions on templates syntactical \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'ff
, and in - fourth - blocking of shaping of implicit key words in the source text. 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'c1\'e0\'e7\'ee\'e2\'fb\'ec \'e2\'e0\'f0\'e8\'e0\'ed\'f2\'ee\'ec \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'ff \'f8\'e0\'e1\'eb\'ee\'ed\'e0 \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'e5 \'e1\'f3\'e4\'e5\'ec \'f1\'f7\'e8\'f2\'e0\'f2
\'fc \'f3\'ef\'f0\'e0\'e2\'eb\'ff\'fe\'f9\'e8\'e5 \'f1\'f2\'f0\'ee\'ea\'e8 \'e2\'e8\'e4\'ee\'e2 "xfx", "xfy" \'e8 "yfx" \'e4\'eb\'ff \'e8\'ed\'f4\'e8\'ea\'f1\'ed\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e9, "fx" \'e8 "fy" \'e4\'eb\'ff \'f3\'ed\'e0\'f0\'ed
\'fb\'f5 \'ef\'f0\'e5\'f4\'e8\'ea\'f1\'ed\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e9, "xf" \'e8 "yf" \'e4\'eb\'ff \'f3\'ed\'e0\'f0\'ed\'fb\'f5 \'ef\'ee\'f1\'f2\'f4\'e8\'ea\'f1\'ed\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e9. \'dd\'f2\'ee\'f2 \'ec\'e5\'f5\'e0
\'ed\'e8\'e7\'ec \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'e5\'f2\'f1\'ff \'e4\'eb\'ff \'ee\'f2\'ee\'e1\'f0\'e0\'e6\'e5\'ed\'e8\'ff \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e9 \'e8 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2 \'e2 \'ff\'e7\'fb\'ea\'e5 Prolog, \'ea\'ee\'f2
\'ee\'f0\'fb\'e9 \'e8\'ec\'e5\'e5\'f2 \'e2\'f1\'f2\'f0\'ee\'e5\'ed\'ed\'fb\'e5 \'f1\'f0\'e5\'e4\'f1\'f2\'e2\'e0 \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'f1\'f2\'f0\'f3\'ea\'f2\'f3\'f0 \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e5\'e3\'ee \'ef
\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'ff \'f2\'e5\'ea\'f1\'f2\'ee\'e2 \'ed\'e0 \'fd\'f2\'ee\'ec \'f1\'e0\'ec\'ee\'ec \'ff\'e7\'fb\'ea\'e5. \'c2 \'fd\'f2\'e8\'f5 \'e7\'e0\'ef\'e8\'f1\'ff\'f5 y \'ee\'e7\'ed\'e0\'f7\'e0\'e5\'f2 \'e0\'e2\'f2\'ee\'ec
\'e0\'f2\'e8\'f7\'e5\'f1\'ea\'e8 \'e0\'f1\'f1\'ee\'f6\'e8\'e0\'f2\'e8\'e2\'ed\'fb\'e9 \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2 \'f1 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e5\'e9 \'f1 \'ef\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'ee\'ec f, \'e0 x \'ee\'e7\'ed\'e0\'f7\'e0\'e5\'f2 
\'ed\'e5\'e0\'f1\'f1\'ee\'f6\'e8\'e0\'f2\'e8\'e2\'ed\'fb\'e9 \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2 \'f1 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e5\'e9 f, \'f2\'ee \'e5\'f1\'f2\'fc \'e2 \'f1\'eb\'f3\'f7\'e0\'e5 \'ee\'ef\'e5\'f0\'e0\'ed\'e4\'e0 y \'ed\'e5 \'ed\'e0\'e4\'ee
 \'e1\'f0\'e0\'f2\'fc \'ef\'ee\'e4\'f7\'e8\'ed\'e5\'ed\'ed\'f3\'fe \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'fe \'f2\'ee\'e3\'ee \'e6\'e5 \'ef\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'e0 \'f3 \'f1\'ea\'ee\'e1\'ea\'e8, \'e0 \'e2 \'f1\'eb\'f3\'f7\'e0\'e5 \'ee\'ef\'e5\'f0\'e0
\'ed\'e4\'e0 x \endash  \'ed\'e0\'e4\'ee [6]. \'d2\'e0\'ea\'e8\'ec \'ee\'e1\'f0\'e0\'e7\'ee\'ec, \'e0\'f0\'e8\'f4\'ec\'e5\'f2\'e8\'f7\'e5\'f1\'ea\'e8\'e5 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e8 \'e8 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e8 \'ef\'e5\'f0\'e5\'f7\'ed\'ff 
\'ec\'ee\'e6\'ed\'ee \'ee\'ef\'e8\'f1\'fb\'e2\'e0\'f2\'fc \'e2 \'ef\'f0\'ee\'f6\'e5\'e4\'f3\'f0\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'e0\'f5 \'f1\'f2\'f0\'ee\'ea\'ee\'e9 "yfx". \'ce\'e4\'ed\'e0\'ea\'ee \'e2 \'e1\'ee\'eb\'fc\'f8\'e8\'ed\'f1\'f2\'e2\'e5 \'f1\'ee
\'e2\'f0\'e5\'ec\'e5\'ed\'ed\'fb\'f5 \'ea\'ee\'ec\'ef\'fc\'fe\'f2\'e5\'f0\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'ee\'e2, \'ef\'f0\'e5\'e6\'e4\'e5 \'e2\'f1\'e5\'e3\'ee, \'ff\'e7\'fb\'ea\'ee\'e2 \'e7\'e0\'ef\'f0\'ee\'f1\'ee\'e2 \'e8 \'ef\'f0\'ee\'f6\'e5\'e4\'f3\'f0
\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'ee\'e2 \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'f3\'fe\'f2 \'e1\'ee\'eb\'e5\'e5 \'f0\'e0\'e7\'ed\'ee\'ee\'e1\'f0\'e0\'e7\'ed\'fb\'e5 \'ee\'f2\'ed\'ee\'f8\'e5\'ed\'e8\'ff \'ec\'e5\'e6\'e4\'f3 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'ff\'ec\'e8 
\'e8 \'ee\'ef\'e5\'f0\'e0\'ed\'e4\'e0\'ec\'e8, \'e8\'e7-\'e7\'e0 \'f7\'e5\'e3\'ee \'ed\'e5\'ee\'e1\'f5\'ee\'e4\'e8\'ec\'ee \'f0\'e0\'f1\'f8\'e8\'f0\'e8\'f2\'fc \'ed\'e0\'e1\'ee\'f0 \'f8\'e0\'e1\'eb\'ee\'ed\'ee\'e2. \'c1\'ee\'eb\'e5\'e5 \'f2\'ee\'e3\'ee, 
\'e8\'e7-\'e7\'e0 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'ff \'e1\'f3\'ea\'e2\'fb f \'e2\'ee \'ec\'ed\'ee\'e3\'e8\'f5 \'ea\'eb\'fe\'f7\'e5\'e2\'fb\'f5 \'f1\'eb\'ee\'e2\'e0\'f5, \'e3\'e5\'ed\'e5\'f0\'e8\'f0\'f3\'e5\'ec\'fb\'f5 \'ef\'ee \'f8\'e0
\'e1\'eb\'ee\'ed\'e0\'ec \'e8 \'e6\'e5\'eb\'e0\'f2\'e5\'eb\'fc\'ed\'ee\'f1\'f2\'e8 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'ff \'f1\'e8\'ec\'e2\'ee\'eb\'e0 \'f2\'e0\'e1\'f3\'eb\'ff\'f6\'e8\'e8 \'e4\'eb\'ff \'f4\'ee\'f0\'ec\'e0\'f2\'e8\'f0\'ee\'e2
\'e0\'ed\'e8\'ff \'f2\'e5\'ea\'f1\'f2\'e0, \'eb\'f3\'f7\'f8\'e5 \'e7\'e0\'ec\'e5\'ed\'e8\'f2\'fc \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'e8\'ec\'fb\'e5 \'e1\'f3\'ea\'e2\'fb f, x \'e8 y \'ed\'e0\'f7\'e0\'eb\'fc\'ed\'fb\'ec\'e8 \'e1\'f3\'ea\'e2\'e0
\'ec\'e8 \'ea\'ee\'e4\'ee\'e2\'fb\'f5 \'f2\'e0\'e1\'eb\'e8\'f6 \'ea\'ee\'e4\'e0 ASCII \'e8\'eb\'e8 unicod.
\par 
\par As base variant of submission of the template reproduction we shall consider(count) man}{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
aging lines of kinds "xfx", "xfy" and "yfx" for infix operations, "fx" and "fy" for monadic \'ef\'f0\'e5\'f4\'e8\'ea\'f1\'ed\'fb\'f5 of operations, "xf" and "yf" for monadic \'ef\'ee\'f1\'f2\'f4\'e8\'ea\'f1\'ed\'fb\'f5
 of operations. This mechanism is used for map of expressions and operators in language Prolog, which}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
 has built-in means of reproduction of structures of internal submission of the texts on it the  language. In these entries y means automatically associative argument with operation with priority f, and x means unassociative argument with operation f, tha
t
 is in case of an operand y it is not necessary to take subordinate operation that of priority from a bracket, and in case of an operand x - it is necessary [6]. Thus, the arithmetical operations and operations of the list can be described in procedural l
a
nguages by a line "yfx". However in majority of modern computer languages, first of all, languages of the requests and procedural languages there are more diverse attitudes(relations) between operations and operands, because of what it is necessary to exp
a}{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 nd a gang of templates. Moreover, because of use of the letter f in many key words generated on templates and \'e6\'e5\'eb\'e0\'f2\'e5\'eb\'fc\'ed\'ee\'f1\'f2\'e8
 of use of a numeral of tabulation for text formatting, it is better to replace the reproduced letters f, x and y by the initial lett}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
ers of the code tables of a code ASCII or unicod.
\par 
\par \'cf\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'ed\'e0\'ff \'f0\'e5\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'ff \'ef\'f0\'ee\'e2\'e5\'f0\'ea\'e8 \'ef\'f0\'e0\'e2\'e8\'eb \'ec\'e8\'ed\'e8\'ec\'e0\'eb\'fc\'ed\'ee\'e3\'ee \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff 
\'f1\'ea\'ee\'e1\'ee\'ea \'e8 \'ef\'f3\'f1\'f2\'fb\'f5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2
\par 
\par Programm realization of check of the rules of minimum reproduction of brackets and empty operators
\par 
\par \'ce\'f1\'ed\'ee\'e2\'f3 \'f0\'e5\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'e8 \'ef\'f0\'e0\'e2\'e8\'eb \'f1\'ee\'f1\'f2\'e0\'e2\'eb\'ff\'fe\'f2 \'f8\'e0\'e1\'eb\'ee\'ed\'fb, \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'fe\'f9\'e8\'e5 \'ef\'ee\'f2\'f0\'e5\'e1\'ed\'ee\'f1\'f2\'fc
 \'e2 \'f1\'ea\'ee\'e1\'ea\'e0\'f5 \'e2 \'e7\'e0\'e2\'e8\'f1\'e8\'ec\'ee\'f1\'f2\'e8 \'ee\'f2 \'ef\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'ee\'e2 \'e8\'eb\'e8 \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e9 \'e8 \'ea
\'eb\'fe\'f7\'e5\'e2\'fb\'f5 \'f1\'eb\'ee\'e2 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2. \'cf\'f0\'ee\'e2\'e5\'f0\'ea\'e0 \'ef\'f0\'e0\'e2\'e8\'eb \'f4\'ee\'f0\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff \'f1\'ea\'ee\'e1\'ee\'ea \'e2\'fb\'ef\'ee\'eb\'ed\'ff\'e5
\'f2\'f1\'ff \'e2 \'ef\'f0\'ee\'f6\'e5\'e4\'f3\'f0\'e5 void prLxTxt (struct lxNode*rt) \'e8 \'e8\'ec\'e5\'e5\'f2 \'e2\'e8\'e4 \'ef\'f0\'ee\'e4\'f3\'ea\'f6\'e8\'ee\'ed\'ed\'fb\'f5 \'ef\'f0\'e0\'e2\'e8\'eb, \'e2\'f1\'f2\'f0\'ee\'e5\'ed\'ed\'fb\'f5 \'e2 \'ef
\'f0\'ee\'f6\'e5\'e4\'f3\'f0\'f3.
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 The basis of realization of the rules is made by(with) templates, defining need for brackets depending on priorities or \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee
\'e2\'e0\'ed\'e8\'e9 of operations and key words of operators. The check of the rules of shaping of brackets is executed in a procedure void prLxTxt (struct lxNode*rt) and has a kind \'ef\'f0\'ee\'e4\'f3\'ea\'f6\'e8\'ee\'ed\'ed\'fb\'f5
 of the rules, built-in in a procedure.
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'d2\'e8\'ef\'fb \'e4\'f3\'e6\'e5\'ea (\'ef\'ee\'f0\'ff\'e4\'ea\'e0 \'ee\'e1\'f0\'e0\'e1\'ee\'f2\'ea\'e8 \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e9, \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ed\'fb\'f5 \'f1\'ea\'ee\'e1\'ee\'ea \'e8 \'f1\'ea\'ee\'e1\'ee\'ea \'ee\'ef\'f0
\'e5\'e4\'e5\'eb\'e5\'ed\'e8\'ff \'f2\'e8\'ef\'ee\'e2 \'e8 \'e7\'ed\'e0\'f7\'e5\'ed\'e8\'e9 \'e4\'e0\'ed\'ed\'fb\'f5) \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'ff\'fe\'f2\'f1\'ff \'e4\'e8\'e0\'ef\'e0\'e7\'ee\'ed\'ee\'ec \'e7\'ed\'e0\'f7\'e5\'ed\'e8\'e9, \'e2 \'ea\'ee
\'f2\'ee\'f0\'ee\'ec \'ed\'e0\'f5\'ee\'e4\'ff\'f2\'f1\'ff \'ea\'ee\'e4\'fb \'eb\'e5\'ea\'f1\'e5\'ec. \'d2\'e0\'ea\'e8\'ec \'ee\'e1\'f0\'e0\'e7\'ee\'ec, \'f7\'f2\'ee\'e1\'fb \'f1\'ee\'ea\'f0\'e0\'f2\'e8\'f2\'fc \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'f3 \'f4\'ee
\'f0\'ec\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff \'f1\'ea\'ee\'e1\'ee\'ea \'e2\'e0\'e6\'ed\'ee \'f3\'ef\'ee\'f0\'ff\'e4\'ee\'f7\'e8\'f2\'fc \'e7\'ed\'e0\'f7\'e5\'ed\'e8\'ff \'f2\'e8\'ef\'e0 enum tokType \'e4\'eb\'ff \'f3\'ec\'e5\'ed\'fc\'f8\'e5\'ed\'e8\'ff \'ea
\'ee\'eb\'e8\'f7\'e5\'f1\'f2\'e2\'e0 \'e4\'e8\'e0\'ef\'e0\'e7\'ee\'ed\'ee\'e2, \'e0\'ed\'e0\'eb\'e8\'e7\'e8\'f0\'f3\'e5\'ec\'fb\'f5 \'ef\'f0\'e8 \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e8.
\par 
\par The types of 
small arcs (about processing expressions, statement brackets both brackets of type definition and significances of datas) are determined by a range of significances, in which there are codes of lexemas. So that to reduce the program of shaping of brackets
 it is important to order significances of a type enum tokType for a diminution of an amount of ranges analyzed for want of of reconstruction.
\par 
\par \'c4\'eb\'ff \'f2\'ee\'e3\'ee \'f7\'f2\'ee\'e1\'fb \'e2\'ee\'f1\'f1\'ee\'e7\'e4\'e0\'e2\'e0\'f2\'fc \'e1\'ee\'eb\'e5\'e5 \'f1\'eb\'ee\'e6\'ed\'fb\'e5 \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e8 \'f1 \'e4\'e2\'f3\'ec\'ff \'ef\'ee\'e4\'f7\'e8\'ed\'e5\'ed
\'ed\'fb\'ec\'e8 \'f3\'e7\'eb\'e0\'ec\'e8, \'ed\'e0\'e4\'ee \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e8\'f2\'fc \'f3\'ef\'f0\'e0\'e2\'eb\'ff\'fe\'f9\'e8\'e5 \'f1\'e8\'ec\'e2\'ee\'eb\'fb, \'ee\'f2\'ed\'e5\'f1\'ff \'ee\'f1\'f2\'e0\'f2\'ee\'ea \'f1\'e8\'ec\'e2\'ee\'eb
\'ee\'e2 \'ea \'f1\'e8\'ec\'e2\'ee\'eb\'e0\'ec \'e7\'e0\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'ff \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e9 \'f1\'f2\'f0\'ee\'ea\'e8. \'d3\'ef\'f0\'e0\'e2\'eb\'ff\'fe\'f9\'e8\'e5 \'f1\'e8\'ec\'e2\'ee
\'eb\'fb \'e4\'ee\'eb\'e6\'ed\'fb \'f0\'e0\'e7\'f0\'e5\'f8\'e0\'f2\'fc \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'e5 \'eb\'fe\'e1\'fb\'f5 \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e9 \'eb\'fe\'e1\'ee\'e3\'ee \'ea\'ee\'ec\'ef\'fc\'fe\'f2\'e5
\'f0\'ed\'ee\'e3\'ee \'ff\'e7\'fb\'ea\'e0, \'e0 \'f2\'e0\'ea\'e6\'e5 \'f3\'ef\'f0\'ee\'f9\'e0\'f2\'fc \'fd\'ea\'e2\'e8\'e2\'e0\'eb\'e5\'ed\'f2\'ed\'fb\'e5 \'ef\'f0\'e5\'ee\'e1\'f0\'e0\'e7\'ee\'e2\'e0\'ed\'e8\'ff \'f1\'f3\'f9\'e5\'f1\'f2\'e2\'e5\'ed\'ed
\'fb\'ec \'ee\'e1\'f0\'e0\'e7\'ee\'ec \'f0\'e0\'e7\'ed\'ee\'e3\'ee \'f1\'e8\'ed\'f2\'e0\'ea\'f1\'e8\'f1\'e0 \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'e8 \'fd\'ea\'e2\'e8\'e2\'e0\'eb\'e5\'ed\'f2\'ed\'fb\'f5 \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e9 
\'e4\'eb\'ff \'eb\'fe\'e1\'ee\'e9 \'ef\'e0\'f0\'fb \'ea\'ee\'ec\'ef\'fc\'fe\'f2\'e5\'f0\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'ee\'e2. \'c4\'eb\'ff \'f0\'e5\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'e8 \'fd\'f2\'ee\'e3\'ee \'ed\'f3\'e6\'ed\'fb, \'ef\'ee \'ea\'f0\'e0\'e9\'ed
\'e5\'e9 \'ec\'e5\'f0\'e5, \'f1\'e8\'ec\'e2\'ee\'eb\'fb \'f3\'ef\'f0\'e0\'e2\'eb\'e5\'ed\'e8\'ff \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e9 \'ef\'ee\'e2\'f2\'ee\'f0\'e5\'ed\'e8\'ff\'ec\'e8 \'f1\'e8\'ed\'f2\'e0\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'e8\'f5 \'fd
\'eb\'e5\'ec\'e5\'ed\'f2\'ee\'e2 \'e8 \'f1\'e8\'ec\'e2\'ee\'eb\'fb \'f3\'ef\'f0\'e0\'e2\'eb\'e5\'ed\'e8\'ff \'f3\'f1\'eb\'ee\'e2\'ed\'ee \'fd\'ea\'e2\'e8\'e2\'e0\'eb\'e5\'ed\'f2\'ed\'fb\'ec\'e8 \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'ff\'ec\'e8 \'f0\'e0
\'e7\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'ee\'e2:
\par 
\par To reconstruct more complicated constructions with two daughter nodes, it is necessary to define(determine) command characters, by refering residual of numerals to numerals of filling of a renovated line. The command characters should allow}{\fcs1 
\af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995  reproduction of any constructions of any computer language, and also to simplify equivalent transformations by an essential image of different syntax \'f1\'e5\'ec\'e0\'ed
\'f2\'e8\'f7\'e5\'f1\'ea\'e8 of equivalent constructions for any pair of computer languages. For realization it are neces}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
sary, at least, numerals of management of constructions by recurrings of syntactical elements and numerals of management is conditional by equivalent constructions of different languages:
\par 
\par \\1 \endash  \'e4\'eb\'ff \'f1\'ee\'e7\'e4\'e0\'ed\'e8\'ff \'ed\'e5\'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'e8\'ec\'ee\'e3\'ee \'fd\'ea\'e2\'e8\'e2\'e0\'eb\'e5\'ed\'f2\'e0 \'e1\'f3\'ea\'e2\'fb f,
\par 
\par \\1 - For creation of a non-reproducible equivalent of the letter f,
\par 
\par \\2(377) \endash  \'e4\'eb\'ff \'f3\'f1\'f2\'e0\'ed\'ee\'e2\'eb\'e5\'ed\'e8\'ff \'f4\'eb\'e0\'e6\'ea\'e0 \'e8\'eb\'e8 \'f1\'f7\'e5\'f2\'f7\'e8\'ea\'e0, 
\par 
\par \\2 (377) - for installation of check box or counter, 
\par 
\par \\3(376) \endash  \'e4\'eb\'ff \'f3\'ed\'e8\'f7\'f2\'ee\'e6\'e5\'ed\'e8\'ff \'f4\'eb\'e0\'e6\'ea\'e0 \'e8\'eb\'e8 \'f1\'f7\'e5\'f2\'f7\'e8\'ea\'e0,
\par 
\par \\3 (376) - for an erasure of check box or counter,
\par 
\par \\4 \endash  \'e4\'eb\'ff \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'e0 \'e1\'e5\'e7 \'e4\'f3\'e6\'e5\'ea,
\par 
\par \\4 - For reproduction of argument without small arcs,
\par 
\par \\5 \endash  \'e4\'eb\'ff \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'e0 \'f1 \'e4\'f3\'e6\'ea\'e0\'ec\'e8,
\par 
\par \\5 - For reproduction of argument with small arcs,
\par 
\par \\6 \endash  \'e4\'eb\'ff \'e2\'ee\'e7\'e2\'f0\'e0\'f9\'e5\'ed\'e8\'ff \'ea \'ed\'ee\'ec\'e5\'f0\'f3 \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'f3\'fe\'f9\'e5\'e3\'ee \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'e0, \'ed\'e0\'ef\'f0\'e8\'ec\'e5\'f0, \'ef\'f0\'e8 \'e2\'ee
\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'e8 \'ed\'e0\'ea\'e0\'ef\'eb\'e8\'e2\'e0\'fe\'f9\'e8\'f5 \'ef\'f0\'e8\'f1\'e2\'e0\'e8\'e2\'e0\'ed\'e8\'e9 \'e8 \'e4\'e5\'ea\'eb\'e0\'f0\'e0\'f6\'e8\'e9 \'ff\'e7\'fb\'ea\'e0 \'d1 \'e2 \'ff\'e7\'fb\'ea\'f3
 Pascal),
\par 
\par \\6 - For returning to number of preceding argument, for example, for want of reproduction of accumulating assignments and declarations of the language C in language Pascal),
\par 
\par \\7 \endash  \'e4\'eb\'ff \'f1\'ee\'e7\'e4\'e0\'ed\'e8\'ff \'ed\'f3\'eb\'e5\'e2\'ee\'e3\'ee \'f4\'eb\'e0\'e6\'ea\'e0 \'ef\'f0\'e8 \'ef\'e5\'f0\'e2\'ee\'ec \'e2\'f5\'ee\'e4\'e5,
\par 
\par \\7 - For creation of zero check box for want of first input(entrance),
\par 
\par \\11=\\t \endash  \'e4\'eb\'ff \'f3\'ef\'f0\'e0\'e2\'eb\'ff\'e5\'ec\'ee\'e9 \'f2\'e0\'e1\'f3\'eb\'ff\'f6\'e8\'e8,
\par 
\par \\11 = \\t - for controlled tabulation,
\par 
\par z \endash  \'ef\'f0\'e8\'e7\'ed\'e0\'ea \'ef\'f0\'ee\'ef\'f3\'f1\'ea\'e0 \'ef\'e5\'f0\'e2\'ee\'e3\'ee \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'e0. 
\par 
\par z - Indication of the miss(passing) of the first argument. 
\par 
\par \'c4\'eb\'ff \'e4\'f0\'f3\'e3\'e8\'f5 \'e2\'e0\'f0\'e8\'e0\'ed\'f2\'ee\'e2 \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'f1\'f2\'f0\'ee\'e8\'f2\'f1\'ff \'ec\'e0\'f1\'f1\'e8\'e2 \'f1\'f2\'f0\'ee\'ea cpr[], \'e2 \'ea\'ee\'f2\'ee\'f0\'ee\'ec
 \'f0\'e0\'e7\'ec\'e5\'f9\'e0\'fe\'f2\'f1\'ff \'f8\'e0\'e1\'eb\'ee\'ed\'fb \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e8 \'f1 \'e1\'f3\'ea\'e2\'e0\'ec\'e8 \'f3\'ef\'f0\'e0\'e2\'eb\'e5\'ed\'e8\'ff \'e8 \'e4\'f0\'f3\'e3\'e8\'ec\'e8 \'e1\'f3\'ea\'e2
\'e0\'ec\'e8, \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'e8\'ec\'fb\'ec\'e8 \'ef\'f0\'e8 \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e8 \'e1\'e5\'e7 \'ef\'e5\'f0\'e5\'ec\'e5\'ed. \'c4\'eb\'ff \'ff\'e7\'fb\'ea\'e0 \'d1 \'f2\'e0\'ea\'ee\'e9 \'ec
\'e0\'f1\'f1\'e8\'e2 \'e8\'ec\'e5\'e5\'f2 \'e2\'e8\'e4.
\par 
\par For other variants of reproduction the array of lines cpr [] is created, in which the templates of reconstruction with the letters of management and other letters reproduced for want of of reconstructio
n without changes are placed. For the language C such array has a kind.
\par 
\par char *cprC[]="", "", "", "", "\\1\\5y", "", "", "", 
\par 
\par Char *cprC [] = " ", """ "" "," \\1\\5y "" "" "," ", 
\par 
\par  "\\7switch\\5\\n\\1y\\377z\\1 y", "", "", "\\4;\\n\\376",
\par 
\par  " \\7switch\\5\\n \\1y\\377z\\1 y "" "" "," \\4; \\n\\376 ",
\par 
\par  "","\\1x","\\1\\5y","x\\1\\5","","\\1x","x\\1(!\\5)","\\1\\4", 
\par 
\par  """, \\1x", \\1\\5y", x\\1\\5 "" "," \\1x", x\\1 (! \\5) ", "\\1\\4", 
\par 
\par  "\\1\\5y", "", "", "", "\\1(!\\4)y", "", "", "",\tab 
\par 
\par  "\\1\\5y", """ "" "," \\1 (! \\4) y ", """ "," ", \tab 
\par 
\par  "", "", "", "",\tab "\\1\\4\\4", "", "", "",... 
\par 
\par  """ "" "," ", \tab  " \\1\\4\\4 "" "" "," "... 
\par 
\par  "\\4\\1y","\\4\\1y","\\4\\1y","\\4\\1y","\\4\\1y","\\4\\1y",
\par 
\par  "\\4\\1y", "\\4\\1y", "\\4\\1y", "\\4\\1y", "\\4\\1y", "\\4\\1y",
\par 
\par  "\\4\\1y","\\4\\1y",\tab "\\4\\1y","\\4\\1y","\\4\\1y", 
\par 
\par  "\\4\\1y", "\\4\\1y", \tab  "\\4\\1y", "\\4\\1y", "\\4\\1y", 
\par 
\par  "", "", "", "", "", "", "", "", "", "", "",... 
\par 
\par  """ "" "" "" "" "" "" "" "" "," "... 
\par 
\par ;
\par 
\par ;
\par 
\par \'c4\'eb\'ff \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'e1\'e0\'e7\'ee\'e2\'fb\'f5 \'f4\'f3\'ed\'ea\'f6\'e8\'e9 \'f3\'e7\'eb\'e0 \'f1\'f2\'f0\'ee\'e8\'f2\'f1\'ff \'ec\'e0\'f1\'f1\'e8\'e2 \'f1\'f2\'f0\'ee\'ea \'e4\'eb\'ff \'e7\'e0\'ec
\'e5\'ed\'fb \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e8 f, \'ea\'ee\'f2\'ee\'f0\'fb\'e9 \'e4\'eb\'ff \'ff\'e7\'fb\'ea\'e0 \'d1 \'e8\'ec\'e5\'e5\'f2 \'e2\'e8\'e4
\par 
\par For reproduction of base functions of a knot the array of lines for a replacement of operation f is created which for the language C has a kind
\par 
\par char *oprtrC[]="", "", "", "", 
\par 
\par Char *oprtrC [] = " ", """ "," ", 
\par 
\par "if", "then", "else", "elseif",
\par 
\par "If", "then", "else", "elseif",
\par 
\par "case", "switch", "defualt", ""/*endcase*/, 
\par 
\par "Case", "switch", "defualt", " " /*endcase* /, 
\par 
\par "break", "return", "while", "while", "continue", 
\par 
\par "Break", "return", "while", "while", "continue", 
\par 
\par "do", "while", "do", "for", ";", ";", ";", 
\par 
\par "Do", "while", "do", "for", ";", ";", ";", 
\par 
\par "while", "do", "with", "endif", 
\par 
\par "While", "do", "with", "endif", 
\par 
\par "goto","extern","var","const",
\par 
\par "Goto", "extern", "var", "const",
\par 
\par "enum","struct","union","register",//
\par 
\par "Enum", "struct", "union", "register", //
\par 
\par "unsigned","signed","char","short",
\par 
\par "Unsigned", "signed", "char", "short",
\par 
\par "int","long","int64","int64",//
\par 
\par "Int", "long", "int64", "int64", //
\par 
\par "float","double","void","auto",
\par 
\par "Float", "double", "void", "auto",
\par 
\par "static","volatile","typedef","sizeof",//
\par 
\par "Static", "volatile", "typedef", "sizeof", //
\par 
\par "real","array","set","file",
\par 
\par "Real", "array", "set", "file",
\par 
\par "object","string","label",
\par 
\par "Object", "string", "label",
\par 
\par "int main()","function","procedure",
\par 
\par " Int main () ", "function", "procedure",
\par 
\par "","","","","","","","",\tab \tab \tab //V+8
\par 
\par """ "" "" "" "" "" "," ", \tab \tab \tab  // V + 8
\par 
\par "","","","","","","","","","","",\tab //V+19
\par 
\par """ "" "" "" "" "" "" "" "" "," ", \tab  // V + 19
\par 
\par "","","","","",\tab \tab \tab \tab //V+24
\par 
\par """ "" "" "," ", \tab \tab \tab \tab  // V + 24
\par 
\par "var","","","","","","",\tab \tab \tab //V+31
\par 
\par "Var", """ "" "" "" "," ", \tab \tab \tab  // V + 31
\par 
\par "","","","","","","","","",\tab \tab //V+40
\par 
\par """ "" "" "" "" "" "" "," ", \tab \tab  // V + 40
\par 
\par "","","","","","",\tab \tab \tab \tab //V+46
\par 
\par """ "" "" "" "," ", \tab \tab \tab \tab  // V + 46
\par 
\par "inline","forward","interrupt","export",
\par 
\par "Inline", "forward", "interrupt", "export",
\par 
\par "extern","_asm",
\par 
\par "Extern", " _ asm ",
\par 
\par "","","",  //Verilog|SQL+3
\par 
\par """ "," ", // Verilog | SQL + 3
\par 
\par "object","constructor","desctructor",
\par 
\par "Object", "constructor", "desctructor",
\par 
\par "property","resP","abstract",\tab \tab //P+9
\par 
\par "Property", "resP", "abstract", \tab \tab  // P + 9
\par 
\par "class","public","private","protected",
\par 
\par "Class", "public", "private", "protected",
\par 
\par "virtual","friend",\tab \tab \tab \tab //C++15
\par 
\par "Virtual", "friend", \tab \tab \tab \tab  // C ++ 15
\par 
\par "new","delete","try","catch","throw",//C++20
\par 
\par "New", "delete", "try", "catch", "throw", // C ++ 20
\par 
\par "","","","","","","","","","","","",//V+32
\par 
\par """ "" "" "" "" "" "" "" "" "" "," ", // V + 32
\par 
\par "","","","","","","","","","","","",//V+44
\par 
\par """ "" "" "" "" "" "" "" "" "" "," ", // V + 44
\par 
\par "","","","","","","","","","","","","","",
\par 
\par """ "" "" "" "" "" "" "" "" "" "" "" "," ",
\par 
\par \tab \tab \tab \tab \tab \tab \tab //V+58
\par 
\par \tab \tab \tab \tab \tab \tab \tab  // V + 58
\par 
\par "","","","","","","","","","","","",//V+70
\par 
\par """ "" "" "" "" "" "" "" "" "" "," ", // V + 70
\par 
\par "","","","","","",  \tab \tab \tab //V+76 
\par 
\par """ "" "" "" "," ", \tab \tab \tab  // V + 76 
\par 
\par "\\nfork", "join", \tab 
\par 
\par "\\nfork", "join", \tab 
\par 
\par "\\n", "", "", "", "[", "]", "(", ")", \tab 
\par 
\par " \\n ", "", "", "", "[", "]", "(", ")", \tab 
\par 
\par ",;\\n",".;\\n",";\\n", ",", ":", "?", 
\par 
\par ",; \\n ", ".; \\n ", "; \\n " "", ":", "?", 
\par 
\par "|=", "&=", "^=", "+=", "-=", "*=", "/=", "%=",
\par 
\par " | = ", " and = ", " ^ = ", " + = ", " - = ", " * = ", " / = ", " of % = ",
\par 
\par "<<=", ">>=", "=", "--", "++",  
\par 
\par " << = ", " >> = ", "=", "-", "++",  
\par 
\par "<", "<=", "==", "!=", ">=", ">",
\par 
\par "<", " < = ", "==", "! = ", " > = ", ">",
\par 
\par "+", "-", "*", "/", 
\par 
\par "+", "-", "*", "/", 
\par 
\par ".", "->", "**", "<<<", ">>>", "===", "!==",
\par 
\par ".", " - > ", "**", "<<<", ">>>", "===", "! == ",
\par 
\par "+", "-", "*", "&", "~|", "~&", "~^", "^~", "&", 
\par 
\par "+", "-", "*", "and", " ~ | ", "~ and", " ~ ^ ", " ^ ~ ", "and", 
\par 
\par "%", "|", "&", "^", "<<", ">>", "||", "&&", 
\par 
\par "%, "|", "and", "^", "<<", ">>", "||", " . .", 
\par 
\par "!","~","/";
\par 
\par "!", "~", "/";
\par 
\par \'ca\'f0\'ee\'ec\'e5 \'f2\'ee\'e3\'ee, \'ef\'f0\'e5\'e4\'ef\'ee\'eb\'e0\'e3\'e0\'e5\'f2\'f1\'ff \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5 \'f0\'e0\'e7\'ed\'fb\'f5 \'e2\'e0\'f0\'e8\'e0\'ed\'f2\'ee\'e2 \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6
\'e8\'e8 \'ef\'f0\'e8 \'f1\'eb\'e5\'e4\'f3\'fe\'f9\'e8\'f5 \'ef\'ee\'e2\'f2\'ee\'f0\'e5\'ed\'e8\'ff\'f5 \'e2\'eb\'ee\'e6\'e5\'ed\'ed\'fb\'f5 \'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6\'e8\'e9 \'f1 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee\'e2\'e0\'ed\'e8\'e5\'ec \'f3
\'ef\'f0\'e0\'e2\'eb\'ff\'fe\'f9\'e8\'f5 \'ea\'ee\'e4\'ee\'e2 \'f1\'ef\'e5\'f6\'e8\'e0\'eb\'fc\'ed\'fb\'f5 \'f1\'e8\'ec\'e2\'ee\'eb\'ee\'e2. \'d2\'e0\'ea \'ef\'f0\'e8 \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e5\'ed\'e8\'e8 \'ef\'ee\'e2\'f2\'ee\'f0\'e5\'ed\'e8\'e9 
\'f4\'f0\'e0\'e7 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2 \'ff\'e7\'fb\'ea\'e0, \'ed\'e0 \'ef\'f0\'e8\'ec\'e5\'f0\'e5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'e0 switch \'d1/C++ \'ef\'f0\'e8 \'ef\'e5\'f0\'e2\'ee\'e9 \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6
\'e8\'e8 \'e2\'ed\'f3\'f2\'f0\'e5\'ed\'ed\'e8\'e9 \'ea\'ee\'e4 _case \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'ee\'e4\'e8\'f2\'f1\'ff \'ea\'e0\'ea switch + case, \'e0 \'ef\'f0\'e8 \'ef\'ee\'f1\'eb\'e5\'e4\'f3\'fe\'f9\'e8\'f5 \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0
\'f3\'ea\'f6\'e8\'ff\'f5 \'ef\'f0\'ee\'f1\'f2\'ee \'ea\'e0\'ea _case. 
\par 
\par Besides the use of different variants of reconstruction for want of following recurrings of the enclosed constructions with use of the escape codes of special numerals is suppos}{\fcs1 \af106\afs24 \fcs0 
\f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 ed. So for want of definition(determination) of recurrings of phrases of operators of language, on an example of an operator switch \'d1
/C ++ for want of of first reconstruction the internal code _ case is reproduced as switch + case, and for want of conseque}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 nt reconstruction it is simple as _ case. 

\par 
\par \'c4\'eb\'ff \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e5\'ed\'e8\'ff \'ec\'e8\'ed\'e8\'ec\'e0\'eb\'fc\'ed\'ee\'e9 \'f0\'e0\'f1\'f1\'f2\'e0\'ed\'ee\'e2\'ea\'e8 \'f1\'ea\'ee\'e1\'ee\'ea, \'e0 \'f2\'e0\'ea\'e6\'e5 \'e4\'eb\'ff \'e0\'ed\'e0\'eb\'e8\'e7\'e0 \'ef\'f0\'e5
\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9 \'ef\'f0\'e8 \'f1\'e8\'ed\'f2\'e0\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'ee\'ec \'e0\'ed\'e0\'eb\'e8\'e7\'e5 \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'fe\'f2\'f1\'ff \'e5\'f9\'e5 \'e4\'e2\'e0 \'ec\'e0\'f1\'f1\'e8\'e2\'e0 
\'f4\'f3\'ed\'ea\'f6\'e8\'e9 \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9 fpr[] \'e8 gpr[], \'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'ef\'ee \'ef\'ee\'e7\'e8\'f6\'e8\'ff\'ec (\'ed\'ee\'ec\'e5\'f0\'e0\'ec \'fd\'eb\'e5\'ec\'e5\'ed\'f2\'ee\'e2) \'f1\'ee
\'ee\'f2\'e2\'e5\'f2\'f1\'f2\'e2\'f3\'fe\'f2 \'ec\'e0\'f1\'f1\'e8\'e2\'e0\'ec oprtr[] \'e8 cpr[], \'e0 \'ef\'ee \'f7\'e8\'f1\'eb\'ee\'e2\'fb\'ec \'ef\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'e0\'ec \endash  \'e7\'ed\'e0\'f7\'e5\'ed\'e8\'e5\'ec \'e8\'e7 \'f2\'e0
\'e1\'eb. 3.1. \'c8\'e7 \'f1\'ee\'ee\'e1\'f0\'e0\'e6\'e5\'ed\'e8\'e9 \'e8\'e4\'e5\'ed\'f2\'e8\'f7\'ed\'ee\'f1\'f2\'e8 \'ee\'f2\'ed\'ee\'f1\'e8\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'ef\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'ee\'e2 \'ee\'e4\'e8\'ed\'e0\'ea\'ee\'e2\'fb
\'f5 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e9 \'e2 \'f0\'e0\'e7\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'e0\'f5 \'fd\'f2\'e8 \'f2\'e0\'e1\'eb\'e8\'f6\'fb \'ec\'ee\'e3\'f3\'f2 \'e1\'fb\'f2\'fc \'e5\'e4\'e8\'ed\'fb\'ec\'e8 \'e4\'eb\'ff \'e2\'f1\'e5\'f5 \'ff\'e7\'fb\'ea\'ee
\'e2, \'ed\'ee, \'ea \'f1\'ee\'e6\'e0\'eb\'e5\'ed\'e8\'fe, \'fd\'f2\'e8\'f5 \'f1\'ee\'ee\'e1\'f0\'e0\'e6\'e5\'ed\'e8\'e9 \'ef\'f0\'e8\'e4\'e5\'f0\'e6\'e8\'e2\'e0\'fe\'f2\'f1\'ff \'ed\'e5 \'e2\'f1\'e5 \'f1\'ee\'e7\'e4\'e0\'f2\'e5\'eb\'e8 \'ff\'e7\'fb\'ea
\'ee\'e2 \'e8 \'f2\'f0\'e0\'ed\'f1\'eb\'e8\'f0\'f3\'fe\'f9\'e8\'f5 \'f1\'e8\'f1\'f2\'e5\'ec.
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 For definition(determination) of minimum arrangement of brackets, and also for the analysis \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9
 for want of parse two arrays of functions \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9 fpr [] and }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
gpr [] are used which on items (numbers of elements) correspond(meet) to arrays oprtr [] and cpr [], and on numerical priorities - significance from tab. 3.1. From reasons of identity of relative priorities of identical operations in different languages t
hese tables can be uniform for all languages, but, infortunately, these reasons all founders of languages and compiling systems adhere.
\par 
\par \'ca\'ee\'e4\'fb \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9 \'ef\'f0\'e8\'ee\'e1\'f0\'e5\'f2\'e0\'fe\'f2 \'ee\'ea\'ee\'ed\'f7\'e0\'f2\'e5\'eb\'fc\'ed\'fb\'f5 \'e7\'ed\'e0\'f7\'e5\'ed\'e8\'e9 \'ef\'f0\'e8 \'ef\'f0\'ee\'e5\'ea\'f2\'e8\'f0
\'ee\'e2\'e0\'ed\'e8\'e8 \'e2\'ee\'f1\'f5\'ee\'e4\'ff\'f9\'e5\'e3\'ee \'f1\'e8\'ed\'f2\'e0\'ea\'f1\'e8\'f7\'e5\'f1\'ea\'ee\'e3\'ee \'e0\'ed\'e0\'eb\'e8\'e7\'e0\'f2\'ee\'f0\'e0 \'e2 \'f1\'eb\'e5\'e4\'f3\'fe\'f9\'e8\'f5 \'eb\'e0\'e1\'ee\'f0\'e0\'f2\'ee\'f0
\'ed\'fb\'f5 \'f0\'ee\'e1\'ee\'f2\'e0\'f5. \'c2 \'e1\'e0\'e7\'ee\'e2\'ee\'e9 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e5 \'e2\'ec\'e5\'f1\'f2\'ee \'ea\'ee\'e4\'ee\'e2 \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9, \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'ee
\'e2\'e0\'ed\'fb \'f7\'e8\'f1\'eb\'e0 \'ef\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'ee\'e2, \'e8\'e7\'ec\'e5\'ed\'ff\'e5\'ec\'fb\'e5 \'e2 \'ee\'e1\'f0\'e0\'f2\'ed\'ee\'ec \'ef\'ee\'f0\'ff\'e4\'ea\'e5 \'ee\'f2\'ed\'ee\'f1\'e8\'f2\'e5\'eb\'fc\'ed\'ee \'ea\'ee\'e4
\'ee\'e2 \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9, \'f3\'f7\'e8\'f2\'fb\'e2\'e0\'ff \'f2\'ee, \'f7\'f2\'ee \'e1\'ee\'eb\'e5\'e5 \'ef\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'ed\'fb\'e5 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e8 \'ef\'f0\'e5\'e4\'f8\'e5
\'f1\'f2\'e2\'f3\'fe\'f2 \'e8 \'e8\'ec\'e5\'fe\'f2 \'ec\'e5\'ed\'f8\'e8\'e9 \'ef\'ee\'f0\'ff\'e4\'ea\'ee\'e2\'e8\'e9 \'ed\'ee\'ec\'e5\'f0 \'ef\'f0\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'ff, \'f2\'ee \'e5\'f1\'f2\'fc \'e2\'fb\'ef\'ee\'eb\'ed\'ff\'fe\'f2
\'f1\'ff \'f0\'e0\'ed\'fc\'f8\'e5, \'f7\'e5\'ec \'ed\'e8\'e7\'fc\'ea\'ee\'ef\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'ed\'fb\'e5 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e8. \'c1\'ee\'eb\'e5\'e5 \'f2\'ee\'e3\'ee, \'e4\'eb\'ff \'e1\'ee\'eb\'e5\'e5 \'ee\'e1\'f9\'e5\'e9 \'ee
\'e1\'f0\'e0\'e1\'ee\'f2\'ea\'e8 \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e9 \'ef\'ee \'f2\'e0\'ea\'ee\'ec\'f3 \'ef\'f0\'e5\'e4\'f1\'f2\'e0\'e2\'eb\'e5\'ed\'e8\'fe \'e8\'f1\'ef\'ee\'eb\'fc\'e7\'f3\'fe\'f2\'f1\'ff \'e4\'e2\'e5 \'f4\'f3\'ed\'ea\'f6\'e8\'e8 \'ef
\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'ee\'e2 fpr \'e8 gpr. 
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 The codes \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9 acquire of final sign
ificances for want of designing of the ascending parser in the following laboratory robots. In the base program instead of codes \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9
, the numbers of priorities changed in the return order concerning codes \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9 are used, taking into account that the more priority operations will procede and have \'ec\'e5\'ed\'f8\'e8\'e9 \'ef\'ee
\'f0\'ff\'e4\'ea\'ee\'e2\'e8\'e9 number \'ef\'f0\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'ff, that is are executed earlier, than \'ed\'e8\'e7\'fc\'ea\'ee\'ef\'f0\'e8\'ee\'f0\'e8\'f2\'e5\'f2\'ed\'fb\'e5
 of operation. Moreover, for more general(common) processing of expressions on such submission two f}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 unctions of priorities fpr and gpr are used. 
\par 
\par char fpr[]= 
\par 
\par Char fpr [] = 
\par 
\par 0,0x4f,0x4f,0x4f,0x46,0x11,6,0x12,
\par 
\par  0,0x4f, 0x4f, 0x4f, 0x46,0x11,6,0x12,
\par 
\par  0x13,0x4e,0x12,0x1, 0x4e,0x4e,0x4e,0x4e,
\par 
\par  0x13,0x4e, 0x12,0x1, 0x4e, 0x4e, 0x4e, 0x4e,
\par 
\par  0x4e,0x4e,0x13,0x4e, 0x4e, 0x9, 0x9, 0x9, 
\par 
\par  0x4e, 0x4e, 0x13,0x4e, 0x4e, 0x9, 0x9, 0x9, 
\par 
\par  0x4e,0x4e,0x4e,0x4e, 0x4e,0x4e,0x4e,0x4e,
\par 
\par  0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e,
\par 
\par  0x4e,0x4e,0x4e,0x4e, 0x4e,0x4e,0x4e,0x4e, 
\par 
\par  0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 
\par 
\par  0x4e,0x4e,0x4e,0x4e, 0x4e,0x4e,0x4e,0x4e,
\par 
\par  0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e,
\par 
\par  0x4e,0x4e,0x4e,0x4e, 0x4e,0x4e,0x4e,0x4e, 
\par 
\par  0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 
\par 
\par  0x4e,0x4e,0x4e,0x4e, 0x4e,0x4e,0x4e,0x4e,
\par 
\par  0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e, 0x4e,
\par 
\par  0x4e,0x4e,0x4e,0x4e, 0x42, 0x2,  
\par 
\par  0x4e, 0x4e, 0x4e, 0x4e, 0x42, 0x2,  
\par 
\par  0x42,2,0x43,3, 0x44,4,0x45,5,  
\par 
\par  0x42,2,0x43,3, 0x44,4,0x45,5,  
\par 
\par  0x1, 0x1, 0x1, 0x2, 0x2, 0x43, 
\par 
\par  0x1, 0x1, 0x1, 0x2, 0x2, 0x43, 
\par 
\par  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 
\par 
\par  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 
\par 
\par  0x10, 0x10, 0x10, 0x3C,0x3C,
\par 
\par  0x10, 0x10, 0x10, 0x3C, 0x3C,
\par 
\par  0x1A, 0x1A, 0x1C, 0x1C, 0x1A, 0x1A, 
\par 
\par  0x1A, 0x1A, 0x1C, 0x1C, 0x1A, 0x1A, 
\par 
\par  0x20, 0x20, 0x30, 0x30,\tab 
\par 
\par  0x20, 0x20, 0x30, 0x30, \tab 
\par 
\par  0x3E,0x3E, 0x34,0x1E,0x1E,0x1C, 0x1C, 
\par 
\par  0x3E, 0x3E, 0x34,0x1E, 0x1E, 0x1C, 0x1C, 
\par 
\par  0x3C,0x3C,0x3C,0x3C, 0x16,0x18,0x17,0x17, 0x4e, 
\par 
\par  0x3C, 0x3C, 0x3C, 0x3C, 0x16,0x18,0x17,0x17, 0x4e, 
\par 
\par  0x30,0x16,0x18, 0x17, 0x1E, 0x1E, 0x13, 0x15, 
\par 
\par  0x30,0x16,0x18, 0x17, 0x1E, 0x1E, 0x13, 0x15, 
\par 
\par  0x4e,0x4e,0x30,
\par 
\par  0x4e, 0x4e, 0x30,
\par 
\par gpr[]= 
\par 
\par Gpr [] = 
\par 
\par 0, 0x4f, 0x4f, 0x4f, 6,0x12,6,0x12,
\par 
\par  0, 0x4f, 0x4f, 0x4f, 6,0x12,6,0x12,
\par 
\par  0x13,0x4e,0x12,0x1, 0x12,0x1,0x4e,0x4e, 
\par 
\par  0x13,0x4e, 0x12,0x1, 0x12,0x1,0x4e, 0x4e, 
\par 
\par  0x11,0x1,0x1,0x11, 0x11, 0x9, 0x9, 0x9, 
\par 
\par  0x11,0x1,0x1,0x11, 0x11, 0x9, 0x9, 0x9, 
\par 
\par  0x11,0x1,0x1,0x11, 0x01,0x01,0x01,0x01, 
\par 
\par  0x11,0x1,0x1,0x11, 0x01,0x01,0x01,0x01, 
\par 
\par  0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
\par 
\par  0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
\par 
\par  0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
\par 
\par  0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
\par 
\par  0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
\par 
\par  0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
\par 
\par  0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
\par 
\par  0x01,0x01,0x01,0x01, 0x01,0x01,0x01,0x01,
\par 
\par  0x01,0x01,0x01,0x01, 0x2, 0x2,  
\par 
\par  0x01,0x01,0x01,0x01, 0x2, 0x2,  
\par 
\par  2,2,0x3,3, 0x4,4,0x5,5, 
\par 
\par  2,2,0x3,3, 0x4,4,0x5,5, 
\par 
\par  0x1, 0x1, 0x1, 0x2, 0x2, 0x43, 
\par 
\par  0x1, 0x1, 0x1, 0x2, 0x2, 0x43, 
\par 
\par  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 
\par 
\par  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 
\par 
\par  0x10, 0x10, 0x10, 0x3C,0x3C, 
\par 
\par  0x10, 0x10, 0x10, 0x3C, 0x3C, 
\par 
\par  0x1A, 0x1A, 0x1C, 0x1C, 0x1A, 0x1A, 
\par 
\par  0x1A, 0x1A, 0x1C, 0x1C, 0x1A, 0x1A, 
\par 
\par  0x20, 0x20, 0x30, 0x30,
\par 
\par  0x20, 0x20, 0x30, 0x30,
\par 
\par  0x3E,0x3E, 0x34,0x1E,0x1E,0x1C, 0x1C, 
\par 
\par  0x3E, 0x3E, 0x34,0x1E, 0x1E, 0x1C, 0x1C, 
\par 
\par  0x3C,0x3C,0x3C,0x3C, 0x16,0x18,0x17,0x17, 0x4e, 
\par 
\par  0x3C, 0x3C, 0x3C, 0x3C, 0x16,0x18,0x17,0x17, 0x4e, 
\par 
\par  0x30,0x16,0x18,0x17, 0x1E, 0x1E, 0x13, 0x15, 
\par 
\par  0x30,0x16,0x18,0x17, 0x1E, 0x1E, 0x13, 0x15, 
\par 
\par  0x4e, 0x4e, 0x30;
\par 
\par  0x4e, 0x4e, 0x30;
\par 
\par  \'d2\'e0\'e1\'eb\'e8\'f6\'e0 3.1
\par 
\par  Table 3.1
\par 
\par \'d2\'e0\'e1\'eb\'e8\'f6\'e0 \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e9 \'e2 \'f0\'e0\'f1\'ef\'f0\'ee\'f1\'f2\'f0\'e0\'ed\'e5\'ed\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'e0\'f5 \'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8
\'f0\'ee\'e2\'e0\'ed\'e8\'ff \'e8 \'ec\'ee\'e4\'e5\'eb\'e8\'f0\'ee\'e2\'e0\'ed\'e8\'ff
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 The table \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'e9 of operations in the widespread programming languages and modelling(simulation)
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par  \'d5\'e0\'f0\'e0\'ea\'f2\'e5\'f0\'e8\'f1\'f2\'e8\'ea\'e8 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e9\tab \'ce\'e1\'ee\'e7\'ed\'e0\'f7\'e5\'ed\'e8\'ff \'e2 \'f0\'e0\'f1\'ef\'f0\'ee\'f1\'f2\'f0\'e0\'ed\'e5\'ed\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'e0\'f5/ \'ef\'f0\'e5\'e4
\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'ff \tab 
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995  Performances of operations \tab  Label in the widespread languages \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'ff \tab 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \tab \tab \tab \'e2\'fb\'ef\'ee\'eb\'ed\'e5\'ed\'e8\'ff\tab Verilog\tab 
\par 
\par \tab \tab \tab  Fulfilment \tab  Verilog \tab 
\par 
\par \'cd\'e0\'e7\'e2\'e0\'ed\'e8\'e5\tab \'ca\'e0\'f2\'e5\'e3\'ee\'f0\'e8\'ff\tab \'d2\'e8\'ef\'fb \'e0\'f0\'e3\'f3\'ec\'e5\'ed\'f2\'ee\'e2\tab Pascal\tab C\tab HDL\tab 
\par 
\par Title \tab  Category \tab  Types of arguments \tab  Pascal \tab  C \tab  HDL \tab 
\par 
\par \'d3\'ef\'ee\'f0\'ff\'e4\'ee\'f7\'e5\'ed\'e8\'e5 \'e2\'fb\'f7\'e8\'f1\'eb\'e5\'ed\'e8\'e9\tab \'c8\'e7\'ec\'e5\'ed\'e5\'ed\'e8\'e5 \'ef\'ee\'f0\'ff\'e4\'ea\'e0\tab \'cb\'fe\'e1\'fb\'e5\tab (...)\tab (...)\tab (...)\tab 
\par 
\par Ordering of calculations \tab  Modification of the order \tab  Anyone \tab  (...) \tab  (...) \tab  (...) \tab 
\par 
\par \'ca\'ee\'ed\'fa\'fe\'ed\'ea\'f6\'e8\'ff\tab \'c1\'e8\'ed\'e0\'f0\'ed\'fb\'e5\tab \'c1\'e8\'f2\'ee\'e2\'fb\'e5, \'f6\'e5\'eb\'fb\'e5 \'e8 \'eb\'ee\'e3\'e8\'f7\'e5\'f1\'ea\'e8\'e5\tab and   2\tab &=   8\tab &    8\tab 
\par 
\par Conjuction \tab  Binary \tab  Bit, whole and logic \tab  And 2 \tab  And = 8 \tab  And 8 \tab 
\par 
\par \'c8\'ed\'e2\'e5\'f0\'f1\'e8\'ff \'ea\'ee\'ed\'fa\'fe\'ed\'ea\'f6\'e8\'e8*\tab \'c1\'e8\'ed\'e0\'f0\'ed\'fb\'e5\tab \'c1\'e8\'f2\'ee\'e2\'fb\'e5, \'f6\'e5\'eb\'fb\'e5 \'e8 \'eb\'ee\'e3\'e8\'f7\'e5\'f1\'ea\'e8\'e5\tab -\tab -\tab ~&  8\tab 
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 Inversion \'ea\'ee\'ed\'fa\'fe\'ed\'ea\'f6\'e8\'e8* \tab  Binary \tab  Bit, whole and logic \tab  - \tab  - \tab  ~ and 8 \tab 
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par \'d1\'eb\'ee\'e6\'e5\'ed\'e8\'e5 \'ef\'ee \'ec\'ee\'e4\'f3\'eb\'fe 2\tab \'c1\'e8\'ed\'e0\'f0\'ed\'fb\'e5\tab \'c1\'e8\'f2\'ee\'e2\'fb\'e5, \'f6\'e5\'eb\'fb\'e5 \'e8 \'eb\'ee\'e3\'e8\'f7\'e5\'f1\'ea\'e8\'e5\tab xor   3\tab ^=    9\tab ^     9\tab 
\par 
\par Addition module 2 \tab  Binary \tab  Bit, whole and logic \tab  Xor 3 \tab  ^ = 9 \tab  ^ 9 \tab 
\par 
\par \'d0\'e0\'e2\'ed\'ee\'e7\'ed\'e0\'f7\'ed\'ee\'f1\'f2\'fc*\tab \'c1\'e8\'ed\'e0\'f0\'ed\'fb\'e5\tab \'c1\'e8\'f2\'ee\'e2\'fb\'e5, \'f6\'e5\'eb\'fb\'e5 \'e8 \'eb\'ee\'e3\'e8\'f7\'e5\'f1\'ea\'e8\'e5 \tab -\tab -\tab ~ ~  9\tab 
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 \'d0\'e0\'e2\'ed\'ee\'e7\'ed\'e0\'f7\'ed\'ee\'f1\'f2\'fc* \tab  Binary \tab  Bit, whole and logic \tab  - \tab  }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 - \tab  ~ ~ 9 \tab 
\par 
\par \'c4\'e8\'e7\'fa\'fe\'ed\'ea\'f6\'e8\'ff\tab \'c1\'e8\'ed\'e0\'f0\'ed\'fb\'e5\tab \'c1\'e8\'f2\'ee\'e2\'fb\'e5 \'e8 \'f6\'e5\'eb\'fb\'e5\tab or    3\tab |=   10\tab |    10\tab 
\par 
\par Disjunction \tab  Binary \tab  Bit and whole \tab  Or 3 \tab  | = 10 \tab  | 10 \tab 
\par 
\par \'c8\'ed\'e2\'e5\'f0\'f1\'e8\'ff \'e4\'e8\'e7\'fa\'fe\'ed\'ea\'f6\'e8\'e8*\tab \'c1\'e8\'ed\'e0\'f0\'ed\'fb\'e5\tab \'c1\'e8\'f2\'ee\'e2\'fb\'e5 \'e8 \'f6\'e5\'eb\'fb\'e5\tab -\tab -\tab ~|  10\tab 
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 Inversion \'e4\'e8\'e7\'fa\'fe\'ed\'ea\'f6\'e8\'e8* \tab  Binary \tab  Bit and whole \tab  - \tab  - \tab }{\fcs1 \af1\afs24 \fcs0 
\f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995  ~ | 10 \tab 
\par 
\par \'ca\'ee\'ed\'fa\'fe\'ed\'ea\'f6\'e8\'ff\tab \'c1\'e8\'ed\'e0\'f0\'ed\'fb\'e5\tab \'cb\'ee\'e3\'e8\'f7\'e5\'f1\'ea\'e8\'e5\tab and   2\tab &&   11\tab && 11\tab 
\par 
\par Conjuction \tab  Binary \tab  Logic \tab  And 2 \tab  . . 11 \tab  . . 11 \tab 
\par 
\par \'c4\'e8\'e7\'fa\'fe\'ed\'ea\'f6\'e8\'ff\tab \'c1\'e8\'ed\'e0\'f0\'ed\'fb\'e5\tab \'cb\'ee\'e3\'e8\'f7\'e5\'f1\'ea\'e8\'e5\tab or\~   3\tab ||    12\tab ||    12\tab 
\par 
\par Disjunction \tab  Binary \tab  Logic \tab  Or \~ 3 \tab  || 12 \tab  || 12 \tab 
\par 
\par \'d3\'f1\'eb\'ee\'e2\'ed\'ee\'e5 \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e5\tab \'d2\'e5\'f0\'ed\'e0\'f0\'ed\'e0\'ff \tab \'eb\'fe\'e1\'fb\'e5? \'f7\'e8\'f1\'eb\'ee\'e2\'fb\'e5\tab -\tab ?:  13\tab ?:  13\tab 
\par 
\par The conditional \tab  Figurative \tab  Anyone? Numerical \tab  - \tab ?: 13 \tab ?: 13 \tab 
\par 
\par \'cf\'f0\'e8\'f1\'e2\'e0\'e8\'e2\'e0\'ed\'e8\'ff\tab \'c1\'e8\'ed\'e0\'f0\'ed\'fb\'e5\tab \'cb\'fe\'e1\'fb\'e5\tab :=    *\tab =  14\tab =   14\tab 
\par 
\par Assignments \tab  Binary \tab  Anyone \tab : = * \tab  = 14 \tab  = 14 \tab 
\par 
\par \'cf\'e5\'f0\'e5\'f7\'e5\'ed\'fc \'e4\'e0\'ed\'ed\'fb\'f5\tab \'d1\'ef\'e8\'f1\'ee\'ea\tab \'eb\'fe\'e1\'fb\'e5 \'e7\'ed\'e0\'f7\'e5\'ed\'e8\'ff\tab -\tab ,   15\tab ,   15\tab 
\par 
\par The list of datas \tab  List \tab  Any significances \tab  - \tab , 15 \tab , 15 \tab 
\par 
\par \'cf\'e5\'f0\'e5\'f7\'e5\'ed\'fc \'e4\'e5\'e9\'f1\'f2\'e2\'e8\'e9\tab \'d1\'ef\'e8\'f1\'ee\'ea\tab \'eb\'fe\'e1\'fb\'e5 \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'ff \'e8 \'e4\'e5\'e9\'f1\'f2\'e2\'e8\'ff\tab -\tab ;   16\tab ;   16\tab 
\par 
\par The list of operations \tab  List \tab  Any expressions and operations \tab  - \tab ; 16 \tab ; 16 \tab 
\par 
\par \'cf\'f0\'e8\'ec\'e5\'f7\'e0\'ed\'e8\'e5: \'e7\'ed\'e0\'ea \'f0\'e0\'e2\'e5\'ed\'f1\'f2\'e2\'e0 \'e2 \'e8\'ed\'e4\'e5\'ea\'f1\'e5 \'f5\'e0\'f0\'e0\'ea\'f2\'e5\'f0\'e8\'f1\'f2\'e8\'ea \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e9 \'ff\'e7\'fb\'ea\'e0 \'d1 \'ee\'e1\'ee
\'e7\'ed\'e0\'f7\'e0\'e5\'f2 \'e4\'ee\'ef\'f3\'f1\'f2\'e8\'ec\'ee\'f1\'f2\'fc \'ed\'e0\'ea\'e0\'ef\'eb\'e8\'e2\'e0\'fe\'f9\'e5\'e3\'ee \'ef\'f0\'e8\'f1\'e2\'e0\'e8\'e2\'e0\'ed\'e8\'ff, \'ea\'ee\'f2\'ee\'f0\'fb\'e5 \'e2 \'ff\'e7\'fb\'ea\'e5 Pascal \'ee\'ef
\'f0\'e5\'e4\'e5\'eb\'ff\'e5\'f2\'f1\'ff \'e2 \'f4\'ee\'f0\'ec\'e5: \'ef\'e5\'f0\'e5\'ec\'e5\'ed\'ed\'e0\'ff := \'ef\'e5\'f0\'e5\'ec\'e5\'ed\'ed\'e0\'ff \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'ff \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e5; \'e8 \'e4\'eb\'ff \'ea\'ee\'f2
\'ee\'f0\'fb\'f5 \'e2 \'ff\'e7\'fb\'ea\'e5 \'d1 \'e4\'ee\'ef\'f3\'f1\'f2\'e8\'ec\'e0\'ff \'f4\'ee\'f0\'ec: \'ef\'e5\'f0\'e5\'ec\'e5\'ed\'ed\'e0\'ff \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'ff = \'e2\'fb\'f0\'e0\'e6\'e5\'ed\'e8\'e5; \'f1\'ee \'e7\'ed\'e0\'f7\'e5\'ed
\'e8\'e5\'ec \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'ff \'e4\'eb\'ff \'ea\'ee\'ec\'e1\'e8\'ed\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e9 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e8 14. \'c7\'e2\'e5\'e7\'e4\'ee\'f7\'ea\'ee\'e9 * \'ef\'ee\'e4\'ec\'e5\'f7
\'e5\'ed\'ed\'fb\'e5 \'eb\'ee\'e3\'e8\'f7\'e5\'f1\'ea\'e8 \'e2\'ee\'e7\'ec\'ee\'e6\'ed\'fb\'e5 \'ee\'ef\'e5\'f0\'e0\'f6\'e8\'e8.
\par 
\par The note: the sign of equality in an index of performances of operations of the language C des
ignates an admissibility of accumulating assignment, which in language Pascal is determined in the form: a variable: = variable operation expression; and which for in the language C allowable(allowed) of the forms: variable operation = expression; with si
g}{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 nificance \'ef\'f0\'e5\'e4\'f8\'e5\'f1\'f2\'e2\'ee\'e2\'e0\'ed\'e8\'ff
 for combined operation 14. By an asterisk * the noticed logically possible(probable) operations.
\par }{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
\par  \'cf\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'ed\'e0\'ff \'f0\'e5\'e0\'eb\'e8\'e7\'e0\'f6\'e8\'ff \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'f2\'e5\'ea\'f1\'f2\'ee\'e2 \'e2 \'ef\'f0\'ee\'e8\'e7\'e2\'ee\'eb\'fc\'ed\'ee\'ec \'ea\'ee\'ec\'ef\'fc\'fe
\'f2\'e5\'f0\'ed\'ee\'ec \'ff\'e7\'fb\'ea\'e5 
\par 
\par  Programm realization of reproduction of the texts in any computer language 
\par 
\par \'c2 \'f0\'e0\'e7\'ed\'fb\'f5 \'ea\'ee\'ec\'ef\'fc\'fe\'f2\'e5\'f0\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'e0\'f5 \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'e8 \'fd\'ea\'e2\'e8\'e2\'e0\'eb\'e5\'ed\'f2\'ed\'fb\'e5 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'fb \'ec\'ee\'e3
\'f3\'f2 \'e2\'ee\'f1\'f1\'ee\'e7\'e4\'e0\'e2\'e0\'f2\'fc\'f1\'ff \'ef\'ee-\'f0\'e0\'e7\'ed\'ee\'ec\'f3. \'cf\'ee\'fd\'f2\'ee\'ec\'f3 \'e4\'eb\'ff  \'f3\'ed\'e8\'f4\'e8\'f6\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e9 \'f0\'e5\'ea\'ee\'ed\'f1\'f2\'f0\'f3\'ea\'f6
\'e8\'e8 \'ee\'ef\'e5\'f0\'e0\'f2\'ee\'f0\'ee\'e2 \'f0\'e0\'e7\'ed\'fb\'f5 \'ff\'e7\'fb\'ea\'ee\'e2 \'ed\'e0\'e4\'ee \'ee\'ef\'f0\'e5\'e4\'e5\'eb\'e8\'f2\'fc, \'ea\'e0\'ea\'e8\'ec \'f3\'ed\'e8\'f4\'e8\'f6\'e8\'f0\'ee\'e2\'e0\'ed\'ed\'fb\'ec \'ee\'e1\'ee
\'e7\'ed\'e0\'f7\'e5\'ed\'e8\'e5\'ec \'ef\'e5\'f0\'e5\'ed\'f3\'ec\'e5\'f0\'ee\'e2\'e0\'ed\'ed\'ee\'e3\'ee \'f2\'e8\'ef\'e0 enum tokType \'f1\'ee\'ee\'f2\'e2\'e5\'f2\'f1\'f2\'e2\'f3\'fe\'f2 \'f1\'f2\'f0\'ee\'ea\'e8 \'f4\'ee\'f0\'ec\'e0\'f2\'ee\'e2 \'e2\'ee
\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'e8\'e7 \'ec\'e0\'f1\'f1\'e8\'e2\'e0, \'f1\'ee\'e7\'e4\'e0\'ed\'ed\'ee\'e3\'ee \'e4\'eb\'ff \'f1\'ee\'ee\'f2\'e2\'e5\'f2\'f1\'f2\'e2\'f3\'fe\'f9\'e5\'e3\'ee \'ff\'e7\'fb\'ea\'e0 \'e4\'eb\'ff \'ff\'e7
\'fb\'ea\'e0 \'d1/C++ char *oprtrC[]\'e8\'eb\'e8 \'e4\'eb\'ff \'ff\'e7\'fb\'ea\'e0 Pascal char *oprtrP[], \'e8 \'f7\'f2\'ee \'e4\'e5\'eb\'e0\'f2\'fc, \'e5\'f1\'eb\'e8 \'ee\'e4\'ed\'ee\'e7\'ed\'e0\'f7\'ed\'ee \'fd\'ea\'e2\'e8\'e2\'e0\'eb\'e5\'ed\'f2\'ed
\'fb\'e5 \'f1\'f0\'e5\'e4\'f1\'f2\'e2\'e0 \'e2 \'ff\'e7\'fb\'ea\'e5 \'e2\'ee\'f1\'ef\'f0\'ee\'e8\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'ee\'f2\'f1\'f3\'f2\'f1\'f2\'e2\'f3\'fe\'f2. \'d2\'ee\'e3\'e4\'e0 \'f4\'f3\'ed\'ea\'f6\'e8\'fe \'e2\'ee\'f1\'ef\'f0\'ee\'e8
\'e7\'e2\'e5\'e4\'e5\'ed\'e8\'ff \'ec\'ee\'e6\'ed\'ee \'e7\'e0\'ef\'f0\'ee\'e3\'f0\'e0\'ec\'ec\'e8\'f0\'ee\'e2\'e0\'f2\'fc \'e2 \'f1\'eb\'e5\'e4\'f3\'fe\'f9\'e5\'ec \'e2\'e8\'e4\'e5.
\par 
\par }{\fcs1 \af106\afs24 \fcs0 \f106\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 In different computer languages \'f1\'e5\'ec\'e0\'ed\'f2\'e8\'f7\'e5\'f1\'ea\'e8
 equivalent operators can be reconstructed differently. Therefore for unified reconstruction of operators of diff}{\fcs1 \af1\afs24 \fcs0 \f1\fs24\lang1049\langfe1049\cgrid0\langnp1049\insrsid12281995 
erent languages it is necessary to define(determine), to what by a unified label of an enumerated type enum tokType there correspond(meet) lines of formats of reproduction from an array created for appropriate language for the language C /C ++ char *oprtr
C [] or for the language Pascal char *oprtrP [], and what to do(make), if is unequivocal(unambiguous) equivalent means in language of reproduction are absent. Then the function of reproduction can be programmed as follows.
\par 
\par 
\par  
\par 
\par 
\par 
\par }}