link l1: CT
link l2: rdm
link l3: rdd
link ewh: 16
link m: z,z,z,15,14,13,12,11,z,z,z,z
link ra: z,7,6,5
link rb : z,2,1,0

dw 2h:004h
dw 20h:0100100001010100% \ 4854h  -- read X, r15
dw 22h:0101100010010000% \ 5890h  -- mov [90h], r15
dw 24h:0100100001010100% \ 4854h  -- read X, r15
dw 26h:0101100010010010% \ 5892h  -- mov [92h], r15
dw 28h:1001100110001101% \ 998Dh  -- mov r15, [r4]-[r5]
dw 2Ah:0101100010010100% \ 5894h  -- mov [94h], r15
dw 2Ch:0100100001010100% \ 4854h  -- read Z, r15
dw 2Eh:0011010010010100% \ 3494h  -- mul [94h]
dw 30h:0101000011010100% \ 50D4h  -- write r15, rd
dw 32h:0001100011010100% \ 18D4h  -- mov r15, r14
dw 34h:0101000011011000% \ 50D8h  -- write r15, rd
dw 36h:1111100000000000% \ F800h  -- end of program



dw 90h:0000h
dw 92h:0000h
dw 94h:0000h

accept r7: 020h    \--счетчик команд
accept r6: 0111111110%    \-- указатель стека начало стека 200h
accept r15:000h
accept r4: 090h
accept r5: 092h

accept dev[2]:o, 0D2h, 0D4h, 3, 12
accept dev[3]:o, 0D6h, 0D8h, 3, 12
accept dev[1]:i, 52h, 54h, 3, 12
accept dev_buf[1]: 3h, 0DADh, 0ECBh



begin
{cjp nz, rpak1;}
\-- одноадресные команды

org 0000110000% {cjp nz, mpp_reg;}   \-- r14 -> R15
org 0001100000% {cjp nz, mpp_mul;}  \-- умножение ОПxR15->R15
org 0010010000% {cjp nz, mpp_in; }  \-- ввод в акамулятор с внешнего устройства RD->R15
org 0010100000% {cjp nz, mpp_out;}  \-- вывод из акамулятора во внешнее устройство R15->RD
org 0010110000% {cjp nz, mpp_load;}  \-- запись акамулятора в ОП R15->ОП

\-- двухадресные команды

org 0100110000% {cjp nz, mpp_dsub;}  \-- отрицание ОП1-ОП2?R15

org 0111110000% {cjp nz, end;}   \-- конец програмы

\-------------------------------------- Распаковка команды---------------------------------
rpak1
{add nil, r7, z,z; oey; ewl;}   \-- адрес команды выдаем на шину адреса
ss1 {r; cjp rdm, ss1; add r8, z, bus_d;} \-- читаем команду в R8
{add nil, r8, z,z; cjp no, dfk;}  \-- проверяем 15 бит команды если R8[15]=1 переход на
\-- распаковку двухадресной команды
{xor r9, r9, r9;}    \-- обнуляем регистр маски
{add r9, z, 0400h;}    \-- пишем константу в регистр маски
{and nil, r9, r8; cjp not zo, kadr;}  \-- проверяем 10 бит команды если R8[10]=1
      \-- то переход на распаковку косвенной адресации
\--------------Распаковка одноадресной команды с прямой адресацией--------------------------
{xor r9, r9, r9;}    \-- обнуляем регистр маски
{add r9, z, 03ffh;}    \-- пишем константу в регистр маски
{and r9, r9, r8; oey; ewl;}   \-- читаем операнд в R9
{add r13,r9,z;}    \-- копируем операнд из R9 в R13
{cjp nz, kop;}     \-- переход на процедуру выбора кода операции
\--------------Распаковка одноадресной команды с косвенной адресацией-----------------------
kadr
{xor r9, r9, r9;}    \-- обнуляем регистр маски
{add r9, z, 03ffh;}    \-- пишем константу в регистр маски
{and nil, r9, r8; oey; ewl;}   \-- выдаем адрес операнда на шину адреса
ss6 {r; cjp rdm, ss6; add r13, z, bus_d;} \-- читаем операнда в R13
{cjp nz, kop;}     \-- переход на процедуру выбора кода операции
\--------------------------Распаковка двухадресной команды---------------------------------
dfk {add r8,r8,z; ewa;ewb;oey;}  \-- разрешаем запись содержимого локальной шины в
      \-- регистр а и б
{xor r9,r9,r9;}    \-- обнуляем регистр маски
{add r9,r9,010h;}    \-- пишем константу в регистр маски
{and nil,r9,r8;cjp zo,dpka;}   \-- проверяем 4 бит команды если R8[4]=0
\-- то переходим на распаковку прямой и косвенной адресации

\------Распаковка двухадресной команды с прямой и косвенной адресацией---------------------
dpka
{add srl, r9, r9, z;}    \-- сдвигаем регистр маски направо
{add nil, r8, r9; cjp not zo, dka;}   \-- анализируем 3 бит команды если R8[3]=1 то переходим
      \-- на распаковку косвенной адресации
\------Распаковка двухадресной команды с прямой адресацией---------------------------------
{add r14, ra, z;}     \-- считали первый операнд в R14
{add r9,r8,z;ldct 4;}    \-- создаем копию команды в R9
Right2_5 {add srl,r9,z,r9;}   \-- сдвигаем команду на 5 разрядов влево
{rpct right2_5;}    \-- сдвигаем команду на 5 разрядов влево
{add r9,r9,z; ewa;ewb;oey;}   \-- разрешаем запись содержимого локальной шины в реестр а и б
{add r13, ra, z;}    \-- считали второй операнд в R13
{cjp nz, kop;}     \-- переход на процедуру выбора кода операции
\------Распаковка двухадресной команды с косвенной адресацией---------------------------------
dka
{add nil,rb,z;oey;ewl;}   \-- выдаем адрес второго операнда на шину адреса
ss14 {r;cjp rdm,ss14;add r13,bus_d,z;}  \-- читаем 2-й операнд в R13
{add nil,ra,z;oey;ewl;}   \-- выдаем адрес первого операнда на шину адреса
ss16 {r;cjp rdm,ss16;add r14,bus_d,z;} \-- читаем 1-й операнд в R14
{cjp nz,kop;}     \-- переход на процедуру выбора кода операции
\------------------------------------- Выбор кода операции -------------------------------------
kop {add nil, r8, z, z; oey; jmap;}

\------------------------------------Подпрограма R14 to R15------------------------------------
mpp_reg
{or r15,r14,z;}    \-- R13 xor R15->R15
{cjp nz,falc;}     \-- переход на процедуру формирования адреса следующей команды

\------------------------------------Подпрограма умножение----------------------------------------
mpp_mul 
{LOAD RM, Z;}
 {or r12, r13, z;}
 {XOR R14, R14, R14;}
 {OR R10, R14, Z;}
 {OR R11, R14, Z;}
 {OR R13, R14, Z;}
 {AND NIL, R12, 8000h; LOAD RM, FLAGS;}
 {CJP RM_Z, NOT2;}
 {SUB R12, Z, R12, NZ;}
 {ADD R14, R14, 1, Z;}
NOT2 {AND NIL, R15, 8000h; LOAD RM, FLAGS;}
 {CJP RM_Z, shift;}
 {SUB R14, R14, Z, Z;}
 {SUB R15, Z, R15, NZ;}

shift {OR SRL, R12, R12, Z;}
 {OR SR.9, R13, R13, Z;}
cicle {OR SLL, R15, Z; CJP NOT RM_C, noadd;}
 {ADD R10, R10, R12, Z; LOAD RM, FLAGS;}
 {ADD R11, R11, R13, RM_C;}
noadd {OR SRL, R12, R12, Z;}
 {OR SR.9, R13, R13, Z;}
 {OR NIL, R15, R15; CJP NOT ZO, cicle;}
 {AND R14, R14, R14; CJP ZO, invert;}
 {ADD R10, R10, 8000h, Z;}
invert {ADD R14, R10, Z, Z;}
 {ADD R15, R11, Z, Z; CJP NZ, lab4;}
lab4
 {or r15, r11,z;}
 {or r14, r10,z;}

{cjp nz, falc;}    \-- переход на процедуру формирования адреса следующей команды
\----------------------------------Подпрограма ввода в акамулятор с внешнего устройства-----------------
mpp_in
{sub r11,r13,2,nz;}    \-- вычитаем от адреса РД 2 чтоб получить адрес РС
{add nil,r11,z; OEY;EWL;}    \-- выдаем адрес РС на шину адреса
ss18 {i;cjp rdd,ss18;add r9,bus_d,z;}  \-- читаем в R9 регистр состояния
{and nil,r9,0080h; load rm,flags;}    \-- анализируем бит готовности
{cjp rm_z,mpp_in;}      \-- если устройство не готово то начинаем сначала
{add nil,r13,z; OEY;EWL;}     \-- выдаем адрес РД на шину адреса
ss19 {i;cjp rdd,ss19;add r15,bus_d,z;}  \-- читаем в R15 РД
{cjp nz,falc;}     \-- переход на процедуру формирования адреса следующей команды
\---------------------------------Подпрограма вывода из акамулятора в внешнее устройство--------------
mpp_out
{sub r11,r13,2,nz;}    \-- вычитаем от адреса РД 2 чтоб получить адрес РС
{add nil,r11,z; OEY;EWL;}   \-- выдаем адрес РС на шину адреса
ss20 {i;cjp rdd,ss20;add r9,bus_d,z;} \-- читаем в R9 регистр состояния
{and nil,r9,0080h; load rm,flags;}    \-- анализируем бит готовности
{cjp rm_z,mpp_in;}     \-- если устройство не готово то начинаем сначала
{add nil,r13,z; OEY;EWL;}     \-- выдаем адрес РД на шину адреса
ss21 {or nil,r15,z; OEY;o;cjp rdd,ss21;}  \-- пишем R15 в РД
{cjp nz,falc;}     \-- переход на процедуру формирования адреса следующей команды
\--------------------------------Подпрограма записи акамулятора в ОП----------------------------------
mpp_load
{add nil, r13, z; oey; ewl;}    \-- выдаем адрес на шину адреса
ss3 {w; cjp rdm, ss3; add nil, r15, z; oey;} \-- пишем R15->ОП
{cjp nz, falc;}    \-- переход на процедуру формирования адреса следующей команды

\------------------------------------Подпрограма вычитания двуадресная------------------------------------
mpp_dsub
{sub r14, r13,r14, nz;}   \-- вычитание R13-R14->R14
{add r15, r14, z;}    \-- сложение  R14+0->R15
{cjp nz, falc;}    \-- переход на процедуру формирования адреса следующей команды

\-------------------------------------Процедура формирования адреса следующей команды----------
falc
{add r7, r7, 02h;}    \-- додаем 2 к счетчику команд R7+2->R7
{cjp nz, begin;}    \-- переход на начало програмы


end
{}
