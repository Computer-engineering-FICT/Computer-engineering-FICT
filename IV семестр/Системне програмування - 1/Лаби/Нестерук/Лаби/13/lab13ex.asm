.386ASSUME CS:CODE,DS:DATA,SS:STKSTK SEGMENT STACK	STKD DW 64 DUP(?)STK ENDSCODE SEGMENT_beg:  MOV AX,DATA	MOV DS,AX 	MOV AX,0003h    ;init text mode	INT 10h         ;80x25          _lop:   MOV AH,02h      ;get system time from RTC        INT 1Ah         ;CH-hours, CL-minutes DL-seconds                    CALL outBCDNumb ;**OUTPUT OF HOURS**        MOV SI,SWITCH   ;output of the separator        ADD X,5                 CALL outDigit                  MOV CH,CL       ;**OUTPUT OF MINUTES**         CALL outBCDNumb              MOV SI,SWITCH	;output of the separator        ADD X,5        CALL outDigit                  MOV CH,DH       ;**OUTPUT OF SECONDS**        CALL outBCDNumb                MOV AH,02h      ;Setting cursor position        MOV DH,25       ;to the end of the screen.        MOV BH,00h      ;It will be unvisible        INT 10h                MOV AH,86h      ;DELAY FOR 1 SEC        MOV DX,0A120h   ;DX:CX = 0007A120h        MOV CX,0007h    ;in microSeconds        INT 15h                MOV AL,X        ;LEFT SHIFT OF X        SUB AL,41       ; ON THE SCREEN        JZ _nul                 JMP _nex_nul:   MOV AX,0003h    ;if X==0 then move X		INT 10h         ;to the end of the screen        MOV AL,30       ;and clear screen_nex:   MOV X,AL                XOR SWITCH,1  ;switching between 10 and 11                       ;codes of separate symbol              MOV AH,01h    ;reading the state of the         INT 16h       ;pressed key in queque        jnz _ext      ;if pressed then exit         	JMP _lop      	_ext:	.EXIT;PROCEDURE outDigit;  SI  : CHAR NUMBER OF DIGIT TO OUT;  X,Y : COORDINATES;OUTPUT THE DIGIT WITH A NUMBER SI AND;COORDINATES X AND YoutDigit PROC NEAR	PUSHA        MOV AX,SI     ; CALCULATES THE OFFSET        MOV BX,25     ; AFTER THE BEGIN OF         MUL BX	      ; OUTPUT TABLE.        MOV SI,AX     ;CHAR OFFSET        MOV DH,Y      ;ROW TO OUT        MOV DL,0      ;COL TO OUT	MOV CX,25 _out:	PUSH CX	PUSH DX	ADD DL,X        MOV AH,02h    ;SET CURSOR        MOV BH,00h    ;VIDEO PAGE        INT 10h	MOV AH,09h    ;OUT CHAR AT CURSOR        MOV AL,zer+SI ;CHAR        MOV CX,01h    ;COUNT        MOV BL,02h    ;TEXT ATTRIBUTE(COLOR)	 ADD BL,80h    ;FLASHING COLOR        INT 10h               INC SI        POP DX        INC DL        CMP DL,5        JE _inc        JMP _next_inc:   INC DH	      ;INCREASE Y POSITION	MOV DL,0      ;"RETURN CARET"      _next:  POP CX        LOOP _out	POPA	RET outDigit ENDP;PROCEDURE outBCDNumb;  CH : NUMBER IN THE BCD FORM;OUTS THE NUMBER CH AND;CHANGE FOR IT THE COORDINATE XoutBCDNumb PROC NEAR	XOR AH,AH           ;extracts higher digit        MOV AL,CH       ;from the hour number        SHR AL,4        ;in BCD form        MOV SI,AX       ;filling the arguments of procedure outDigit        ADD X,5         ;by the symbol to write and its coordinates        CALL outDigit   ;call out procedure                XOR AH,AH       ;extracts lower digit        MOV AL,CH       ;from the hour number        AND AL,00001111b                MOV SI,AX        ADD X,5		    ;shift of the X coordinate to the next digit        CALL outDigit	;out next digit of hour        REToutBCDNumb ENDPCODE ENDSDATA SEGMENT	X DB 2  ;X coordinate of the text	Y DB 3  ;Y coordinate of the text	SWITCH DW 10        zer DB   '████ '            DB   '█  █ '            DB   '█  █ '            DB   '█  █ '            DB   '████ '	        one DB   ' ██  '            DB   '  █  '            DB   '  █  '            DB   '  █  '            DB   ' ███ '        two DB   '████ '            DB   '   █ '            DB   '████ '            DB   '█    '            DB   '████ '        thr DB   '████ '            DB   '   █ '            DB   '████ '            DB   '   █ '            DB   '████ '        fou DB   '█  █ '            DB   '█  █ '            DB   '████ '            DB   '   █ '            DB   '   █ '        fiv DB   '████ '            DB   '█    '            DB   '████ '            DB   '   █ '            DB   '████ '        six DB   '████ '            DB   '█    '            DB   '████ '            DB   '█  █ '            DB   '████ '        sev DB   '████ '            DB   '   █ '            DB   '  █  '            DB   ' █   '            DB   ' █   '        eig DB   '████ '            DB   '█  █ '            DB   '████ '            DB   '█  █ '            DB   '████ '        nin DB   '████ '            DB   '█  █ '            DB   '████ '            DB   '   █ '            DB   '████ '        dts DB   '     '            DB   '  █  '            DB   '     '            DB   '  █  '            DB   '     '                emp DB   '     '            DB   '     '            DB   '     '            DB   '     '            DB   '     'DATA ENDSEND _beg