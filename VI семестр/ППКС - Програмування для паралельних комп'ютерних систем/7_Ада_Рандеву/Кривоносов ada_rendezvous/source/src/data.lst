GNAT GPL 2015 (20150428-49)
Copyright 1992-2015, Free Software Foundation, Inc.

Compiling: data.adb
Source file time stamp: 2016-05-09 19:34:00
Compiled at: 2016-05-09 22:55:32

     1.  -------------------------------------------------------------------------------
     2.    --                                                                           --
     3.    --                   Parallel and Distributed Computing                      --
     4.    --                   Laboratory work #7. Ada. Rendezvous                     --
     5.    --                                                                           --
     6.    --  File: data.adb                                                          --
     7.    --  Task:A = α∙B+ max(Z)∙Т∙ (MO∙MK)                                          --
     8.    --                                                                           --
     9.   --  Author: Kryvonosov Oleksii, group IO-34                                   --
    10.    --  Date: 30.04.2015                                                         --
    11.    --                                                                           --
    12.    -------------------------------------------------------------------------------
    13.
    14.    with Ada.Text_IO, Ada.Integer_Text_IO;
    15.    use Ada.Text_IO, Ada.Integer_Text_IO;
    16.
    17.    package body Data is
    18.
    19.     procedure Input (V : out Vector; Value : Integer) is
    20.     begin
    21.     for I in 1..N loop
    22.     V(I):= Value;
    23.     end loop;
    24.     end Input;
    25.
    26.
    27.     procedure Input (MA : out Matrix; Value : Integer) is
    28.     begin
    29.     for I in 1..N loop
    30.     for J in 1..N loop
    31.     MA(I)(J):= Value;
    32.     end loop;
    33.     end loop;
    34.     end Input;
    35.
    36.
    37.    procedure Output (V : in Vector) is
    38.     begin
    39.     New_Line;
    40.     for I in 1..V'Last loop
    41.     Put(Item => V(I), Width => 6);
    42.     end loop;
    43.    New_Line;
    44.     end Output;
    45.
    46.
    47.    procedure Output (MA : in Matrix) is
    48.     begin
    49.     New_Line;
    50.     for I in 1..MA'Last loop
    51.     for J in 1..N loop
    52.     Put(Item => MA(i)(j), Width => 6);
    53.     end loop;
    54.     New_line;
    55.     end loop;
    56.     New_Line;
    57.     end Output;
    58.
    59.     procedure FindMaxZ (V : in VectorH; maxZi : out Integer) is
    60.     maxBuf : Integer;
    61.     begin
    62.     maxBuf :=-99999;
    63.     for i in 1..H loop
    64.     if(maxBuf < V(i)) then
    65.     maxBuf := V(i);
    66.     end if;
    67.     end loop;
    68.     maxZi:=maxBuf;
    69.     end FindMaxZ;
    70.
    71.     function Max (A, B: Integer) return Integer is
    72.     begin
    73.     if A >= B then
    74.     return A;
    75.     else
    76.    return B;
    77.     end if;
    78.     end Max;
    79.
    80.     procedure Calculation (
    81.     alfa : in Integer;
    82.     maxZ : in Integer;
    83.     B : in VectorH;
    84.     T : in VectorN;
    85.     MO : in MatrixH;
    86.     MK : in MatrixN;
    87.     A : out VectorH) is
    88.     Sum : Integer := 0;
    89.       Sum1 : Integer := 0;
    90.       TempVect : VectorH;
    91.
    92.    begin
    93.
    94.
    95.       for I in 1..H loop
    96.          TempVect(i) := B(i)* alfa;
    97.       end loop;
    98.
    99.     for I in 1..H loop
   100.          Sum1 := 0;
   101.
   102.     for j in 1..N loop
   103.    sum := 0;
   104.     for K in 1..N loop
   105.                Sum := sum + MO(I)(K)* MK(K)(J);
   106.
   107.     end loop;
   108.     Sum1 := sum1 + Sum * T(J);
   109.     end loop;
   110.          A(I):= Sum1*maxZ + TempVect(I);
   111.
   112.       end loop;
   113.
   114.
   115.
   116.     end Calculation;
   117.
   118.    end Data;

Compiling: data.ads
Source file time stamp: 2016-05-09 19:33:20
Compiled at: 2016-05-09 22:55:32

     1.  -------------------------------------------------------------------------------
     2.    --                                                                           --
     3.    --                   Parallel and Distributed Computing                      --
     4.    --                   Laboratory work #7. Ada. Rendezvous                     --
     5.    --                                                                           --
     6.    --  File: data.ads                                                          --
     7.
     8.    --                                                                           --
     9.   --  Author: Kryvonosov Oleksii, group IO-34                                   --
    10.    --  Date: 30.04.2015                                                         --
    11.    --                                                                           --
    12.    -------------------------------------------------------------------------------
    13.
    14.
    15.    with Ada.Text_IO;
    16.    use Ada.Text_IO;
    17.
    18.    generic
    19.
    20.     N, H : in Natural;
    21.
    22.    package Data is
    23.
    24.     type Vector is array(Integer range <>) of Integer;
    25.     Subtype VectorN is Vector(1..N);
    26.    Subtype Vector6h is Vector(1..6 * H);
    27.    Subtype Vector5H is Vector(1..5*H);
    28.     Subtype Vector4H is Vector(1..4*H);
    29.     Subtype Vector3h is Vector(1..3 * H);
    30.     Subtype Vector2H is Vector(1..2 * H);
    31.     Subtype VectorH is Vector(1..H);
    32.
    33.     type Matrix is array(Integer range <>) of VectorN;
    34.     Subtype MatrixN is Matrix(1..N);
    35.    Subtype Matrix6H is Matrix(1..6 * H);
    36.    Subtype Matrix5H is Matrix(1..5*H);
    37.    Subtype Matrix4H is Matrix(1..4*H);
    38.     Subtype Matrix3H is Matrix(1..3 * H);
    39.     Subtype Matrix2H is Matrix(1..2 * H);
    40.     Subtype MatrixH is Matrix(1..H);
    41.
    42.
    43.     procedure Input ( V : out Vector;
    44.     Value : in Integer);
    45.
    46.    procedure Input ( MA : out Matrix;
    47.     Value : in Integer);
    48.
    49.     procedure Output (V : in Vector);
    50.
    51.     procedure Output (MA : in Matrix);
    52.
    53.     procedure FindMaxZ (V : in VectorH; maxZi : out Integer);
    54.
    55.     function Max (A, B: Integer) return Integer;
    56.
    57.     procedure Calculation( alfa : in Integer;
    58.     maxZ : in Integer;
    59.     B : in VectorH;
    60.     T : in VectorN;
    61.     MO : in MatrixH;
    62.     MK : in MatrixN;
    63.     A : out VectorH);
    64.
    65.
    66.    end Data;

 118 lines: No errors
