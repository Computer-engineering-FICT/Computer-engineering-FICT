Source file: ..\lab1   Mon Mar 28 19:33:28 2011

    1 ----------------------------------------------------------------
    2 --              Paralel and distributed computing             --
    3 --             Laboratory work #1. Ada. Semaphores            --
    4 --                  Func: a = MIN(MO*MX+alfa*MR)              --
    5 --                   IO-83 Vorobyev Vitaliy                   --
    6 --                        9.02.2011                           --
    7 ----------------------------------------------------------------
    8 
    9 with Package1; use Package1;
   10 with Ada.Text_IO; use Ada.Text_IO;
   11 with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
   12 
   13 procedure Lab4 is
   14    MA, MB, MZ, ME, MR: Matr;
   15    Alfa: Integer;
   16 
   17 --ОПИСАТЕЛЬНАЯ ЧАСТЬ ЗАЩИЩЕННЫХ МОДУЛЕЙ
   18 --ЗАЩИЩЕННЫЙ МОДУЛЬ Synchro
   19         protected Synchro is
              *
*****Ada 83 Warning: LRM:2.9 Use of new reserved word "PROTECTED" as an
*****        identifier, Continuing
*****Ada Compatibility Guide Number 2
*****Notes: "aliased, protected, requeue, tagged, until" are all newly
*****        reserved words.
                        *
*****Error: Parse error: expected COLON, got Identifier, Inserting COLON
                        *
*****Error: LRM:4.1(3) Direct name, Synchro, is not visible, Ignoring future
*****        references
                                *
*****Error: Parse error: expected SEMICOLON, got IS, Inserting SEMICOLON
                                *
*****Error: LRM:3.1(3) Parse error expecting declaration got IS, Skipping to
*****        after next semicolon
   20                 procedure InputSignal;
   21                 procedure CalcEndSignal;
                                *
*****Error: LRM:3.11.1(6) Completion required for specification
*****        'CalcEndSignal', Continuing
   22                 entry OutputSync;
                      *
*****Error: LRM:3.1(3) Parse error expecting declaration got ENTRY, Skipping to
*****        after next semicolon
   23                 entry InputSync;
                      *
*****Error: LRM:3.1(3) Parse error expecting declaration got ENTRY, Skipping to
*****        after next semicolon
   24         --приватная часть защищенного модуля
   25         private:
              *
*****Error: LRM:3.1(3) Parse error expecting declaration got PRIVATE, Skipping
*****        to after next semicolon
   26                 F1: integer := 0;
   27                 F2: integer := 0;
   28         end Synchro;
              *
*****Error: Parse error: expected BEGIN, got END, Inserting BEGIN
              *
*****Error: LRM:5.1(2) Unexpected ending token END where statement is required,
*****        continuing
                         *
*****Error: LRM:6.3(3) Designator at end of subprogram must match the defining
*****        designator, Continuing
   29 
   30 --ЗАЩИЩЕННЫЙ МОДУЛЬ OP_MZ
   31         protected OP_MZ is
              *
*****Ada 83 Warning: LRM:2.9 Use of new reserved word "PROTECTED" as an
*****        identifier, Continuing
*****Ada Compatibility Guide Number 2
*****Notes: "aliased, protected, requeue, tagged, until" are all newly
*****        reserved words.
              *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                        *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                              *
*****Error: LRM:10.1.1(5) IS is unexpected here, Continuing
   32                 procedure SetMZ(M: in Matrix);
                                            *
*****Error: LRM:4.1(3) Direct name, Matrix, is not visible, Ignoring future
*****        references
   33                 function GetMZ;
                                    *
*****Error: Parse error: expected RETURN, got SEMICOLON, Inserting RETURN
                                    *
*****Error: LRM:4.1(2) Syntax error: the token SEMICOLON can not be used as a
*****        name, skipping to next separator
   34         --приватная часть защищенного модуля
   35         private:
                     *
*****Error: LRM:10.1.1(5) COLON is unexpected here, Continuing
   36                 MZ: Matr;
                      *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                        *
*****Error: LRM:10.1.1(5) COLON is unexpected here, Continuing
                          *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                              *
*****Error: LRM:10.1.1(5) SEMICOLON is unexpected here, Continuing
   37         end OP_MZ;
              *
*****Error: LRM:10.1.1(5) END is unexpected here, Continuing
                  *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                       *
*****Error: LRM:10.1.1(5) SEMICOLON is unexpected here, Continuing
   38 
   39 --ЗАЩИЩЕННЫЙ МОДУЛЬ OP_alfa
   40         protected OP_alfa is
              *
*****Ada 83 Warning: LRM:2.9 Use of new reserved word "PROTECTED" as an
*****        identifier, Continuing
*****Ada Compatibility Guide Number 2
*****Notes: "aliased, protected, requeue, tagged, until" are all newly
*****        reserved words.
              *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                        *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                                *
*****Error: LRM:10.1.1(5) IS is unexpected here, Continuing
   41                 procedure SetAlfa(A: in integer);
   42                 function GetAlfa;
                                      *
*****Error: Parse error: expected RETURN, got SEMICOLON, Inserting RETURN
                                      *
*****Error: LRM:4.1(2) Syntax error: the token SEMICOLON can not be used as a
*****        name, skipping to next separator
   43         --приватная часть защищенного модуля
   44         private:
                     *
*****Error: LRM:10.1.1(5) COLON is unexpected here, Continuing
   45                 Alfa: Integer;
                      *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                          *
*****Error: LRM:10.1.1(5) COLON is unexpected here, Continuing
                            *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                                   *
*****Error: LRM:10.1.1(5) SEMICOLON is unexpected here, Continuing
   46         end OP_alfa;
              *
*****Error: LRM:10.1.1(5) END is unexpected here, Continuing
                  *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                         *
*****Error: LRM:10.1.1(5) SEMICOLON is unexpected here, Continuing
   47 
   48 --ЗАЩИЩЕННЫЙ МОДУЛЬ OP_MZ
   49         protected OP_MR is
              *
*****Ada 83 Warning: LRM:2.9 Use of new reserved word "PROTECTED" as an
*****        identifier, Continuing
*****Ada Compatibility Guide Number 2
*****Notes: "aliased, protected, requeue, tagged, until" are all newly
*****        reserved words.
              *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                        *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                              *
*****Error: LRM:10.1.1(5) IS is unexpected here, Continuing
   50                 procedure SetMR(M: in Matrix);
                                            *
*****Error: LRM:4.1(3) Direct name, Matrix, is not visible, Ignoring future
*****        references
   51                 function GetMR;
                                    *
*****Error: Parse error: expected RETURN, got SEMICOLON, Inserting RETURN
                                    *
*****Error: LRM:4.1(2) Syntax error: the token SEMICOLON can not be used as a
*****        name, skipping to next separator
   52         --приватная часть защищенного модуля
   53         private:
                     *
*****Error: LRM:10.1.1(5) COLON is unexpected here, Continuing
   54                 MR: Matr;
                      *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                        *
*****Error: LRM:10.1.1(5) COLON is unexpected here, Continuing
                          *
*****Error: LRM:10.1.1(5) Identifier is unexpected here, Continuing
                              *
*****Error: LRM:10.1.1(5) SEMICOLON is unexpected here, Continuing
   55         end OP_MR;
              *
*****Error: LRM:10.1.1(5) END is unexpected here, Continuing
   56 
   57 --ТЕЛА ЗАЩИЩЕННЫХ МОДУЛЕЙ
   58 --ЗАЩИЩЕННЫЙ МОДУЛЬ Synchro
   59         protected body Synchro is
   60                 procedure InputSignal 
   61                         begin
   62                                 F1 := F1 + 1;
   63                         end
   64         end InputSignal();
   65                 procedure CalcEndSignal 
   66                         begin
   67                                 F2 := F2 + 1;
   68                         end
   69         end CalcEndSignal();
   70                 entry OutputSync while F1 = P - 1
   71                 begin
   72                                 null;
   73                 end OutputSync;
   74                 entry InputSync while F2 = 1
   75                 begin
   76                                 null;
   77                 end InputSync;
   78         end Synchro;
   79 
   80 --ЗАЩИЩЕННЫЙ МОДУЛЬ OP_MZ
   81         protected body OP_MZ is
   82                 procedure SetMZ(M: in Matrix)
   83                 begin   
   84                         for i in 1 .. N loop
   85                     for j in 1 .. N loop
   86                        MZ(i)(j) := M(i)(j);
   87                     end loop;
   88                  end loop;      
   89                 end SetMZ;
   90 
   91                 function GetMZ return Matr
   92                 begin
   93                         return MZ;
   94                 end
   95         end OP_MZ;
   96 
   97 --ЗАЩИЩЕННЫЙ МОДУЛЬ OP_Alfa
   98         protected body OP_Alfa is
   99                 procedure SetAlfa(A: in integer)
  100                 begin   
  101                         Alfa := A;
  102                 end SetAlfa;
  103 
  104                 function GetAlfa return Integer
  105                 begin
  106                         return Alfa;
  107                 end
  108         end OP_Alfa;
  109 
  110 --ЗАЩИЩЕННЫЙ МОДУЛЬ OP_MR
  111         protected body OP_MR is
  112                 procedure SetMR(M: in Matrix)
  113                 begin   
  114                         for i in 1 .. N loop
  115                     for j in 1 .. N loop
  116                        MR(i)(j) := M(i)(j);
  117                     end loop;
  118                  end loop;      
  119                 end SetMR;
  120 
  121                 function GetMR return Matr
  122                 begin
  123                         return MR;
  124                 end
  125         end OP_MR;
  126 
  127 --ЗАДАЧИ--
  128         task T1;
  129         task T2;
  130         task T3;
  131         task T4;
  132 
  133 --ЗАДАЧА Т1 --------------------------
  134         task body T1 is
  135                 alfa1, Sum1, Sum2: Integer;
  136                 MZ1, MR1 : Matr;
  137         begin
  138                 Put_Line("T1 start");
  139 --1.    Ожидание ввода в задаче Т4
  140                 Synchro.InputSync;
  141 --2.    Копирование Alfa1:=Alfa, MZ1:=MZ, MR1:= MR     
  142                 Alfa1 := OP_Alfa.GetAlfa;
  143                 MZ1 := OP_MZ.GetMZ;
  144                 MR1 := OP_MR.GetMR;
  145 --3.    Счёт MAH = + MEH*MR1
  146                  for i in 1.. N loop
  147             for j in 1 .. H loop
  148                            sum1 := 0;
  149                            sum2 := 0;
  150                for z in 1 .. N loop
  151                   sum1 := sum1 + MB(Z)(J) * MZ1(I)(Z);
  152                                   sum2 := sum2 + ME(Z)(J) * MR1(I)(Z);
  153                end loop;
  154                            MA(I)(J) := Sum1 * Alfa1 + Sum2;
  155                            sum1 := 0;
  156                            sum2 := 0;
  157                         end loop;
  158          end loop;
  159 --4.    Ожидание окончания счёта от Т2, Т3, Т4
  160                 Synchro.OutputSync;           
  161 --5.    Вывод МА
  162                 Matr_Print(MA);                     
  163                 Put_Line("T1 stop");
  164     end T1;
  165 
  166 --ЗАДАЧА Т2 --------------------------
  167         task body T2 is
  168                 alfa2, Sum1, Sum2: Integer;
  169                 MZ2, MR2 : Matr;
  170         begin
  171                 Put_Line("T2 start");
  172 --1.    Ожидание ввода в задаче Т4      
  173                 Synchro.InputSync;
  174 --2.    Копирование Alfa2:=Alfa, MZ2:=MZ, MR2:=MR 
  175                 Alfa2 := OP_Alfa.GetAlfa;
  176                 MZ2 := OP_MZ.GetMZ;
  177                 MR2 := OP_MR.GetMR;     
  178 --3.    Счёт MAH = (MBH*MZ2*Alfa2) + MEH*MR2
  179                 for i in 1.. N loop
  180             for j in H+1 .. 2*H loop
  181                            sum1 := 0;
  182                            sum2 := 0;
  183                for z in 1 .. N loop
  184                   sum1 := sum1 + MB(Z)(J) * MZ2(I)(Z);
  185                                   sum2 := sum2 + ME(Z)(J) * MR2(I)(Z);
  186                end loop;
  187                            MA(I)(J) := Sum1 * Alfa2 + Sum2;
  188                            sum1 := 0;
  189                            sum2 := 0;
  190                         end loop;
  191          end loop;
  192 --4.    Сигнал задаче Т1 о конце счёта  
  193                 Synchro.CalcEndSignal;
  194 
  195                 Put_Line("T2 stop");
  196     end T2;
  197 
  198 --ЗАДАЧА Т2 --------------------------
  199         task body T3 is
  200                 alfa3, Sum1, Sum2: Integer;
  201                 MZ3, MR3 : Matr;
  202         begin
  203                 Put_Line("T3 start");
  204 --1.    Ожидание ввода в задаче Т4      
  205                 Synchro.InputSync;
  206 --2.    Копирование Alfa3:=Alfa, MZ3:=MZ, MR3:=MR 
  207                 Alfa3 := OP_Alfa.GetAlfa;
  208                 MZ3 := OP_MZ.GetMZ;
  209                 MR3 := OP_MR.GetMR;     
  210 --3.    Счёт MAH = (MBH*MZ3*Alfa3) + MEH*MR3
  211                 for i in 1.. N loop
  212             for j in 2*H+1 .. 3*H loop
  213                            sum1 := 0;
  214                            sum2 := 0;
  215                for z in 1 .. N loop
  216                   sum1 := sum1 + MB(Z)(J) * MZ3(I)(Z);
  217                                   sum2 := sum2 + ME(Z)(J) * MR3(I)(Z);
  218                end loop;
  219                            MA(I)(J) := Sum1 * Alfa3 + Sum2;
  220                            sum1 := 0;
  221                            sum2 := 0;
  222                         end loop;
  223          end loop;
  224 --4.    Сигнал задаче Т1 о конце счёта  
  225                 Synchro.CalcEndSignal;
  226 
  227                 Put_Line("T3 stop");
  228     end T3;     
  229 
  230 --ЗАДАЧА Т2 --------------------------
  231         task body T3 is
  232                 alfa4, Sum1, Sum2: Integer;
  233                 MZ4, MR4 : Matr;
  234         begin
  235                 Put_Line("T4 start");
  236 --1.    Ввод MB, MZ, ME, MR, Alfa
  237 --2.    Копирование Alfa4:=Alfa, MZ4:=MZ, MR4:=MR     
  238                 Matr_Input(MB);         
  239                 Matr_Input(MZ4);        
  240                 Matr_Input(ME); 
  241                 Matr_Input(MR4);        
  242                 Alfa4 := 1;
  243 
  244                 OP_Alfa.SetAlfa(Alfa4);
  245                 OP_Alfa.SetMR(MR4);
  246                 OP_Alfa.SetMZ(MZ4);
  247 --3.    Cигнал задачам Т1, Т2, Т3 о завершении ввода
  248                 Synchro.InputSignal;
  249 --4.    Счёт MAH = (MBH*MZ4*Alfa4) + MEH*MR4
  250                 for i in 1.. N loop
  251             for j in 3*H+1 .. N loop
  252                            sum1 := 0;
  253                            sum2 := 0;
  254                for z in 1 .. N loop
  255                   sum1 := sum1 + MB(Z)(J) * MZ4(I)(Z);
  256                                   sum2 := sum2 + ME(Z)(J) * MR4(I)(Z);
  257                end loop;
  258                            MA(I)(J) := Sum1 * Alfa4 + Sum2;
  259                            sum1 := 0;
  260                            sum2 := 0;
  261                         end loop;
  262          end loop;
  263 --5.    Сигнал задаче Т1 о конце счёта
  264                 Synchro.CalcEndSignal;
  265           
  266                 Put_Line("T4 stop");
  267     end T4;     
  268 
  269 begin
  270    null;
  271 end Lab1;
