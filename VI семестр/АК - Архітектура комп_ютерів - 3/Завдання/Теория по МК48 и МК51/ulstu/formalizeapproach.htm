<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="Template"
content="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Формализованный подход к разработке прикладных программ</title>
</head>

<body background="fill1816.gif" tppabs="http://ofap.ulstu.ru/res/REFER_BOOK_MK48&MK51/images/fill1816.gif" link="#0000FF"
vlink="#800080">

<p><a
name="Формализованный подход к разработке прикладных программ"><font
color="#000000" size="5"><strong></strong></font></a><font
color="#000000" size="5"><strong>1.Формализованный
подход к разработке прикладных
программ</strong></font></p>

<hr size="4" color="#000000">

<p align="left"><font size="4" face="Times New Roman">Если
целевая функция контроллера
сформулирована, т.е. задача на
разработку поставлена, то для
получения текста исходной
программы необходимо выполнить ряд
последовательных действий: </font></p>

<blockquote>
    <p align="left"><font size="4" face="Times New Roman">1)
    подробное описание задачи; </font></p>
    <p align="left"><font size="4" face="Times New Roman">2)
    анализ задачи; </font></p>
    <p align="left"><font size="4" face="Times New Roman">3)
    инженерную интерпретацию задачи,
    желательно с привлечением того
    или иного аппарата формализации
    (граф автомата, сети Петри,
    матрицы состояний и связности и
    т.п.);</font></p>
    <p align="left"><font size="4" face="Times New Roman">4)
    разработку общей блок-схемы
    алгоритма (БСА) работы
    контроллера; </font></p>
    <p align="left"><font size="4" face="Times New Roman">5)
    разработку детализированных БСА
    отдельных процедур, выделенных
    на основе модульного принципа
    составления программ; </font></p>
    <p align="left"><font size="4" face="Times New Roman">6)
    детальную проработку интерфейса
    контроллера и внесение
    исправлений в общую и
    детализированные БСА; </font></p>
    <p align="left"><font size="4" face="Times New Roman">7)
    распределение рабочих регистров
    и памяти МК; </font></p>
    <p align="left"><font size="4" face="Times New Roman">8)
    формирование текста исходной
    программы. </font></p>
</blockquote>

<p align="left"><font size="4" face="Times New Roman">В
результате работы по трем первым
пунктам данного перечня получают
так называемую функциональную
спецификацию прикладной про граммы
МК, в которой основное внимание
уделяется детализации способов
формирования входной и выходной
информации. </font></p>

<p align="left"><font size="4" face="Times New Roman">На
языке схем алгоритмов разработчик
описывает метод, выбранный для
решения поставленной задачи.
Довольно часто бывает, что одна и та
же задача может быть решена
различными методами. Способ
решения задачи, выбранный на этапе
ее инженерной интерпретации, на
основе которого формируется БСА,
определяет не только качество
разрабатываемой прикладной
программы, но и качественные
показатели конечного изделия. </font></p>

<p align="left"><font size="4" face="Times New Roman">Разработка
БСА очень похожа на разработку
аппаратурных средств систем
автоматики и обработки данных. В
основу разработки БСА положена та
же самая процедура модульного
проектирования, которая</font><font size="4">
</font><font size="4" face="Times New Roman">традиционно
используется разработчиками
аппаратурных средств Отличие
состоит в том, что при разработке
аппаратурных средств в качестве
&quot;строительного&quot; материала
используются логические схемы
триггеры, регистры и другие
интегральные элементы, а при
создании программного обеспечения
разработчик оперирует командами,
подпрограммами, таблицами и
другими программными объектами из
арсенала средств обработки данных. </font></p>

<p align="left"><font size="4" face="Times New Roman">Так
как алгоритм есть точно
определенная процедура,
предписывающая контроллеру
однозначно определенные действия
по преобразовании &quot;сырых&quot;
исходных данных в обработанные
выходные данные, то разработка БСА
требует предельной точности и
однозначности используемо”
атрибутики: символических имен
переменных, констант (уставок),
подпрограмм (модулей),
символических адресов таблиц,
портов ввода</font><font size="4">/</font><font
size="4" face="Times New Roman">вывода и т.п.
Основное внимание при разработке
БСА следует уделить тому разделу
функциональной спецификации
прикладной программы, в котором
приводится описание аппаратуры
сопряжения МК с объектом
управления. (Это описание для
успешной разработки программного
обеспечения должно быть
детализировано вплоть до
электрических и временных
характеристик каждого входного и
выходного сигнала или устройства.) </font></p>

<p align="left"><font size="4" face="Times New Roman">Секрет
успеха разработки прикладной
программы МК заключается в
использовании метода декомпозиции,
при котором вся задача
последовательно разделяется на
меньшие функциональные модули,
каждый из которых можно
анализировать, разрабатывать и
отлаживать отдельно от других. При
выполнении прикладной программы в
МК управление без всяких
двусмысленностей передается от
одного функционального модуля к
другому. Схема связности этих
функциональных модулей, каждый из
которых реализует некоторую
процедуру, образует общую (или
системную) БСА прикладной
программы. Это разделение задачи на
модули и субмодули выполняется
последовательно до такого уровня,
когда разработка БСА модуля
становится простым и понятным
делом. Метод последовательной
декомпозиции обладает достаточной
гибкостью, что позволяет привести
степень детализации БСА в
соответствие со сложностью
процедуры. Не следует стесняться
при выполнении декомпозиции дойти
до модулей, которые почти
тривиальны. Ведь именно эту цель
(получение очень простого и
&quot;прозрачного&quot; алгоритма
модуля) преследует разработчик,
когда он стремится заставить МК
надежно выполнять требуемую работу
по управлению объектом. Язык
графических образов БСА можно
использовать на любом уровне
детализации описания модулей
вплоть до того, что каждому
оператору БСА будет
соответствовать единственная
команда МК. </font></p>

<p align="left"><font size="4" face="Times New Roman">Структурное
программирование есть процесс
построения прикладной программы из
строгого набора программных
модулей, каждый из которых
реализует определенную процедуру
обработки данных. Программные
модули должны иметь только одну
точку входа и одну точку выхода.
Только в этом случае отдельные
модули можно разрабатывать
отлаживать независимо, а затем
объединять в законченную
прикладную программу с
минимальными проблемами их
взаимосвязей. Источником
подавляющего большинства ошибок
программирования является
использование модулей, имеющих
один вход и несколько выходов. При
необходимости организации
множественных ветвлений в
программе декомпозицию задачи
выполняют таким образом, чтобы
каждый функциональный модуль имел
только один вход и один выход. Для
этого условные операторы (имеющие
два выхода) или включают внутрь
модуля, объединяя их с операторами
обработки, или выносят в систему
межмодульных связей, формируя тем
самым БСА более высокого ранга. </font></p>

<p align="left"><font size="4" face="Times New Roman">В
международном стандарте на
программный продукт HIPO
(Hierarchy-Input-Process-Output) (&quot;хай-по&quot;)
декларируется аналогичный подход к
разработке прикладных программ. </font></p>

<p align="left"><font size="4" face="Times New Roman">Разработка
БСА функционального модуля
программы имеет ярко выраженный
итеративный характер, т.е. требует
многократных проб, прежде чем
возникает уверенность, что
алгоритм реализации процедуры
правильный и завершенный. Вне
зависимости от функционального
назначения процедуры при
разработке ее БСА необходимо
придерживаться следующей
очередности работы: </font></p>

<blockquote>
    <p align="left"><font size="4">1. </font><font size="4"
    face="Times New Roman"><b><i>Определить, что
    должен делать модуль</i></b> (это уже
    было сделано при разработке
    системной БСА, но теперь
    разработчик имеет дело с
    фрагментом прикладной программы,
    а не с целой программой, и,
    следовательно, может
    потребоваться доопределение и
    уточнение целевого назначения
    процедуры). </font></p>
    <p align="left"><font size="4">2. </font><font size="4"
    face="Times New Roman"><b><i>Определить
    способы получения модулем
    исходных данных</i></b> (от датчиков
    через порты ввода, или из таблиц в
    памяти, или через рабочие
    регистры). Для реализации ввода
    исходных данных в модуль в его
    БСА надо включить
    соответствующие операторы. 3</font><font
    size="4">. </font><font size="4" face="Times New Roman"><b><i>Определить
    необходимость какой-либо
    предварительной обработки</i></b>
    введенных исходных данных
    (маскирование, сдвиг,
    масштабирование, перекодировка).
    Если до использования
    &quot;сырых&quot; данных требуется их
    предобработка, то в состав БСА
    включаются соответствующие
    операторы. </font></p>
    <p align="left"><font size="4">4. </font><font size="4"
    face="Times New Roman"><b><i>Определить
    способ преобразования входных
    данных</i></b> в требуемые выходные.
    Используя операторы процедур и
    условные операторы принятия
    решения, отобразить на языке БСА
    выбранный метод содержательной
    обработки исходных данных. </font></p>
    <p align="left"><font size="4">5. </font><font size="4"
    face="Times New Roman"><b><i>Определить
    способы выдачи из модуля
    обработанных данных</i></b>
    (передать в память, или в
    вызывавшую программу, или в порты
    вывода информации). Необходимые
    действия отобразить в БСА. </font></p>
    <p align="left"><font size="4">6. </font><font size="4"
    face="Times New Roman"><b><i>Определить
    необходимость какой-либо
    постобработки выводимых данных</i></b>
    (изменение формата,
    перекодирование,
    масштабирование, маскирование).
    Ввести в БСА операторы
    подготовки данных для вывода из
    модуля. </font></p>
    <p align="left"><font size="4" face="Times New Roman">7.
    Вернуться к п. 1 настоящего
    перечня работ и <b><i>проанализировать
    полученный результат</i></b>.
    Выполнить итеративную
    корректировку БСА с целью
    сделать ее простой, логичной,
    стройной и обладающей четким
    графическим образом.</font></p>
    <p align="left"><font size="4">8. </font><font size="4"
    face="Times New Roman"><b><i>Проверить
    работоспособность алгоритма на
    бумаге</i></b> путем подстановки в
    него действительных данных.
    Убедиться в его сходимости и
    результативности. </font></p>
    <p align="left"><font size="4">9. </font><font size="4"
    face="Times New Roman"><b><i>Рассмотреть
    предельные случаи</i></b> и
    попытаться определить граничные
    значения информационных
    объектов, с которыми оперирует
    алгоритм, за пределами которых он
    теряет свойства конечности,
    сходимости или результативности.
    (Особое внимание при этом следует
    уделить анализу возможных
    ситуаций переполнения разрядной
    сетки МК, изменения знака
    результата операции, деления на
    переменную, которая может
    принять нулевое значение.) </font></p>
    <p align="left"><font size="4">10. </font><font size="4"
    face="Times New Roman"><b><i>Провести
    мысленный эксперимент по
    определению работоспособности
    алгоритма в реальном масштабе
    времени</i></b>, когда
    стохастические события,
    происходящие в объекте
    управления, могут оказать
    влияние на работу алгоритма. При
    этом самому тщательному анализу
    следует подвергнуть реакцию
    алгоритма на возможные
    прерывания с целью определения
    критических операторов, которые
    необходимо защитить от
    прерываний. Кроме того, в ходе
    этого мысленного эксперимента
    следует проанализировать логику
    алгоритма с целью определения
    таких последовательностей
    операторов, при выполнении
    которых МК</font><font size="4"> </font><font
    size="4" face="Times New Roman">может &quot;не
    заметить&quot; кратковременных
    событий в объекте управления. При
    обнаружении таких ситуаций в
    логику БСА следует внести
    коррективы. </font></p>
</blockquote>

<p align="left"><font size="4" face="Times New Roman">Практика
разработки программного
обеспечения для МК показала, что <b><i>последовательное
использование описанной поэтапной
процедуры проектирования
алгоритмов, составляющей основу
метода структурного
программирования, позволяет
уверенно получать работоспособные
прикладные программы.</i></b></font><font
size="4"> </font><font size="4" face="Times New Roman">Дисциплинированное
следование этой поэтапной
процедуре проектирования
прикладных программ обеспечивает
успех проекта! В противном случае
&quot;Вы рискуете заболеть страшным
программным заболеванием, которое
называется &quot;вползающие
особенности&quot;. Эта инфекция
возникает, когда неадекватная
спецификация задачи позволяет
вползать в программу организмам,
называемым &quot;изящные
особенности&quot;. Те изменения,
которые легко учесть на этапе
планирования, могут потребовать
огромных усилий на этапе
реализации программы. Болезнь эта к
моменту обнаружения становится уже
серьезной и привела к фатальному
концу много программных проектов
&quot;. Чаще всего носителями этой
болезни являются профессиональные
программисты, которые способны
заразить ею программирующих
профессионалов. Если Вы стали
жертвой &quot;вползающих
особенностей&quot;, то должны или
начать заново разрабатывать
функциональную спецификацию
программного обеспечения, или быть
готовыми к исключительно высоким
трудозатратам на этапе отладки
прикладной программы. </font></p>

<p align="left"><font size="4" face="Times New Roman">Преобразование
разработанной БСА в исходный текст
программы </font><font size="4">–</font><font size="4"
face="Times New Roman"> дело несложное. Но
прежде чем приступить к написанию
программы, необходимо
специфицировать память и выбрать
язык программирования. </font></p>

<p align="left"><font size="4" face="Times New Roman">Спецификация
памяти (и рабочих регистров)
заключается в определении адреса
первой команды прикладной
программы, действительных</font><font
size="4"> </font><font size="4" face="Times New Roman">начальных
адресов стека, таблиц данных,
буферных зон передачи параметров
между процедурами, подпрограмм
обслуживания прерываний и т.д. При
этом следует помнить, что в МК
память программ и память данных
физически и логически разделены. </font></p>

<p align="left"><font size="4" face="Times New Roman">Диапазон
языков написания исходного текста
прикладной программы простирается
от машинного кода до почти
естественного языка. В машинном
коде или на языке ассемблера
программировать труднее и дольше,
чем на алгоритмическом языке
высокого уровня, но зато получается
более короткий код программы,
требуется меньшая емкость памяти
программы и выполняется такая
программа быстрее. Объектные коды,
полученные путем трансляции
исходных программ, написанных на
алгоритмическом языке высокого
уровня, занимают в памяти
МК-системы много больше места и
требуют большего времени на
исполнение. Выбор языковых средств
составления исходных программ в
каждом конкретном применении
зависит от характеристик
прикладной задачи, опыта
программиста и допустимых затрат
на разработку. </font></p>

<p align="left"><font size="4" face="Times New Roman">По
нашему мнению, огромное
большинство прикладных задач
управления объектами вследствие
того, что они должны решаться в
реальном времени, предъявляет
столь высокие требования по
быстродействию, что для их решения
основным языковым средством
написания прикладных программ еще
долгие годы будет оставаться язык
ассемблера. Это положение о
преимущественном использовании
языка ассемблера подкрепляется и
тем обстоятельством, что
однокристальные МК имеют
ограниченный объем РПП и,
следовательно, критичны к длине
прикладных программ. </font></p>

<p>&nbsp;</p>

<p><a
href="#формализованный подход к разработке прикладных программ"><font
color="#0000FF" size="4">Формализованный
подход к разработке прикладных
программ</font></a></p>

<hr size="4" color="#008000">
<div align="center"><center>

<table border="0" cellpadding="30" cellspacing="0">
    <tr>
        <td><p align="center"><a href="strategyofdevelop.htm" tppabs="http://ofap.ulstu.ru/res/REFER_BOOK_MK48&MK51/strategyofdevelop.htm"><font
        color="#0000FF" size="4">Методика
        разработки прикладного
        программного обеспечения
        МК-систем</font></a></p>
        </td>
        <td valign="top"><p align="center"><a href="start.htm" tppabs="http://ofap.ulstu.ru/res/REFER_BOOK_MK48&MK51/start.htm"><font
        color="#0000FF" size="4">Первая страница</font></a></p>
        </td>
    </tr>
</table>
</center></div>
</body>
</html>
