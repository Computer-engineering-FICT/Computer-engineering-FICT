<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=windows-1251">
<meta name="Template"
content="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Элементы формализации в разработке алгоритмов</title>
</head>

<body background="fill1816.gif" tppabs="http://ofap.ulstu.ru/res/REFER_BOOK_MK48&MK51/images/fill1816.gif" link="#0000FF"
vlink="#800080">

<p><a
name="Элементы формализации в разработке алгоритмов"></a><font
color="#000000" size="5"><strong>2. Элементы
формализации в разработке
алгоритмов</strong></font></p>

<hr size="4" color="#000000">

<p align="left"><font size="4" face="Times New Roman">Процесс
творческого освоения технических
возможностей МК может быть
облегчен тем, что на начальном
этапе проектирования МК-систем
можно с успехом использовать
некоторые формализованные приемы
синтеза комбинационных схем и
цифровых автоматов на интегральных
элементах.</font></p>

<p align="left"><font size="4" face="Times New Roman">К
настоящему времени
формализованные методы
проектирования комбинационных и
последовательностных (автоматных)
схем на интегральных элементах
низкой степени интеграции получили
широкое теоретическое развитие и
практическое применение.
Справедливости ради необходимо
отметить, что в связи с ростом
степени интеграции элементов, с
приобретением ими свойств
полифункциональности и
программной перенастройки
возможная область применения
формализованных методов синтеза
схем постоянно сужается. Эти
формализованные методы не могут
быть непосредственно применены для
проектирования систем на основе МК,
так как сам МК является
программно-управляемым автоматом с
жесткой структурой и однозначно
кодированной системой состояний и
команд. Однако некоторые
классические приемы
проектирования &quot;схемной
логики&quot; могут быть применены для
разработки МК-систем. К таким
приемам относятся прежде всего
методы минимизации булевых функций
и автоматных таблиц
переходов/выходов, методы описания
работы последовательностных
устройств на языке графов
автоматов Мили и/или Мура.</font></p>

<p align="left"><font size="4" face="Times New Roman"><b>Булевы
функции.</b> Законы функционирования
отдельных устройств системы в
процессе их разработки часто
описывают на языке булевых функций
или на языке релейно-контактных
схем. Такие устройства реализуются
на основе схем комбинационной
логики (чаще всего с использованием
интегральных схем серии ТТЛ) или на
основе релейной логики. Все эти
устройства могут быть с успехом
реализованы программными
средствами в МК. При этом следует
иметь в виду, что программная
реализация булевых функций в
отличие от их реализации на
комбинационных схемах, как правило,
не требует дополнительной
аппаратуры, но сопряжена с потерей
быстродействия.</font></p>

<p align="left"><font size="4" face="Times New Roman">В
качестве примера рассмотрим
комбинационную схему, показанную
на </font><a href="#рис.4.1"><font color="#FF0000" size="4">рис.
4.1</font></a><font size="4" face="Times New Roman"> и
реализующую булеву функцию от
шести переменных</font></p>

<p align="center"><font size="4" face="Times New Roman">F= (А /\
(В \/ C)</font><font size="4">)</font><font size="4"
face="Times New Roman"> \/ (E /\ </font><font size="5"><sup><b>¬</b></sup></font><font
size="4">H) \/ </font><font size="5"><sup><b>¬</b></sup></font><font
size="4">L.</font></p>

<p align="center"><a name="рис.4.1"></a></p>

<p align="center"><img src="shembul_4_1.gif" tppabs="http://ofap.ulstu.ru/res/REFER_BOOK_MK48&MK51/images/shembul_4_1.gif" border="2"
width="250" height="150"></p>

<p align="left"><font color="#000000" size="4">Предположим,
что группа датчиков объекта
управления генерирует для МК пять
независимых двоичных сигналов: А и
В от двух концевых переключателей;
С, Е и Н - три бита от 3-позиционного
переключателя, установленного на
пульте управления оператора. Пусть
шестая переменная L – это флаг
некоторого программного признака,
например признака не прохождения
теста. Выходной сигнал F через порт
подается на реле исполнительного
механизма.</font></p>

<p align="left"><font size="4" face="Times New Roman">Сигналы
от указанных датчиков подаются в
строго определенные биты
некоторого порта ввода информации.
Следовательно, в процессе
программной реализации заданной
булевой функции необходимо после
операции ввода обеспечить серию
проверок состояния отдельных бит
введенного байта и формирование
значения выходного сигнала F.</font></p>

<p align="left"><font size="4" face="Times New Roman">На </font><a
href="#рис.4.2"><font color="#FF0000" size="4">рис. 4.2</font></a><font
size="4" face="Times New Roman"> показана схема
алгоритма программной реализации
заданной булевой функции,
учитывающая последовательность
проверок, которая определяется
скобочной формой записи функции F.
Заметим, что при программной
реализации булевых функций
практически нет никаких
ограничений на число переменных.
Однако с ростом числа переменных
возрастает время задержки
формирования выходного сигнала F.</font></p>

<p align="center"><a name="рис.4.2"></a></p>

<p align="center"><img src="progrelbul_4_2.gif" tppabs="http://ofap.ulstu.ru/res/REFER_BOOK_MK48&MK51/images/progrelbul_4_2.gif" border="2"
width="420" height="330"></p>

<p align="center"><font size="4" face="Times New Roman"><b>Рис.
</b></font><font size="4"><b>4</b></font><font size="4"
face="Times New Roman"><b>.2. Программная
реализация булевой функции</b></font></p>

<p align="left">&nbsp;</p>

<p align="left"><font size="4" face="Times New Roman"><b>Граф
автомата.</b> Законы
функционирования
последовательностных схем
задаются или таблицами
переходов/выходов или в виде графа
(диаграммы состояний) автомата.
Переход от графа проектируемого
МК-устройства к БСА является
ключевым этапом методики,
позволяющим отобразить таблицы
состояний и входов/выходов
автомата на систему команд
используемого МК.</font></p>

<p align="left"><font size="4" face="Times New Roman">Сравнив
фрагменты графа автомата Мили
(автомат Мура здесь не
рассматривается, так как эти две
модели автомата однозначно
связаны) и фрагмент БСА, показанные
на </font><a href="#рис.4.3"><font color="#FF0000" size="4">рис.
4.3</font></a><font size="4" face="Times New Roman">, можно
заметить, что они эквивалентны.</font></p>

<p align="center"><a name="рис.4.3"></a></p>

<p align="center"><font size="4" face="Times New Roman"><img
src="graphandbsa_4_3.gif" tppabs="http://ofap.ulstu.ru/res/REFER_BOOK_MK48&MK51/images/graphandbsa_4_3.gif" border="2" width="290"
height="250"></font></p>

<p align="left"><font size="4" face="Times New Roman">Здесь
Х и Z – двоичные векторы,
принадлежащие множествам наборов
входных { x } и выходных { z } сигналов,
a Q – состояния автомата из
множества возможных состояний { q }.
Состояние автомата Q; и выходной
вектор Z, являются функциями
предыдущего автоматного состояния
Q</font><font size="4"><sub>i-1</sub></font><font size="4"
face="Times New Roman"> и текущего входного
вектора X. Операторные
прямоугольники в БСА могут быть
интерпретированы как вершины
(устойчивые состояния) графа
автомата, а условные операторы –
как дуги графа X</font><font size="4"><sub>i</sub>/Z<sub>i</sub></font><font
size="4" face="Times New Roman">, т.е. переходы к
иному автоматному состоянию. При
этом операторный прямоугольник
представляет собой фрагмент
программы. В течение всего периода
устойчивого состояния Q</font><font size="4"><sub>i</sub></font><font
size="4" face="Times New Roman"> выходной вектор Z</font><font
size="4"><sub>i</sub></font><font size="4" face="Times New Roman">
остается неизменным до тех пор,
пока не изменит своего значения
входной вектор X</font><font size="4"><sub>i</sub></font><font
size="4" face="Times New Roman">. Для этого в
течение устойчивого состояния Q</font><font
size="4"><sub>i</sub></font><font size="4" face="Times New Roman">
условные операторы алгоритма
программной реализации автомата
селектируют (с заданным периодом
дискретизации) изменение входного
вектора X), если оно произошло под
воздействием внешних (по отношению
к МК) событий. В результате
установления факта изменения
вектора X</font><font size="4"><sub>i</sub></font><font
size="4" face="Times New Roman"> контроллер
переходит к новому
&quot;устойчивому&quot; автоматному
состоянии Q</font><font size="4"><sub>i+1</sub></font><font
size="4" face="Times New Roman"> и генерирует
новый выходной вектор Z</font><font size="4"><sub>i+1</sub></font><font
size="4" face="Times New Roman">, значения
которого полностью определены
графом автомата.</font></p>

<p align="left"><font size="4" face="Times New Roman">Так
как любой оператор БСА может быть
представлен последовательностью
команд МК, то дальнейшие действия
по разработке прикладных программ
для МК-системы представляют собой
трансляцию (отображение алгоритма
на систему команд МК), в результате
которой формируется исходный текст
прикладной программы.</font></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><a
href="#элементы формализации в разработке алгоритмов"><font
color="#0000FF" size="4">Элементы
формализации в разработке
алгоритмов</font></a></p>

<hr size="4" color="#008000">
<div align="center"><center>

<table border="0" cellpadding="30" cellspacing="0">
    <tr>
        <td><p align="center"><a href="strategyofdevelop.htm" tppabs="http://ofap.ulstu.ru/res/REFER_BOOK_MK48&MK51/strategyofdevelop.htm"><font
        color="#0000FF" size="4">Методика
        разработки прикладного
        программного обеспечения
        МК-систем</font></a></p>
        </td>
        <td valign="top"><p align="center"><a href="start.htm" tppabs="http://ofap.ulstu.ru/res/REFER_BOOK_MK48&MK51/start.htm"><font
        color="#0000FF" size="4">Первая страница</font></a></p>
        </td>
    </tr>
</table>
</center></div>
</body>
</html>
