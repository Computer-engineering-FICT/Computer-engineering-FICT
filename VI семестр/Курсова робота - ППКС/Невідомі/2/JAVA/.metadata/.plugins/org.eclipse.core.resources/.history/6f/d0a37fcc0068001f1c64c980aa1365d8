
public class Tasks extends Thread {
	Monitor m;
	int tid;
	long start, finish;
	public Tasks(Monitor m1, int id) {
		m = m1;
		tid = id;
	}
	
	private int[][] mm1;
	private int[] b1, c1;
	public void run(){
		start = System.currentTimeMillis();
		System.out.println("Task "+ (tid+1) + " started");
		mm1 = new int[m.N][m.N];
		b1 = new int[m.N];
		c1 = new int[m.N];
		if(tid == 0){
			for(int i = 0; i < m.N; i ++)
				for(int j = 0; j < m.N; j ++){
					m.MX[i][j] = 1;
					mc1[i][j] = 1;
				}
			m.Write_Mc(mc1);
			m.Signal_Input();
		}
		
		if(tid == m.P-1){
			for(int i = 0; i < m.N; i ++)
				for(int j = 0; j < m.N; j ++){
					m.MO[i][j] = 1;
					mz1[i][j] = 1;
				}
			m.Write_Mz(mz1);
			m.Signal_Input();
		}
		
		m.Wait_Input();
		
		mc1 = m.Copy_MC();
		mz1 = m.Copy_MZ();

		for (int i = 0; i < m.N; i ++){
        	for(int j=(tid)*m.H; j<((tid+1)*m.H); j++){
        		for(int k = 0; k < m.N; k ++){
        			m.Mbuf[i][j] = m.Mbuf[i][j] + mz1[i][k] * m.MO[k][j];
        		}
        	}
        }
        
		for (int i = 0; i < m.N; i ++){
        	for(int j=(tid)*m.H; j<((tid+1)*m.H); j++){
        		for(int k = 0; k < m.N; k ++){
        			m.MA[i][j] = m.MA[i][j] + mc1[i][k] * m.Mbuf[k][j];
        		}
        		m.MA[i][j] += m.MB[i][j];
        	}
        }
		
		m.Signal_Count();
		if(tid == 0){
			m.Wait_Count();
			if(m.N < 20){
				for(int i = 0; i < m.N; i ++){
					for(int j = 0; j < m.N; j ++)
						System.out.print(m.MA[i][j]+" ");
					System.out.println();
				}
			}
			finish = System.currentTimeMillis();
			System.out.println("Time = " + (finish - start)/1000.0);
		}
		
		System.out.println("Task "+ (tid+1) + " finished");
	}
}
