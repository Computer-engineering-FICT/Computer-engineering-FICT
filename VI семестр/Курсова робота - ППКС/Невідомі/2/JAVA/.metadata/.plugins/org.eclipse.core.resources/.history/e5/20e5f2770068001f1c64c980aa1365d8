public class Monitor {
	int N = 4;
	int P = 2;
	int H = N / P;

	private int MM[][] = new int[N][N];
	private int B[] = new int[N];
	private int C[] = new int[N];

	public int A[] = new int[N];
	public int MX[][] = new int[N][N];
	public int MC[][] = new int[N][N];
	public int buf1[][] = new int[N][N];

	private int F1 = 0;
	private int F2 = 0;
	private int F3 = 0;
	private int F4 = 0;

	public synchronized int[][] CopyMM() {
		return MM;
	}

	public synchronized int[] CopyB() {
		return B;
	}
	
	public synchronized int[] CopyC() {
		return C;
	}

	public synchronized void Write(int[] Bb, int[][] MMm) {
		for (int i = 0; i < N; i++){
			for (int j = 0; j < N; j++)
				MM[i][j] = MMm[i][j];
			B[i] = Bb[i];
		}
	}
	
	synchronized void Write_C(int[] C1, int i, int j) {
		for (int k = i; k < j; k ++)
			C[k] = C1[k];
	}

	public synchronized void WaitInput() {
		try {
			if (F1 != 2)
				wait();
		} catch (Exception e) {
		}
	}

	public synchronized void SignalInput() {
		F1 = F1 + 1;
		if (F1 == 2)
			notifyAll();
	}

	public synchronized void WaitCalc() {
		try {
			if (F2 != P)
				wait();
		} catch (Exception e) {
		}
	}

	public synchronized void SignalCalc() {
		F2 = F2 + 1;
		if (F2 == P)
			notifyAll();
	}
	
	public synchronized void WaitCalcMax() {
		try {
			if (F3 != P)
				wait();
		} catch (Exception e) {
		}
	}

	public synchronized void SignalCalcMax() {
		F3 = F3 + 1;
		if (F3 == P)
			notifyAll();
	}
	
	public synchronized void WaitWrite() {
		try {
			if (F4 != 1)
				wait();
		} catch (Exception e) {
		}
	}

	public synchronized void SignalWrite() {
		F4 = F4 + 1;
		if (F4 == 1)
			notifyAll();
	}
}