GNAT GPL 2017 (20170515-63)
Copyright 1992-2017, Free Software Foundation, Inc.

Compiling: data.adb
Source file time stamp: 2017-06-08 21:49:16
Compiled at: 2017-06-09 00:52:24

     1.
     2. -------------------------------------------------------------------------------
     3. --                                                                           --
     4. --                   Parallel and Distributed Computing                      --
     5. --                   Laboratory work #7. Ada. Rendezvous                     --
     6. --                                                                           --
     7. --  File: main.adb                                                           --
     8. --  Task: MA = max(Z)*MO + d * (MX * MS)                                     --
     9. --                                                                           --
    10. --  Author: Krut Vladyslav, group IO-43                                      --
    11. --  Date: 08.06.2017                                                         --
    12. --                                                                           --
    13. -------------------------------------------------------------------------------
    14.
    15. with Ada.Text_IO, Ada.Integer_Text_IO;
    16. use Ada.Text_IO, Ada.Integer_Text_IO;
    17.
    18. package body Data is
    19.
    20.    procedure Input (V : out Vector; Value : Integer) is
    21.    begin
    22.       for I in 1..N loop
    23.          V(I):= Value;
    24.       end loop;
    25.    end Input;
    26.
    27.
    28.    procedure Input (MA : out Matrix; Value : Integer) is
    29.    begin
    30.       for I in 1..N loop
    31.          for J in 1..N loop
    32.             MA(I)(J):= Value;
    33.          end loop;
    34.       end loop;
    35.    end Input;
    36.
    37.    procedure Output (V : in Vector) is
    38.    begin
    39.       New_Line;
    40.       for I in 1..V'Last loop
    41.          Put(Item => V(I), Width => 6);
    42.       end loop;
    43.       New_Line;
    44.    end Output;
    45.
    46.
    47.    procedure Output (MA : in Matrix) is
    48.    begin
    49.       New_Line;
    50.       for I in 1..MA'Last loop
    51.          for J in 1..N loop
    52.             Put(Item => MA(i)(j), Width => 6);
    53.          end loop;
    54.          New_line;
    55.       end loop;
    56.       New_Line;
    57.    end Output;
    58.
    59.    procedure FindMaxZ (V : in Vector; maxZi : out Integer) is
    60.       maxBuf : Integer;
    61.    begin
    62.       maxBuf :=-99999;
    63.       for i in V'Range loop
    64.
    65.          if maxBuf < V(i) then
    66.             maxBuf := V(i);
    67.          end if;
    68.       end loop;
    69.       maxZi:=maxBuf;
    70.    end FindMaxZ;
    71.
    72.    function Max (A, B: Integer) return Integer is
    73.    begin
    74.       if A >= B then
    75.          return A;
    76.       else
    77.          return B;
    78.       end if;
    79.    end Max;
    80.
    81.    procedure Calculation(d : in Integer;
    82.                          maxZ : in Integer;
    83.                          MO : in MatrixN;
    84.                          MX : in MatrixN;
    85.                          MS : in MatrixN;
    86.                          MA : out MatrixN) is
    87.       Sum : Integer := 0;
    88.       Sum1 : Integer := 0;
    89.       BufferMatrix : MatrixN;
    90.    begin
    91.        Input(BufferMatrix, 0);
    92.
    93.       for i in 1..N loop
    94.          for j in 1..N loop
    95.             for k in 1..N loop
    96.                BufferMatrix(i)(j) := BufferMatrix(i)(j) + MX(i)(k) * MS(k)(j);
    97.             end loop;
    98.          end loop;
    99.       end loop;
   100.
   101.       for i in 1..N loop
   102.          for j in 1..N loop
   103.             MA(i)(j) := maxZ * MO(i)(j) + d * BufferMatrix(i)(j);
   104.          end loop;
   105.       end loop;
   106.
   107.    end Calculation;
   108.
   109. end Data;

Compiling: data.ads
Source file time stamp: 2017-06-08 21:49:34
Compiled at: 2017-06-09 00:52:24

     1.
     2. -------------------------------------------------------------------------------
     3. --                                                                           --
     4. --                   Parallel and Distributed Computing                      --
     5. --                   Laboratory work #7. Ada. Rendezvous                     --
     6. --                                                                           --
     7. --  File: main.adb                                                           --
     8. --  Task: MA = max(Z)*MO + d * (MX * MS)                                     --
     9. --                                                                           --
    10. --  Author: Krut Vladyslav, group IO-43                                      --
    11. --  Date: 08.06.2017                                                         --
    12. --                                                                           --
    13. -------------------------------------------------------------------------------
    14.
    15.
    16. with Ada.Text_IO;
    17. use Ada.Text_IO;
    18.
    19. generic
    20.
    21.    N, H : in Natural;
    22.
    23. package Data is
    24.
    25.    type Vector is array(Integer range <>) of Integer;
    26.    Subtype VectorN is Vector(1..N);
    27.    Subtype Vector7H is Vector(1..7 * H);
    28.    Subtype Vector6H is Vector(1..6 * H);
    29.    Subtype Vector5H is Vector(1..5 * H);
    30.    Subtype Vector4H is Vector(1..4 * H);
    31.    Subtype Vector3H is Vector(1..3 * H);
    32.    Subtype Vector2H is Vector(1..2 * H);
    33.    Subtype Vector1H is Vector(1..1 * H);
    34.
    35.    type Matrix is array(Integer range <>) of VectorN;
    36.    Subtype MatrixN is Matrix(1..N);
    37.    Subtype Matrix7H is Matrix(1..7 * H);
    38.    Subtype Matrix6H is Matrix(1..6 * H);
    39.    Subtype Matrix5H is Matrix(1..5 * H);
    40.    Subtype Matrix4H is Matrix(1..4 * H);
    41.    Subtype Matrix3H is Matrix(1..3 * H);
    42.    Subtype Matrix2H is Matrix(1..2 * H);
    43.    Subtype Matrix1H is Matrix(1..1 * H);
    44.
    45.
    46.    procedure Input ( V : out Vector; Value : in Integer);
    47.
    48.    procedure Input ( MA : out Matrix; Value : in Integer);
    49.
    50.    procedure Output (V : in Vector);
    51.
    52.    procedure Output (MA : in Matrix);
    53.
    54.    procedure FindMaxZ (V : in Vector; maxZi : out Integer);
    55.
    56.    function Max (A, B: Integer) return Integer;
    57.
    58.    procedure Calculation(d : in Integer;
    59.                          maxZ : in Integer;
    60.                          MO : in MatrixN;
    61.                          MX : in MatrixN;
    62.                          MS : in MatrixN;
    63.                          MA : out MatrixN);
    64.
    65.
    66. end Data;

 109 lines: No errors
