;                     ЛИСТИНГ 3.2
;      Процедуры ввода/вывода общего назначения
;             для работы текстовом режиме
;
; Автор текста программы Кулаков Владимир Геннадьевич.
; Файл lst03_02.inc, 30.01.2001.

DATASEG
; Цвет и фон выводимого текста (по умолчанию установим
; вывод белого текста по черному фону)
TextColorAndBackground DB 0Fh
; Начальная позиция для вывода текстовой строки на экран
ScreenString DW ?
ScreenColumn DW ?
ENDS


CODESEG
;**************************************************
;*        ВЫВОД ТЕКСТОВОГО СИМВОЛА НА ЭКРАН       *
;* Подпрограмма выводит содержимое регистра AL    *
;* в ASCII-коде в заданную позицию экрана.        *
;* Координаты позиции передаются через глобальные *
;* переменные ScreenString и ScreenColumn.        *
;**************************************************
PROC ShowChar near
        pusha
        push    DS
        push    ES
; Настроить DS на глобальный сегмент данных
        mov     DI,DGROUP
        mov     DS,DI
; Настроить пару ES:DI для прямого вывода в видеопамять
        push    AX
        ; Загрузить адрес сегмента видеоданных в ES
        mov     AX,0B800h
        mov     ES,AX
        ; Умножить номер строки на длину строки в байтах
        mov     AX,[ScreenString]
        mov     DX,160
        mul     DX
        ; Прибавить к полученному произведению номер
        ; колонки (дважды)
        add     AX,[ScreenColumn]
        add     AX,[ScreenColumn]
        ; Переписать результат в индексный регистр
        mov     DI,AX
        pop     AX
; Использовать цвет символов, заданный по умолчанию
        mov     AH,[TextColorAndBackground]
        mov     [ES:DI],AX
@@End:  pop     ES
        pop     DS
        popa
        ret
ENDP ShowChar

           
;*******************************************************
;*    ВЫВОД БАЙТА НА ЭКРАН В ШЕСТНАДЦАТЕРИЧНОМ КОДЕ    *
;* Подпрограмма выводит содержимое регистра AL         *
;* в шестнадцатеричном коде в заданную позицию экрана. *
;* Координаты позиции передаются через глобальные      *
;* переменные ScreenString и ScreenColumn. После       *
;* выполнения операции вывода происходит автомати-     *
;* ческое приращение значений этих переменных.         *
;*******************************************************
PROC ShowHexByte near
        pusha
        push    DS
        push    ES
; Настроить DS на глобальный сегмент данных
        mov     DI,DGROUP
        mov     DS,DI
        cld

; Настроить пару ES:DI для прямого вывода в видеопамять
        push    AX
        ; Загрузить адрес сегмента видеоданных в ES
        mov     AX,0B800h
        mov     ES,AX
        ; Умножить номер строки на длину строки в байтах
        mov     AX,[ScreenString]
        mov     DX,160
        mul     DX
        ; Прибавить к полученному произведению номер
        ; колонки (дважды)
        add     AX,[ScreenColumn]
        add     AX,[ScreenColumn]
        ; Переписать результат в индексный регистр
        mov     DI,AX
        pop     AX

; Использовать цвет символов, заданный по умолчанию
        mov     AH,[TextColorAndBackground]
; Вывести старший разряд числа 
        push    AX
        ; Выделить старший разряд
        shr     AL,4
        ; Преобразовать старший разряд в код ASCII
        add     AL,'0'
        cmp     AL,'9'
        jbe     @@M0
        add     AL,'A'-'9'- 1
        ; Вывести разряд числа на экран
@@M0:   stosw
        pop     AX
; Вывести младший разряд числа 
        ; Выделить младший разряд числа
        and     AL,0FH
        ; Преобразовать младший разряд в код ASCII
        add     AL,'0'
        cmp     AL,'9'
        jbe     @@M1
        add     AL,'A'-'9'- 1
        ; Вывести разряд числа на экран
@@M1:   stosw

; Подготовка для вывода следующих байтов
        ; Перевести текущую позицию на 2 символа влево
        add     [ScreenColumn],2
        ; Проверить пересечение правой границы экрана
        cmp     [ScreenColumn],80
        jb      @@End
        ; Если достигнута правая граница экрана -
        ; перейти на следующую строку
        sub     [ScreenColumn],80
        inc     [ScreenString]
@@End:  pop     ES
        pop     DS
        popa
        ret
ENDP ShowHexByte


;*****************************************************
;*         ВЫВОД 16-РАЗРЯДНОГО СЛОВА НА ЭКРАН        *
;*              В ШЕСТНАДЦАТЕРИЧНОМ КОДЕ             *
;* Параметры:                                        *
;* AX - число, которое будет выведено на экран.      *
;* Номер строки передается через глобальную          *
;* переменную ScreenString, номер столбца - через    *
;* переменную ScreenColumn, цвет текста определяется *
;* глобальной переменой TextColorAndBackground.      *
;*****************************************************
PROC ShowHexWord NEAR
        xchg    AL,AH
        call    ShowHexByte
        xchg    AL,AH
        call    ShowHexByte
        ret
ENDP ShowHexWord


;*****************************************************
;*         ВЫВОД 32-РАЗРЯДНОГО СЛОВА НА ЭКРАН        *
;*              В ШЕСТНАДЦАТЕРИЧНОМ КОДЕ             *
;* Параметры:                                        *
;* EAX - число, которое будет выведено на экран.     *
;* Номер строки передается через глобальную          *
;* переменную ScreenString, номер столбца - через    *
;* переменную ScreenColumn, цвет текста определяется *
;* глобальной переменой TextColorAndBackground.      *
;*****************************************************
PROC ShowHexDWord NEAR
        rol     EAX,8
        call    ShowHexByte
        rol     EAX,8
        call    ShowHexByte
        rol     EAX,8
        call    ShowHexByte
        rol     EAX,8
        call    ShowHexByte
        ret
ENDP ShowHexDWord


;**************************************************
;*      ВЫВОД БАЙТА НА ЭКРАН В ДВОИЧНОМ КОДЕ      *
;* Подпрограмма выводит содержимое регистра AL    *
;* в двоичном коде в указанную позицию экрана.    *
;* Координаты позиции передаются через глобальные *
;* переменные ScreenString и ScreenColumn. После  *
;* выполнения операции вывода происходит автома-  *
;* тическое приращение значений этих переменных.  *
;**************************************************
PROC ShowBinByte near
        pusha
        push    DS
        push    ES
        ; Копируем отображаемый байт в BL
        mov     BL,AL
        mov     AX,DGROUP
        mov     DS,AX
        cld
        ; Загрузить адрес "текстовой" видеопамяти в ES
        mov     AX,0B800h
        mov     ES,AX
        ; Умножить номер строки на длину строки в байтах
        mov     AX,[ScreenString]
        mov     DX,160
        mul     DX
        ; Прибавить дважды номер колонки
        add     AX,[ScreenColumn]
        add     AX,[ScreenColumn]
        ; Переписать результат в индексный регистр
        mov     DI,AX

; Отобразить разряды числа (начиная со старшего)
        mov     AH,[TextColorAndBackground]
        mov     CX,8   ;счетчик разрядов
@@L0:   mov     AL,'0'
        ; Выделить очередной разряд числа
        rol     BL,1
        jnc     @@L1
        mov     AL,'1'
        ; Вывести разряд числа на экран
@@L1:   stosw
        loop    @@L0

; Подготовка для вывода следующих байтов
        ; Перевести текущую позицию на 8 символов влево
        add     [ScreenColumn],8
        ; Проверить пересечение правой границы экрана
        cmp     [ScreenColumn],80
        jb      @@End
        ; Если достигнута правая граница экрана - 
        ; перейти на следующую строку
        sub     [ScreenColumn],80
        inc     [ScreenString]
; Конец подпрограммы
@@End:  pop     ES
        pop     DS
        popa
        ret
ENDP ShowBinByte


;******************************************************
;* ВЫВОД 16-РАЗРЯДНОГО СЛОВА НА ЭКРАН В ДВОИЧНОМ КОДЕ *
;* Параметры:                                         *
;* AX - число, которое будет выведено на экран.       *
;* Номер строки передается через глобальную           *
;* переменную ScreenString, номер столбца - через     *
;* переменную ScreenColumn, цвет текста определяется  *
;* глобальной переменой TextColorAndBackground.       *
;******************************************************
PROC ShowBinWord NEAR
        rol     AX,8
        call    ShowBinByte
        inc     [ScreenColumn]
        rol     AX,8
        call    ShowBinByte
        ret
ENDP ShowBinWord


;******************************************************
;* ВЫВОД 32-РАЗРЯДНОГО СЛОВА НА ЭКРАН В ДВОИЧНОМ КОДЕ *
;* Параметры:                                         *
;* EAX - число, которое будет выведено на экран.      *
;* Номер строки передается через глобальную           *
;* переменную ScreenString, номер столбца - через     *
;* переменную ScreenColumn, цвет текста определяется  *
;* глобальной переменой TextColorAndBackground.       *
;******************************************************
PROC ShowBinDWord NEAR
        rol     EAX,8
        call    ShowBinByte
        inc     [ScreenColumn]
        rol     EAX,8
        call    ShowBinByte
        inc     [ScreenColumn]
        rol     EAX,8
        call    ShowBinByte
        inc     [ScreenColumn]
        rol     EAX,8
        call    ShowBinByte
        ret
ENDP ShowBinDWord


;****************************************************
;*         ВЫВОД ТЕКСТОВОЙ СТРОКИ НА ЭКРАН          *
;* Все параметры передаются через одну структуру:   *
;* первый байт - номер начальной строки (0-24);     *
;* второй байт - номер начальной колонки (0-79);    *
;* далее идет строка, ограниченная нулем.           *
;* Адрес структуры передается через регистры DS:SI. *
;****************************************************
PROC ShowString near
        push    AX
        push    BX
        push    DI
        push    ES
; Настроить регистр ES на глобальный сегмент данных
        mov     AX,DGROUP
        mov     ES,AX
; Запомнить цвет текста в BL
        mov     BL,[ES:TextColorAndBackground]
; Настроить регистр ES на видеопамять
        mov     AX,0B800h
        mov     ES,AX    
        cld
; Вычислить адрес для строки в видеопамяти
        ; Загрузить номер строки экрана в AL и
        ; умножить его на длину строки в байтах
        lodsb
        ; Проверка: номер строки не должен превышать
        ; предел нижней границы экрана
        cmp     AL,24  
        ja      @@Error
        mov     AH,160
        mul     AH
        ; Переписать результат в индексный регистр DI
        mov     DI,AX
        ; Загрузить номер столбца и дважды
        ; прибавить его к DI
        lodsb
        cmp     AL,79   ;номер колонки не должен
        ja      @@Error ;превышать ширины экрана
        mov     BH,AL   ;запомнить номер колонки
        xor     AH,AH   ;обнулить AH
        add     DI,AX
        add     DI,AX
        ; Загрузить атрибут цвета в AH
        mov     AH,BL
@@L1:   ; Загрузить очередной символ строки в AL
        lodsb
        ; Проверка на 0 (на конец строки)
        and     AL,AL  
        jz      @@L2
        ; Проверить номер колонки символа
        cmp     BH,79
        ja      @@Error ;нарушена правая граница экрана
        ; Вывести символ на экран
        stosw
        inc     BH      ;увеличить номер колонки
        jmp     @@L1
@@L2:   pop     ES
        pop     DI
        pop     BX
        pop     AX
        ret
@@Error: ;Немедленный выход в DOS по ошибке
        mov     AH,4Ch
        int     21h
ENDP ShowString


;*******************************************************
;*         ВЫВОД ТЕКСТА (ГРУППЫ СТРОК) НА ЭКРАН        *
;* ShowText использует процедуру ShowString для вывода *
;* на экран группы строк.                              *
;* Параметры:                                          *
;* CX - количество строк;                              *
;* DS:SI - адрес первой строки в группе.               *
;* Строки должны иметь заданный для ShowString формат  *
;* и располагаться в памяти последовательно.           *
;* При выводе текста используются принятые по          *
;* умолчанию цвет и фон.                               *
;*******************************************************
PROC ShowText near
; Цикл вывода строк
@@NextString:
        call    ShowString
        loop    @@NextString
; Процедура не сохраняет значения в CX и SI
        ret
ENDP ShowText


;*****************************************************
;*  ВЫВОД ТЕКСТОВОЙ СТРОКИ ЗАДАННОГО ЦВЕТА НА ЭКРАН  *
;* Все параметры передаются через одну структуру:    *
;* первый байт - атрибут цвета и фона для строки;    *
;* второй байт - номер начальной строки (0-24);     *
;* третий байт - номер начальной колонки (0-79);     *
;* далее идет строка, ограниченная нулем.            *
;* Адрес структуры передается через регистры DS:SI.  *
;*****************************************************
PROC ShowColorString near
        push    AX
        ; Запомнить цвет, используемый по умолчанию
        mov     AL,[TextColorAndBackground]
        push    AX
        ; Установить цвет строки
        cld
        lodsb
        mov     [TextColorAndBackground],AL
        ; Использовать функцию ShowString
        call    ShowString
        ; Восстановить цвет, используемый по умолчанию
        pop     AX
        mov     [TextColorAndBackground],AL
        pop     AX
        ret
ENDP ShowColorString


;*******************************************************
;*    ВЫВОД ЦВЕТНОГО ТЕКСТА (ГРУППЫ СТРОК) НА ЭКРАН    *
;* ShowColorText использует процедуру ShowColorString  *
;* для вывода на экран группы разноцветных строк.      *
;* Параметры:                                          *
;* CX - количество строк;                              *
;* DS:SI - адрес первой строки в группе.               *
;* Строки должны иметь заданный для ShowColorString    *
;* формат и располагаться в памяти последовательно.    *
;* При выводе текста используются принятые по          *
;* умолчанию цвет и фон.                               *
;*******************************************************
PROC ShowColorText near
; Цикл вывода строк
@@NextColorString:
        call    ShowColorString
        loop    @@NextColorString
; Процедура не сохраняет значения в CX и SI
        ret
ENDP ShowColorText


;********************************
;*  УСТАНОВИТЬ ПОЗИЦИЮ КУРСОРА  *
;* Входные параметры:           *
;* ScreenString - номер строки  *
;* ScreenColumn - номер столбца *
;********************************
PROC SetCursorPosition NEAR
        pusha
; Вычисление линейного адреса курсора
        mov     AX,[ScreenString]
        mov     BX,80
        mul     BX
        add     AX,[ScreenColumn]
        mov     BL,AL ;запомнить младший байт
; Прямой вывод позиции курсора
; в регистры видеоконтроллера
        mov     DX,3D4h
        ; Вывести старший байт адреса курсора
        mov     AL,0Eh
        out     DX,AX  
        ; Вывести младший байт адреса курсора
        inc     AL
        mov     AH,BL
        out     DX,AX  
        popa
        ret
ENDP SetCursorPosition


;*********************************************
;*       ПРИНЯТЬ СИМВОЛ ОТ КЛАВИАТУРЫ        *
;* Процедура осуществляет ввод символа с     *
;* помощью функции 00h прерывания Int16h.    *
;* Для "текстовых" управляющих клавиш вместо *
;* скан-кодов используются ASCII-коды.       *
;* Входных параметров нет.                   *
;* Функция возвращает:                       *
;* AL - код символа;                         *
;* AH - управляющий код, если в AL ноль.     *
;*********************************************
PROC GetChar NEAR
; Очистить буфер клавиатуры
@@ClearBuffer:
        mov     AH,1
        int     16h
        jz      @@WaitChar
        mov     AH,0
        int     16h
        jmp short @@ClearBuffer
; Ожидать нажатие клавиши и принять код символа
@@WaitChar:
        mov     AH,0
        int     16h
; Обработать принятый код
        and     AL,AL
        jnz     @@Get1
        ret     ;(в AL - ноль, в AH - управляющий код)
@@Get1: cmp     AL,32
        jnb     @@Get2
        ; Переписать в AH управляющий код
        xchg    AL,AH 
        mov     AL,0
        ret     ;(в AL - ноль, в AH - управляющий код)
@@Get2: mov     AH,0
        ret     ;(в AL - код буквы, в AH - ноль)
ENDP GetChar


;*************************************
;* ОЧИСТКА ЭКРАНА В ТЕКСТОВОМ РЕЖИМЕ *
;*  (процедура параметров не имеет)  *
;*************************************
PROC ClearScreen NEAR
        pusha
        push    ES
; Настроить ES:DI на "текстовую" область видеопамяти
        mov     AX,0B800h 
        mov     ES,AX     
        cld
        mov     DI,0
; Вывести 2000 "пустых" символов (ASCII-код 0) с
; атрибутом "белый цвет, черный фон"
        mov     CX,2000
        mov     AX,0F00H
        rep     stosw
        pop     ES
        popa
        ret
ENDP ClearScreen


;*****************************************************
;* ПОДАЧА ЗВУКОВОГО СИГНАЛА ЧЕРЕЗ ВСТРОЕННЫЙ ДИНАМИК *
;*          (процедура параметров не имеет)          *
;*****************************************************
PROC Beep NEAR
        push    AX
        push    DX
; Послать на терминал код "звонок" (07h)
        mov     AH,2
        mov     DL,7
        int     21h
        pop     DX
        pop     AX
        ret
ENDP Beep


;*******************************************
;* ВЫВОД НА ЭКРАН СОДЕРЖИМОГО 512-БАЙТНОГО *
;*       БУФЕРА СЕКТОРА В ASCII-КОДЕ       *
;* Адрес буфера передается через пару      *
;* регистров DS:SI                         *
;*******************************************
PROC ShowSector512 NEAR
        pusha
        push    ES
; Установить начало окна отображения сектора
        mov     AX,0B800h
        mov     ES,AX
        mov     DI,7*160+8*2
        cld
; Задать для символов светло-голубой цвет и синий фон
        mov     AH,LIGHTCYAN+BLUE*16
; Цикл по строкам
        mov     DX,8  ;счетчик строк
@@OutNextString:
; Цикл по символам строки
        mov     CX,64 ;счетчик символов в строке
@@OutNextChar:
        lodsb
        stosw
        loop    @@OutNextChar
        ; Перейти на следующую строку
        add     DI,16*2
        dec     DX
        jnz     @@OutNextString
        pop     ES
        popa
        ret
ENDP ShowSector512


;********************************************
;* ВЫВОД НА ЭКРАН СОДЕРЖИМОГО 1024-БАЙТНОГО *
;*        БУФЕРА СЕКТОРА В ASCII-КОДЕ       *
;* Адрес буфера передается через пару       *
;* регистров DS:SI                          *
;********************************************
PROC ShowSector1024 NEAR
        pusha
        push    ES
; Установить начало окна отображения сектора
        mov     AX,0B800h
        mov     ES,AX
        mov     DI,3*160+8*2
        cld
; Задать для символов светло-голубой цвет и синий фон
        mov     AH,LIGHTCYAN+BLUE*16
; Цикл по строкам
        mov     DX,16 ;счетчик строк
@@OutNextString:
; Цикл по символам строки
        mov     CX,64 ;счетчик символов в строке
@@OutNextChar:
        lodsb
        stosw
        loop    @@OutNextChar
        ; Перейти на следующую строку
        add     DI,16*2
        dec     DX
        jnz     @@OutNextString
        pop     ES
        popa
        ret
ENDP ShowSector1024


;****************************************************
;*      ВЫВОД НА ЭКРАН ТЕКСТОВОГО ПОЛЯ ДАННЫХ       *
;* Передаваемые параметры:                          *
;* DS:SI - указатель на структуру данных;           *
;* BX - смещение поля от начала структуры;          *
;* CX - длина поля в байтах.                        *
;* Цвет задается переменной TextColorAndBackground. *
;* Координаты позиции передаются через глобальные   *
;* переменные ScreenString и ScreenColumn.          *
;****************************************************
PROC ShowASCIIField near
        pusha
        push    ES
        mov     AX,0B800h    ;Настроить ES для прямого
        mov     ES,AX        ;вывода на экран
; Установить указатель на начало поля
        add     SI,BX
; Вычислить начальную позицию в видеопамяти
        mov     AX,[ScreenString]
        mov     DI,160
        mul     DI
        add     AX,[ScreenColumn]
        add     AX,[ScreenColumn]
        mov     DI,AX
; Использовать цвет, заданный по умолчанию
        mov     AH,[TextColorAndBackground]
; Вывести поле на экран
@@NextChar:
        lodsb
        stosw
        loop    @@NextChar
        pop     ES
        popa
        ret
ENDP ShowASCIIField


;****************************************************
;*       ВЫДАЧА СООБЩЕНИЯ О ФАТАЛЬНОЙ ОШИБКЕ        *
;*         И ЭКСТРЕННЫЙ ВЫХОД ИЗ ПРОГРАММЫ          *
;* Параметры:                                       *
;* DS:SI - указатель на строку сообщения об ошибке, *
;* представленную в формате ShowColorString.        *
;****************************************************
PROC FatalError near
; Вывести сообщение об ошибке
        call    ClearScreen
        call    ShowColorString
; Аварийный выход из программы
        mov     AH,4Ch
        int     21h
ENDP FatalError
ENDS
