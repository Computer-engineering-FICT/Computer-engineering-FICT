<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0071)http://www.ctc.msiu.ru/materials/Book2/ch_10_prolog/00_logic/index.html -->
<HTML><HEAD><TITLE>Логика и Пролог</TITLE>
<META http-equiv=Content-Type content="text/html; charset=koi8-r"><LINK 
href="Логика&nbsp;и&nbsp;Пролог.files/list.css" type=text/css rel=stylesheet>
<SCRIPT language=javascript1.2 
src="Логика&nbsp;и&nbsp;Пролог.files/cookie.js">
</SCRIPT>

<SCRIPT language=javascript1.2>
function onLoad () {
  parent.nav.set_cookie ("Source", "./ch_10_prolog/00_logic/index.html", 1000);
}
</SCRIPT>

<META content="MSHTML 6.00.2900.2180" name=GENERATOR></HEAD>
<BODY><A 
href="http://www.ctc.msiu.ru/materials/Book2/ch_10_prolog/index.html"><IMG 
alt="Предыдущий раздел" src="Логика&nbsp;и&nbsp;Пролог.files/prev.gif" 
border=0></A> <A 
href="http://www.ctc.msiu.ru/materials/Book2/ch_10_prolog/index.html"><IMG 
alt="Уровень выше" src="Логика&nbsp;и&nbsp;Пролог.files/up.gif" border=0></A> <A 
href="http://www.ctc.msiu.ru/materials/Book2/ch_10_prolog/01_term/index.html"><IMG 
alt="Следующий раздел" src="Логика&nbsp;и&nbsp;Пролог.files/next.gif" 
border=0></A> <A 
onmousedown="document.images['cont'].src='../../Images/ContentsDown.gif'" 
onmouseout="document.images['cont'].src='../../Images/Contents.gif'" 
href="http://www.ctc.msiu.ru/materials/Book2/contents.html"><IMG 
src="Логика&nbsp;и&nbsp;Пролог.files/Contents.gif" border=0 name=cont></A> 
<H2>Классическая логика и язык Пролог</H2><IMG 
src="Логика&nbsp;и&nbsp;Пролог.files/blank.gif"> 
<P>Логические языки, как и следует из их названия, для цели передачи смысла 
программ используют средства математической логики. Сама по себе логика была 
изобретена как инструмент человеческой мысли, позволяющий упорядочить знания и 
получить из них соответствующие выводы. Поэтому идея использования принципов 
математической логики при составлении компьютерных программ кажется довольно 
естественной. 
<P>Ранее мы уже познакомились с частью логики, называемой <B>исчислением 
высказываний</B>. Но <A name=3></A>исчисление высказываний не дает возможности 
выразить многие факты и рассуждения, которыми пользуются в обыденной жизни. 
Например, рассмотрим классическое рассуждение: 
<BLOCKQUOTE><EM>Все люди смертны (<TT>p</TT>); <BR>Сократ - человек 
  (<TT>q</TT>); <BR>следовательно, (<TT>-&gt;</TT>) <BR>Сократ смертен 
  (<TT>r</TT>). </EM></BLOCKQUOTE>Это рассуждение верное, но его невозможно 
доказать в рамках теории высказываний. Мы можем записать формулу 
<TT>(p&amp;&amp;q)-&gt;r</TT>, но доказать ее истинность уже не сможем. Таким 
образом, логика высказываний не позволяет достаточно точно выразить 
рассматриваемое рассуждение. Это связано с тем, что она рассматривает каждое 
высказывание как неделимый объект, в то время как многие из высказываний зависят 
от неких параметров. 
<P><B>Исчисление предикатов</B> является обобщением исчисления высказываний, 
позволяющим использовать параметры (называемые также аргументами или 
переменными) в высказываниях. В терминах теории предикатов наше рассуждение 
можно записать так: 
<BLOCKQUOTE><EM>Для всех <EM>x</EM>, если <EM>x</EM> является человеком, 
  <BR>то <EM>x</EM> является смертным; <BR>Сократ является человеком; 
  <BR>(следовательно) <BR>Сократ является смертным. </EM></BLOCKQUOTE>
<P>Изучение исчисления предикатов не является нашей задачей, однако, для того, 
чтобы применять язык логического программирования, не обязательно знать логику 
предикатов: она уже встроена в него. Достаточно изучить сам язык и привыкнуть к 
его выразительным средствам. 
<P>Язык Пролог, самый известный из представителей семейства языков логического 
программирования, вырос из работ Алана Колмерауэра (A. Colmerauer) по обработке 
естественного языка и независимых работ Роберта Ковалького (R. Kowalski) по 
приложениям логики к программированию. Дэвиду Уоррену (D. Warren) и его коллегам 
из Эдинбургского университета удалось осуществить достаточно эффективную 
реализацию Пролога. Имя Уоррена вошло в историю логического программирования. В 
его честь названа базовая техника реализации Пролога, получившая название 
<EM>абстрактной машины Уоррена.</EM> 
<P><B>Программа</B> на языке Пролог представляет собой <EM>набор фактов и 
(возможно) правил</EM>. Если программа содержит только факты, то ее называют 
<EM><A name=4></A>база данных</EM>. Если она содержит еще и правила, то часто 
используют термин <EM><A name=5></A>база знаний</EM>. 
<P>Для запуска Пролога, наберите в командной строке <B>pl</B> и нажмите 
<TT>Enter</TT>. На экране появится приглашение для ввода запросов: <PRE>?-
</PRE>
<P><B>Запрос</B> (вопрос) вводится после приглашения и обязательно заканчивается 
точкой, например, <PRE>?- 5+4&lt;3.
No
</PRE>Пролог анализирует запрос и выдает ответ <TT>Yes</TT> (Да) в случае 
истинности утверждения и <TT>No</TT> (Нет) в противном случае или когда ответ не 
может быть найден. 
<P>Хранят программы на языке Пролог в текстовых файлах, чаще всего имеющих 
расширение <TT>pl</TT>, например, <TT>example1.pl</TT>. Для того чтобы Пролог 
мог оперировать информацией, содержащейся в файле, он должен ознакомится с его 
содержимым (<EM>проконсультироваться</EM> с ним). Это можно сделать несколькими 
способами. При использовании первого варианта в квадратных скобках записывается 
имя файла (без <TT>pl</TT>), например, <PRE>?- [example1].
</PRE>В случае удачного завершения этой операции будет выдано сообщение, 
аналогичное следующему: <PRE>% example1 compiled 0.00 sec, 612 bytes
Yes
</PRE>В противном случае будет выдан список ошибок (ERROR) и/или предупреждений 
(Warning). 
<P>Второй способ состоит в вызове встроенного предиката <TT>consult</TT>, 
которому в качестве аргумента передается имя файла (также без расширения), 
например: <PRE>?- consult(example1).
</PRE>
<P>Расширение <TT>pl</TT> часто используется для файлов, содержащих программы на 
языке программирования Perl, поэтому можно встретить и другие расширения для 
файлов с программами на Прологе. Для загрузки файлов с расширениями, отличными 
от <TT>pl</TT>, все имя файла следует обязательно заключать в апострофы: <PRE>?- consult('example2.prolog').
?- ['example2.prolog'].
</PRE>
<P>Обе эти команды добавляют факты и правила из указанного файла в базу данных 
Пролога. Можно загружать несколько файлов одновременно. В этом случае они 
перечисляются через запятую, например, <PRE>?- [example1, 'example2.prolog'].
</PRE>
<P>Важно помнить, что все запросы должны заканчиваться точкой. Если вы забудете 
ее поставить, то Пролог выведет символ <TT>'|'</TT> и будет ожидать дальнейшего 
ввода. В этом случае надо ввести точку и нажать клавишу <TT>Enter</TT>: <PRE>?- [example1]
| .
Yes
</PRE><BR clear=all><A 
href="http://www.ctc.msiu.ru/materials/Book2/ch_10_prolog/index.html"><IMG 
alt="Предыдущий раздел" src="Логика&nbsp;и&nbsp;Пролог.files/prev.gif" 
border=0></A> <A 
href="http://www.ctc.msiu.ru/materials/Book2/ch_10_prolog/index.html"><IMG 
alt="Уровень выше" src="Логика&nbsp;и&nbsp;Пролог.files/up.gif" border=0></A> <A 
href="http://www.ctc.msiu.ru/materials/Book2/ch_10_prolog/01_term/index.html"><IMG 
alt="Следующий раздел" src="Логика&nbsp;и&nbsp;Пролог.files/next.gif" 
border=0></A> </BODY></HTML>
