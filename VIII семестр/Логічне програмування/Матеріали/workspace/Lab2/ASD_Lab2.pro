% Определение минимального элемента списка
        
        % С использованием предиката ("если_тогда_иначе" = "ети")
        ети(G1,G2,G3) :- 
                G1 -> G2 ; G3.
                
                % Без отсечения
                мэ1(A,B,C) :- 
                        ети(A@<B, C is A, C is B).      % "минимальный_элемент" = "мэ"
                мэ1([H],H).                                             
                мэ1([H|T],M) :- 
                        мэ1(T,M2), мэ1(H,M2,M).
                % С отсечением
                мэ1зо(A,B,C) :- 
                        ети(A@<B, C is A, C is B).
                мэ1зо([H],H) :- 
                        !.                                      
                мэ1зо([H|T],M) :- 
                        мэ1зо(T,M2), мэ1зо(H,M2,M). 
        
        % Без использования предиката ifthenelse("если_тогда_иначе")
                                /*мэ2(A,B,C) :- A<B, C is A; A>=B, C is B.*/
                % Без отсечения
                мэ2(A,B,A) :- 
                        A<B.
                мэ2(A,B,B) :- 
                        A>=B.
                мэ2([H],H).                                             
                мэ2([H|T],M) :- 
                        мэ2(T,M2), мэ2(H,M2,M).
                % С отсечением
                мэ2зо(A,B,A) :- 
                        A<B,!.
                мэ2зо(A,B,B) :- 
                        A>=B.
                мэ2зо([H],H) :- 
                        !.                                      
                мэ2зо([H|T],M) :- 
                        мэ2зо(T,M2), мэ2зо(H,M2,M).

% Сортировка списка по возрастанию
        % Без отсечения
        удаление([H|T],El,R) :- 
                ети(H=\=El, 
                        (удаление(T,El,T1),R=[H|T1]), 
                        R=T).
        сортировка([],[]).
        сортировка(L,[H|T]) :- 
                мэ2(L,H), 
                удаление(L,H,L2), 
                сортировка(L2,T).
        % С отсечением
        удаление_зо([H|T],El,R) :- 
                ети(H=\=El,
                        (удаление_зо(T,El,T1),R=[H|T1]), 
                        R=T).
        сортировка_зо([],[]) :- 
                !.
        сортировка_зо(L,[H|T]) :- 
                мэ2зо(L,H), 
                удаление_зо(L,H,L2), 
                сортировка_зо(L2,T).
        
% Исключение из 1-го списка всех элементов,
% совпадающих с элементами 2-го списка.
        принадлежит(X, [X|T]).
        принадлежит(X, [H|T]) :-
                принадлежит(X, T).
                
        %добавить(X, L, [X|L]).
        
        /*
        исключение([H], Y, Z) :-
                принадлежит(H, Y),
                Z = [];
                Z = H.
        */      
                
        исключить([H|T], Y, Z) :-
                принадлежит(H,Y), исключить(T, Y, Z).
                
        исключить([H|T], Y, [H|Z]) :- принадлежит(H,Y), исключить(T, Y, Z).     
                
        исключить([], _, []).

% Тесты:
        % минимальный элемент списка
        тест1(X) :- мэ2зо([1,3,2,4,5,4,0,6],X).
        % cортировка списка по возрастанию
        тест2(X) :- сортировка([1,3,2,4,5,4,0,6],X).
        % Исключение из 1-го списка всех элементов,
        % совпадающих с элементами 2-го списка.
        тест3(X) :- исключить([1,2,3,4], [3,2,5], X).